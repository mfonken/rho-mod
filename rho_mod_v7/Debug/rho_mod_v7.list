
rho_mod_v7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdf0  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800d028  0800d028  0001d028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d63c  0800d63c  0001d63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d644  0800d644  0001d644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d648  0800d648  0001d648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000480  20000000  0800d64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007f50  20000480  0800dacc  00020480  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200083d0  0800dacc  000283d0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022216  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bea  00000000  00000000  000426cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001518  00000000  00000000  000462b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013b8  00000000  00000000  000477d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034b6b  00000000  00000000  00048b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d110  00000000  00000000  0007d6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013bc41  00000000  00000000  0009a803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d6444  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068e4  00000000  00000000  001d6494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000480 	.word	0x20000480
 8000254:	00000000 	.word	0x00000000
 8000258:	0800d010 	.word	0x0800d010

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000484 	.word	0x20000484
 8000274:	0800d010 	.word	0x0800d010

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b982 	b.w	8000ecc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000be6:	4604      	mov	r4, r0
 8000be8:	460f      	mov	r7, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d148      	bne.n	8000c80 <__udivmoddi4+0xa0>
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	d961      	bls.n	8000cb8 <__udivmoddi4+0xd8>
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	b143      	cbz	r3, 8000c0c <__udivmoddi4+0x2c>
 8000bfa:	f1c3 0120 	rsb	r1, r3, #32
 8000bfe:	409f      	lsls	r7, r3
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	409c      	lsls	r4, r3
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	430f      	orrs	r7, r1
 8000c0c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c10:	fa1f fe8c 	uxth.w	lr, ip
 8000c14:	0c22      	lsrs	r2, r4, #16
 8000c16:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c1a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c1e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c22:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c26:	4290      	cmp	r0, r2
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x5c>
 8000c2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x5a>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f200 8137 	bhi.w	8000ea8 <__udivmoddi4+0x2c8>
 8000c3a:	463e      	mov	r6, r7
 8000c3c:	1a12      	subs	r2, r2, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c44:	fb01 2210 	mls	r2, r1, r0, r2
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x86>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x84>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f200 811c 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000c64:	4610      	mov	r0, r2
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	2600      	movs	r6, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0x9a>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	f000 80fd 	beq.w	8000e84 <__udivmoddi4+0x2a4>
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	4630      	mov	r0, r6
 8000c92:	4631      	mov	r1, r6
 8000c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c98:	fab3 f683 	clz	r6, r3
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d14b      	bne.n	8000d38 <__udivmoddi4+0x158>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f240 80ef 	bls.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4630      	mov	r0, r6
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e3      	beq.n	8000c7a <__udivmoddi4+0x9a>
 8000cb2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cb6:	e7e0      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xdc>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f382 	clz	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 809d 	bne.w	8000e00 <__udivmoddi4+0x220>
 8000cc6:	1a89      	subs	r1, r1, r2
 8000cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ccc:	b297      	uxth	r7, r2
 8000cce:	2601      	movs	r6, #1
 8000cd0:	0c20      	lsrs	r0, r4, #16
 8000cd2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000cd6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000cda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cde:	fb07 f002 	mul.w	r0, r7, r2
 8000ce2:	4288      	cmp	r0, r1
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f102 38ff 	add.w	r8, r2, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80cf 	beq.w	8000ea2 <__udivmoddi4+0x2c2>
 8000d04:	4642      	mov	r2, r8
 8000d06:	1a09      	subs	r1, r1, r0
 8000d08:	b2a4      	uxth	r4, r4
 8000d0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d1a:	42a7      	cmp	r7, r4
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x150>
 8000d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d22:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x14e>
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	f200 80b4 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	1be4      	subs	r4, r4, r7
 8000d32:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d36:	e79b      	b.n	8000c70 <__udivmoddi4+0x90>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	40f9      	lsrs	r1, r7
 8000d48:	40b2      	lsls	r2, r6
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	431c      	orrs	r4, r3
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d60:	0c20      	lsrs	r0, r4, #16
 8000d62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d66:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d72:	4288      	cmp	r0, r1
 8000d74:	d90f      	bls.n	8000d96 <__udivmoddi4+0x1b6>
 8000d76:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7e:	bf2c      	ite	cs
 8000d80:	f04f 0b01 	movcs.w	fp, #1
 8000d84:	f04f 0b00 	movcc.w	fp, #0
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	d903      	bls.n	8000d94 <__udivmoddi4+0x1b4>
 8000d8c:	f1bb 0f00 	cmp.w	fp, #0
 8000d90:	f000 808d 	beq.w	8000eae <__udivmoddi4+0x2ce>
 8000d94:	46d0      	mov	r8, sl
 8000d96:	1a09      	subs	r1, r1, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9e:	fb09 1110 	mls	r1, r9, r0, r1
 8000da2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1de>
 8000dae:	eb1c 0101 	adds.w	r1, ip, r1
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d201      	bcs.n	8000dbc <__udivmoddi4+0x1dc>
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d87f      	bhi.n	8000ebc <__udivmoddi4+0x2dc>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	fba0 9802 	umull	r9, r8, r0, r2
 8000dca:	4541      	cmp	r1, r8
 8000dcc:	464c      	mov	r4, r9
 8000dce:	46c6      	mov	lr, r8
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x1f8>
 8000dd2:	d106      	bne.n	8000de2 <__udivmoddi4+0x202>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d204      	bcs.n	8000de2 <__udivmoddi4+0x202>
 8000dd8:	3801      	subs	r0, #1
 8000dda:	ebb9 0402 	subs.w	r4, r9, r2
 8000dde:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d070      	beq.n	8000ec8 <__udivmoddi4+0x2e8>
 8000de6:	1b1a      	subs	r2, r3, r4
 8000de8:	eb61 010e 	sbc.w	r1, r1, lr
 8000dec:	fa22 f306 	lsr.w	r3, r2, r6
 8000df0:	fa01 f707 	lsl.w	r7, r1, r7
 8000df4:	40f1      	lsrs	r1, r6
 8000df6:	2600      	movs	r6, #0
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	e73c      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	f1c3 0020 	rsb	r0, r3, #32
 8000e08:	fa01 f203 	lsl.w	r2, r1, r3
 8000e0c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e10:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e14:	fa24 f100 	lsr.w	r1, r4, r0
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	4311      	orrs	r1, r2
 8000e20:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e24:	0c0a      	lsrs	r2, r1, #16
 8000e26:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e2a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e2e:	fb00 f607 	mul.w	r6, r0, r7
 8000e32:	4296      	cmp	r6, r2
 8000e34:	d90e      	bls.n	8000e54 <__udivmoddi4+0x274>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	bf2c      	ite	cs
 8000e40:	f04f 0901 	movcs.w	r9, #1
 8000e44:	f04f 0900 	movcc.w	r9, #0
 8000e48:	4296      	cmp	r6, r2
 8000e4a:	d902      	bls.n	8000e52 <__udivmoddi4+0x272>
 8000e4c:	f1b9 0f00 	cmp.w	r9, #0
 8000e50:	d031      	beq.n	8000eb6 <__udivmoddi4+0x2d6>
 8000e52:	4640      	mov	r0, r8
 8000e54:	1b92      	subs	r2, r2, r6
 8000e56:	b289      	uxth	r1, r1
 8000e58:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e5c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000e60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e64:	fb06 f207 	mul.w	r2, r6, r7
 8000e68:	428a      	cmp	r2, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x29c>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x29a>
 8000e76:	428a      	cmp	r2, r1
 8000e78:	d823      	bhi.n	8000ec2 <__udivmoddi4+0x2e2>
 8000e7a:	4646      	mov	r6, r8
 8000e7c:	1a89      	subs	r1, r1, r2
 8000e7e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e82:	e725      	b.n	8000cd0 <__udivmoddi4+0xf0>
 8000e84:	462e      	mov	r6, r5
 8000e86:	4628      	mov	r0, r5
 8000e88:	e6f7      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb61 0303 	sbc.w	r3, r1, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	461f      	mov	r7, r3
 8000e94:	e70b      	b.n	8000cae <__udivmoddi4+0xce>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e749      	b.n	8000d30 <__udivmoddi4+0x150>
 8000e9c:	4464      	add	r4, ip
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	e6e1      	b.n	8000c66 <__udivmoddi4+0x86>
 8000ea2:	3a02      	subs	r2, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	e72e      	b.n	8000d06 <__udivmoddi4+0x126>
 8000ea8:	3e02      	subs	r6, #2
 8000eaa:	4462      	add	r2, ip
 8000eac:	e6c6      	b.n	8000c3c <__udivmoddi4+0x5c>
 8000eae:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb2:	4461      	add	r1, ip
 8000eb4:	e76f      	b.n	8000d96 <__udivmoddi4+0x1b6>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	e7cb      	b.n	8000e54 <__udivmoddi4+0x274>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e77d      	b.n	8000dbe <__udivmoddi4+0x1de>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	e7d9      	b.n	8000e7c <__udivmoddi4+0x29c>
 8000ec8:	462e      	mov	r6, r5
 8000eca:	e6d6      	b.n	8000c7a <__udivmoddi4+0x9a>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MX_DCMIQueue_Config>:
  * @brief  DMA Linked-list DCMIQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_DCMIQueue_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09c      	sub	sp, #112	; 0x70
 8000ed4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000edc:	2322      	movs	r3, #34	; 0x22
 8000ede:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 8000ee0:	2356      	movs	r3, #86	; 0x56
 8000ee2:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8000ef0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ef4:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efe:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000f24:	2300      	movs	r3, #0
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build DCMINode1 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMINode1);
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	491f      	ldr	r1, [pc, #124]	; (8000fbc <MX_DCMIQueue_Config+0xec>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f87b 	bl	800303c <HAL_DMAEx_List_BuildNode>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMINode1 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode1);
 8000f54:	4919      	ldr	r1, [pc, #100]	; (8000fbc <MX_DCMIQueue_Config+0xec>)
 8000f56:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <MX_DCMIQueue_Config+0xf0>)
 8000f58:	f002 f886 	bl	8003068 <HAL_DMAEx_List_InsertNode_Tail>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f64:	4313      	orrs	r3, r2
 8000f66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build DCMINode2 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMINode2);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4915      	ldr	r1, [pc, #84]	; (8000fc4 <MX_DCMIQueue_Config+0xf4>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 f864 	bl	800303c <HAL_DMAEx_List_BuildNode>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMINode2 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode2);
 8000f82:	4910      	ldr	r1, [pc, #64]	; (8000fc4 <MX_DCMIQueue_Config+0xf4>)
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <MX_DCMIQueue_Config+0xf0>)
 8000f86:	f002 f86f 	bl	8003068 <HAL_DMAEx_List_InsertNode_Tail>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f92:	4313      	orrs	r3, r2
 8000f94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&DCMIQueue, &DCMINode1);
 8000f98:	4908      	ldr	r1, [pc, #32]	; (8000fbc <MX_DCMIQueue_Config+0xec>)
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <MX_DCMIQueue_Config+0xf0>)
 8000f9c:	f002 f8dc 	bl	8003158 <HAL_DMAEx_List_SetCircularModeConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8000fae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3770      	adds	r7, #112	; 0x70
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000049c 	.word	0x2000049c
 8000fc0:	200004c0 	.word	0x200004c0
 8000fc4:	200004d8 	.word	0x200004d8

08000fc8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
//	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
//	return (int) status;
	return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fd58 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f82e 	bl	800104c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ff0:	f000 f890 	bl	8001114 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f000 f9b4 	bl	8001360 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000ff8:	f000 f8c8 	bl	800118c <MX_GPDMA1_Init>
  MX_I2C3_Init();
 8000ffc:	f000 f910 	bl	8001220 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001000:	f000 f962 	bl	80012c8 <MX_USART1_UART_Init>
  MX_DCMI_Init();
 8001004:	f000 f88c 	bl	8001120 <MX_DCMI_Init>
  MX_ICACHE_Init();
 8001008:	f000 f94a 	bl	80012a0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
	MX_DCMIQueue_Config();
 800100c:	f7ff ff60 	bl	8000ed0 <MX_DCMIQueue_Config>
	HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel15, &DCMIQueue);
 8001010:	4908      	ldr	r1, [pc, #32]	; (8001034 <main+0x50>)
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <main+0x54>)
 8001014:	f002 f90e 	bl	8003234 <HAL_DMAEx_List_LinkQ>
	__HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel15);
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <main+0x58>)
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <main+0x54>)
 800101c:	649a      	str	r2, [r3, #72]	; 0x48
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <main+0x54>)
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <main+0x58>)
 8001022:	65da      	str	r2, [r3, #92]	; 0x5c

	printf("Starting...\r\n");
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <main+0x5c>)
 8001026:	f009 fef1 	bl	800ae0c <puts>
	MasterFunctions.Connect(&master_ios);
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <main+0x60>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <main+0x64>)
 8001030:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001032:	e7fe      	b.n	8001032 <main+0x4e>
 8001034:	200004c0 	.word	0x200004c0
 8001038:	2000054c 	.word	0x2000054c
 800103c:	200004fc 	.word	0x200004fc
 8001040:	0800d07c 	.word	0x0800d07c
 8001044:	20000000 	.word	0x20000000
 8001048:	2000000c 	.word	0x2000000c

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b09e      	sub	sp, #120	; 0x78
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0318 	add.w	r3, r7, #24
 8001056:	2260      	movs	r2, #96	; 0x60
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f009 f9c5 	bl	800a3ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	463b      	mov	r3, r7
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001070:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001074:	f003 fd1e 	bl	8004ab4 <HAL_PWREx_ControlVoltageScaling>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800107e:	f000 fa01 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001082:	2322      	movs	r3, #34	; 0x22
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001092:	2310      	movs	r3, #16
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109a:	2302      	movs	r3, #2
 800109c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010a6:	230a      	movs	r3, #10
 80010a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80010b6:	230c      	movs	r3, #12
 80010b8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 fd88 	bl	8004bd8 <HAL_RCC_OscConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80010ce:	f000 f9d9 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d2:	231f      	movs	r3, #31
 80010d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d6:	2303      	movs	r3, #3
 80010d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	2104      	movs	r1, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f004 fc48 	bl	8005984 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010fa:	f000 f9c3 	bl	8001484 <Error_Handler>
  }

  /** MCO configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_4);
 80010fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001102:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001106:	2000      	movs	r0, #0
 8001108:	f004 fe2e 	bl	8005d68 <HAL_RCC_MCOConfig>
}
 800110c:	bf00      	nop
 800110e:	3778      	adds	r7, #120	; 0x78
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001118:	f003 fd4e 	bl	8004bb8 <HAL_PWREx_DisableUCPDDeadBattery>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_DCMI_Init+0x64>)
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <MX_DCMI_Init+0x68>)
 8001128:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_DCMI_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_DCMI_Init+0x64>)
 8001132:	2220      	movs	r2, #32
 8001134:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_DCMI_Init+0x64>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_DCMI_Init+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <MX_DCMI_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_10B;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_DCMI_Init+0x64>)
 800114a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114e:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_DCMI_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_DCMI_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_DCMI_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_DCMI_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_DCMI_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_DCMI_Init+0x64>)
 8001170:	f000 fe7e 	bl	8001e70 <HAL_DCMI_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_DCMI_Init+0x5e>
  {
    Error_Handler();
 800117a:	f000 f983 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200004fc 	.word	0x200004fc
 8001188:	4202c000 	.word	0x4202c000

0800118c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_GPDMA1_Init+0x88>)
 8001194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <MX_GPDMA1_Init+0x88>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_GPDMA1_Init+0x88>)
 80011a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel15_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2057      	movs	r0, #87	; 0x57
 80011b6:	f000 fe18 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel15_IRQn);
 80011ba:	2057      	movs	r0, #87	; 0x57
 80011bc:	f000 fe2f 	bl	8001e1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel15.Instance = GPDMA1_Channel15;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <MX_GPDMA1_Init+0x8c>)
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <MX_GPDMA1_Init+0x90>)
 80011c4:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel15.InitLinkedList.Priority = DMA_HIGH_PRIORITY;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_GPDMA1_Init+0x8c>)
 80011c8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80011cc:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel15.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <MX_GPDMA1_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel15.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_GPDMA1_Init+0x8c>)
 80011d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel15.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_GPDMA1_Init+0x8c>)
 80011de:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80011e2:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel15.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_GPDMA1_Init+0x8c>)
 80011e6:	2281      	movs	r2, #129	; 0x81
 80011e8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel15) != HAL_OK)
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <MX_GPDMA1_Init+0x8c>)
 80011ec:	f001 fd64 	bl	8002cb8 <HAL_DMAEx_List_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_GPDMA1_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f945 	bl	8001484 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel15, DMA_CHANNEL_PRIV) != HAL_OK)
 80011fa:	2111      	movs	r1, #17
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_GPDMA1_Init+0x8c>)
 80011fe:	f001 fcf9 	bl	8002bf4 <HAL_DMA_ConfigChannelAttributes>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_GPDMA1_Init+0x80>
  {
    Error_Handler();
 8001208:	f000 f93c 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	46020c00 	.word	0x46020c00
 8001218:	2000054c 	.word	0x2000054c
 800121c:	400207d0 	.word	0x400207d0

08001220 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_I2C3_Init+0x74>)
 8001226:	4a1c      	ldr	r2, [pc, #112]	; (8001298 <MX_I2C3_Init+0x78>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <MX_I2C3_Init+0x74>)
 800122c:	4a1b      	ldr	r2, [pc, #108]	; (800129c <MX_I2C3_Init+0x7c>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_I2C3_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_I2C3_Init+0x74>)
 8001238:	2201      	movs	r2, #1
 800123a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_I2C3_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_I2C3_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_I2C3_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_I2C3_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_I2C3_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800125a:	480e      	ldr	r0, [pc, #56]	; (8001294 <MX_I2C3_Init+0x74>)
 800125c:	f002 fe70 	bl	8003f40 <HAL_I2C_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001266:	f000 f90d 	bl	8001484 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126a:	2100      	movs	r1, #0
 800126c:	4809      	ldr	r0, [pc, #36]	; (8001294 <MX_I2C3_Init+0x74>)
 800126e:	f003 fb59 	bl	8004924 <HAL_I2CEx_ConfigAnalogFilter>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001278:	f000 f904 	bl	8001484 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800127c:	2100      	movs	r1, #0
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_I2C3_Init+0x74>)
 8001280:	f003 fb9b 	bl	80049ba <HAL_I2CEx_ConfigDigitalFilter>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800128a:	f000 f8fb 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200005c4 	.word	0x200005c4
 8001298:	46002800 	.word	0x46002800
 800129c:	30909dec 	.word	0x30909dec

080012a0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80012a4:	2000      	movs	r0, #0
 80012a6:	f003 fbd5 	bl	8004a54 <HAL_ICACHE_ConfigAssociativityMode>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80012b0:	f000 f8e8 	bl	8001484 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80012b4:	f003 fbee 	bl	8004a94 <HAL_ICACHE_Enable>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80012be:	f000 f8e1 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <MX_USART1_UART_Init+0x90>)
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <MX_USART1_UART_Init+0x94>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_USART1_UART_Init+0x90>)
 80012d4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80012d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_USART1_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_USART1_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_USART1_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_USART1_UART_Init+0x90>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_USART1_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_USART1_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_USART1_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_USART1_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART1_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_USART1_UART_Init+0x90>)
 8001312:	f007 fb8f 	bl	8008a34 <HAL_UART_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800131c:	f000 f8b2 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_USART1_UART_Init+0x90>)
 8001324:	f008 fa29 	bl	800977a <HAL_UARTEx_SetTxFifoThreshold>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800132e:	f000 f8a9 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <MX_USART1_UART_Init+0x90>)
 8001336:	f008 fa5e 	bl	80097f6 <HAL_UARTEx_SetRxFifoThreshold>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001340:	f000 f8a0 	bl	8001484 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_USART1_UART_Init+0x90>)
 8001346:	f008 f9df 	bl	8009708 <HAL_UARTEx_DisableFifoMode>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001350:	f000 f898 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000610 	.word	0x20000610
 800135c:	40013800 	.word	0x40013800

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b40      	ldr	r3, [pc, #256]	; (8001478 <MX_GPIO_Init+0x118>)
 8001378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800137c:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <MX_GPIO_Init+0x118>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001386:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <MX_GPIO_Init+0x118>)
 8001388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <MX_GPIO_Init+0x118>)
 8001396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800139a:	4a37      	ldr	r2, [pc, #220]	; (8001478 <MX_GPIO_Init+0x118>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <MX_GPIO_Init+0x118>)
 80013a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b31      	ldr	r3, [pc, #196]	; (8001478 <MX_GPIO_Init+0x118>)
 80013b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b8:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <MX_GPIO_Init+0x118>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_GPIO_Init+0x118>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM_RESET_Pin|PWDN_Pin|LED_Pin|EN_1V5_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f24e 0108 	movw	r1, #57352	; 0xe008
 80013d6:	4829      	ldr	r0, [pc, #164]	; (800147c <MX_GPIO_Init+0x11c>)
 80013d8:	f002 fd80 	bl	8003edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM__CS_Pin */
  GPIO_InitStruct.Pin = CAM__CS_Pin;
 80013dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e6:	2302      	movs	r3, #2
 80013e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAM__CS_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	4619      	mov	r1, r3
 80013f0:	4822      	ldr	r0, [pc, #136]	; (800147c <MX_GPIO_Init+0x11c>)
 80013f2:	f002 fb9b 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_RESET_Pin LED_Pin */
  GPIO_InitStruct.Pin = CAM_RESET_Pin|LED_Pin;
 80013f6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001400:	2302      	movs	r3, #2
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4619      	mov	r1, r3
 800140e:	481b      	ldr	r0, [pc, #108]	; (800147c <MX_GPIO_Init+0x11c>)
 8001410:	f002 fb8c 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWDN_Pin */
  GPIO_InitStruct.Pin = PWDN_Pin;
 8001414:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141e:	2301      	movs	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	4619      	mov	r1, r3
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_GPIO_Init+0x11c>)
 800142e:	f002 fb7d 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCLK_Pin */
  GPIO_InitStruct.Pin = MCLK_Pin;
 8001432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001436:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCLK_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4619      	mov	r1, r3
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_GPIO_Init+0x120>)
 8001450:	f002 fb6c 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_1V5_Pin */
  GPIO_InitStruct.Pin = EN_1V5_Pin;
 8001454:	2308      	movs	r3, #8
 8001456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_1V5_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <MX_GPIO_Init+0x11c>)
 800146c:	f002 fb5e 	bl	8003b2c <HAL_GPIO_Init>

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	46020c00 	.word	0x46020c00
 800147c:	42020400 	.word	0x42020400
 8001480:	42020000 	.word	0x42020000

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800148c:	e7fe      	b.n	800148c <Error_Handler+0x8>
	...

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_MspInit+0x30>)
 8001498:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <HAL_MspInit+0x30>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_MspInit+0x30>)
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	46020c00 	.word	0x46020c00

080014c4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a5b      	ldr	r2, [pc, #364]	; (8001650 <HAL_DCMI_MspInit+0x18c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	f040 80af 	bne.w	8001646 <HAL_DCMI_MspInit+0x182>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 80014e8:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 80014ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014ee:	4a59      	ldr	r2, [pc, #356]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 80014f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014f8:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 80014fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 8001508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800150c:	4a51      	ldr	r2, [pc, #324]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001516:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 8001518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b4b      	ldr	r3, [pc, #300]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 8001526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800152a:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001534:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 8001536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b44      	ldr	r3, [pc, #272]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 8001544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001548:	4a42      	ldr	r2, [pc, #264]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001552:	4b40      	ldr	r3, [pc, #256]	; (8001654 <HAL_DCMI_MspInit+0x190>)
 8001554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001560:	2310      	movs	r3, #16
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156c:	2302      	movs	r3, #2
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001570:	230a      	movs	r3, #10
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	4837      	ldr	r0, [pc, #220]	; (8001658 <HAL_DCMI_MspInit+0x194>)
 800157c:	f002 fad6 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 8001590:	2304      	movs	r3, #4
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	482f      	ldr	r0, [pc, #188]	; (8001658 <HAL_DCMI_MspInit+0x194>)
 800159c:	f002 fac6 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80015a0:	f44f 53ee 	mov.w	r3, #7616	; 0x1dc0
 80015a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ae:	2302      	movs	r3, #2
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80015b2:	230a      	movs	r3, #10
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	4827      	ldr	r0, [pc, #156]	; (800165c <HAL_DCMI_MspInit+0x198>)
 80015be:	f002 fab5 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 80015d4:	2304      	movs	r3, #4
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	481f      	ldr	r0, [pc, #124]	; (800165c <HAL_DCMI_MspInit+0x198>)
 80015e0:	f002 faa4 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80015e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80015f6:	230a      	movs	r3, #10
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4817      	ldr	r0, [pc, #92]	; (8001660 <HAL_DCMI_MspInit+0x19c>)
 8001602:	f002 fa93 	bl	8003b2c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_DCMI_MspInit+0x1a0>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4a16      	ldr	r2, [pc, #88]	; (8001664 <HAL_DCMI_MspInit+0x1a0>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_DCMI_MspInit+0x1a0>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_DCMI_MspInit+0x1a0>)
 8001618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800161c:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_DCMI_MspInit+0x1a0>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a10      	ldr	r2, [pc, #64]	; (8001664 <HAL_DCMI_MspInit+0x1a0>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_DCMI_MspInit+0x1a0>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_DCMI_MspInit+0x1a0>)
 8001630:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001634:	6053      	str	r3, [r2, #4]

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2077      	movs	r0, #119	; 0x77
 800163c:	f000 fbd5 	bl	8001dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8001640:	2077      	movs	r0, #119	; 0x77
 8001642:	f000 fbec 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3730      	adds	r7, #48	; 0x30
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	4202c000 	.word	0x4202c000
 8001654:	46020c00 	.word	0x46020c00
 8001658:	42020000 	.word	0x42020000
 800165c:	42020800 	.word	0x42020800
 8001660:	42020400 	.word	0x42020400
 8001664:	46000400 	.word	0x46000400

08001668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0bc      	sub	sp, #240	; 0xf0
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	22c8      	movs	r2, #200	; 0xc8
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f008 feae 	bl	800a3ea <memset>
  if(hi2c->Instance==I2C3)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_I2C_MspInit+0xc4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d145      	bne.n	8001724 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 fd76 	bl	80061a0 <HAL_RCCEx_PeriphCLKConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80016ba:	f7ff fee3 	bl	8001484 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_I2C_MspInit+0xc8>)
 80016c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c4:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <HAL_I2C_MspInit+0xc8>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_I2C_MspInit+0xc8>)
 80016d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = SIOC_Pin|SIOD_Pin;
 80016dc:	2303      	movs	r3, #3
 80016de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e2:	2312      	movs	r3, #18
 80016e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016f4:	2304      	movs	r3, #4
 80016f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <HAL_I2C_MspInit+0xcc>)
 8001702:	f002 fa13 	bl	8003b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_I2C_MspInit+0xc8>)
 8001708:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800170c:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_I2C_MspInit+0xc8>)
 800170e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001712:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_I2C_MspInit+0xc8>)
 8001718:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800171c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	37f0      	adds	r7, #240	; 0xf0
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	46002800 	.word	0x46002800
 8001730:	46020c00 	.word	0x46020c00
 8001734:	42020800 	.word	0x42020800

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0bc      	sub	sp, #240	; 0xf0
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	22c8      	movs	r2, #200	; 0xc8
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f008 fe46 	bl	800a3ea <memset>
  if(huart->Instance==USART1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a26      	ldr	r2, [pc, #152]	; (80017fc <HAL_UART_MspInit+0xc4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d145      	bne.n	80017f4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001768:	f04f 0201 	mov.w	r2, #1
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001774:	2300      	movs	r3, #0
 8001776:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fd0f 	bl	80061a0 <HAL_RCCEx_PeriphCLKConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001788:	f7ff fe7c 	bl	8001484 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <HAL_UART_MspInit+0xc8>)
 800178e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001792:	4a1b      	ldr	r2, [pc, #108]	; (8001800 <HAL_UART_MspInit+0xc8>)
 8001794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001798:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_UART_MspInit+0xc8>)
 800179e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_UART_MspInit+0xc8>)
 80017ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017b0:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_UART_MspInit+0xc8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_UART_MspInit+0xc8>)
 80017bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 80017c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e2:	2307      	movs	r3, #7
 80017e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017ec:	4619      	mov	r1, r3
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_UART_MspInit+0xcc>)
 80017f0:	f002 f99c 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017f4:	bf00      	nop
 80017f6:	37f0      	adds	r7, #240	; 0xf0
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40013800 	.word	0x40013800
 8001800:	46020c00 	.word	0x46020c00
 8001804:	42020000 	.word	0x42020000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f986 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <GPDMA1_Channel15_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 15 global interrupt.
  */
void GPDMA1_Channel15_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel15_IRQn 0 */

  /* USER CODE END GPDMA1_Channel15_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel15);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <GPDMA1_Channel15_IRQHandler+0x10>)
 8001862:	f001 f853 	bl	800290c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel15_IRQn 1 */

  /* USER CODE END GPDMA1_Channel15_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000054c 	.word	0x2000054c

08001870 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <DCMI_PSSI_IRQHandler+0x10>)
 8001876:	f000 fdfb 	bl	8002470 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200004fc 	.word	0x200004fc

08001884 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	return 1;
 8001888:	2301      	movs	r3, #1
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_kill>:

int _kill(int pid, int sig)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800189e:	f008 fd6d 	bl	800a37c <__errno>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2216      	movs	r2, #22
 80018a6:	601a      	str	r2, [r3, #0]
	return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_exit>:

void _exit(int status)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ffe7 	bl	8001894 <_kill>
	while (1) {
 80018c6:	e7fe      	b.n	80018c6 <_exit+0x12>

080018c8 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <_read+0x28>
		*ptr++ = __io_getchar();
 80018da:	e000      	b.n	80018de <_read+0x16>
 80018dc:	bf00      	nop
 80018de:	4601      	mov	r1, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbf0      	blt.n	80018da <_read+0x12>
	}

	return len;
 80018f8:	687b      	ldr	r3, [r7, #4]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
	return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_fstat>:

int _fstat(int file, struct stat *st)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800192a:	605a      	str	r2, [r3, #4]
	return 0;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
	return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
	return 0;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
		errno = ENOMEM;
 800199c:	f008 fcee 	bl	800a37c <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200c0000 	.word	0x200c0000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	200006a0 	.word	0x200006a0
 80019d4:	200083d0 	.word	0x200083d0

080019d8 <SystemInit>:
 * @param  None
 * @retval None
 */

void SystemInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <SystemInit+0x68>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <SystemInit+0x68>)
 80019e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set MSION bit */
	RCC->CR = RCC_CR_MSISON;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <SystemInit+0x6c>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR1 = 0U;
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <SystemInit+0x6c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
	RCC->CFGR2 = 0U;
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <SystemInit+0x6c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
	RCC->CFGR3 = 0U;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <SystemInit+0x6c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

	/* Reset HSEON, CSSON , HSION, PLLxON bits */
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <SystemInit+0x6c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <SystemInit+0x6c>)
 8001a0a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a0e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a12:	6013      	str	r3, [r2, #0]
			| RCC_CR_PLL3ON);

	/* Reset PLLCFGR register */
	RCC->PLL1CFGR = 0U;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <SystemInit+0x6c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset HSEBYP bit */
	RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <SystemInit+0x6c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <SystemInit+0x6c>)
 8001a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a24:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0U;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <SystemInit+0x6c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	651a      	str	r2, [r3, #80]	; 0x50

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <SystemInit+0x68>)
 8001a2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a32:	609a      	str	r2, [r3, #8]
#endif
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00
 8001a44:	46020c00 	.word	0x46020c00

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a4e:	e003      	b.n	8001a58 <LoopCopyDataInit>

08001a50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a56:	3104      	adds	r1, #4

08001a58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a58:	480b      	ldr	r0, [pc, #44]	; (8001a88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a60:	d3f6      	bcc.n	8001a50 <CopyDataInit>
	ldr	r2, =_sbss
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a64:	e002      	b.n	8001a6c <LoopFillZerobss>

08001a66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a68:	f842 3b04 	str.w	r3, [r2], #4

08001a6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <LoopForever+0x16>)
	cmp	r2, r3
 8001a6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a70:	d3f9      	bcc.n	8001a66 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a72:	f7ff ffb1 	bl	80019d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a76:	f008 fc87 	bl	800a388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7ff fab3 	bl	8000fe4 <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001a80:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001a84:	0800d64c 	.word	0x0800d64c
	ldr	r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a8c:	20000480 	.word	0x20000480
	ldr	r2, =_sbss
 8001a90:	20000480 	.word	0x20000480
	ldr	r3, = _ebss
 8001a94:	200083d0 	.word	0x200083d0

08001a98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_Init+0x4c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <HAL_Init+0x4c>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f991 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ab2:	f004 f991 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_Init+0x50>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	490b      	ldr	r1, [pc, #44]	; (8001af0 <HAL_Init+0x54>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_Init+0x58>)
 8001aca:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001acc:	200f      	movs	r0, #15
 8001ace:	f000 f813 	bl	8001af8 <HAL_InitTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e002      	b.n	8001ae2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fcd8 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	46020c00 	.word	0x46020c00
 8001af0:	0800d164 	.word	0x0800d164
 8001af4:	20000018 	.word	0x20000018

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_InitTick+0x60>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e021      	b.n	8001b50 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_InitTick+0x64>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_InitTick+0x60>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 f997 	bl	8001e56 <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00e      	b.n	8001b50 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d80a      	bhi.n	8001b4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f000 f953 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b44:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <HAL_InitTick+0x68>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000020 	.word	0x20000020
 8001b5c:	20000018 	.word	0x20000018
 8001b60:	2000001c 	.word	0x2000001c

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000020 	.word	0x20000020
 8001b88:	200006a4 	.word	0x200006a4

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200006a4 	.word	0x200006a4

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000020 	.word	0x20000020

08001bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1e:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <__NVIC_SetPriorityGrouping+0x44>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	60d3      	str	r3, [r2, #12]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <__NVIC_GetPriorityGrouping+0x18>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	f003 0307 	and.w	r3, r3, #7
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	db0b      	blt.n	8001c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	f003 021f 	and.w	r2, r3, #31
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <__NVIC_EnableIRQ+0x38>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	2001      	movs	r0, #1
 8001c72:	fa00 f202 	lsl.w	r2, r0, r2
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db12      	blt.n	8001cc4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	490a      	ldr	r1, [pc, #40]	; (8001cd0 <__NVIC_DisableIRQ+0x44>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	3320      	adds	r3, #32
 8001cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cb8:	f3bf 8f4f 	dsb	sy
}
 8001cbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cbe:	f3bf 8f6f 	isb	sy
}
 8001cc2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff05 	bl	8001bec <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001df8:	f7ff ff1c 	bl	8001c34 <__NVIC_GetPriorityGrouping>
 8001dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f7ff ff90 	bl	8001d28 <NVIC_EncodePriority>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff5f 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff0f 	bl	8001c50 <__NVIC_EnableIRQ>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff1f 	bl	8001c8c <__NVIC_DisableIRQ>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff96 	bl	8001d90 <SysTick_Config>
 8001e64:	4603      	mov	r3, r0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e069      	b.n	8001f56 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d102      	bne.n	8001e94 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fb18 	bl	80014c4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_DCMI_Init+0xf0>)
 8001eb6:	400b      	ands	r3, r1
 8001eb8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ece:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001eda:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001ee6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001ef2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001efe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d112      	bne.n	8001f36 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7f1b      	ldrb	r3, [r3, #28]
 8001f14:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7f5b      	ldrb	r3, [r3, #29]
 8001f1a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f1c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7f9b      	ldrb	r3, [r3, #30]
 8001f22:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001f24:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7fdb      	ldrb	r3, [r3, #31]
 8001f2c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001f32:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f34:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 021e 	orr.w	r2, r2, #30
 8001f44:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	ffe0f007 	.word	0xffe0f007

08001f64 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_DCMI_Start_DMA+0x26>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e189      	b.n	800229e <HAL_DCMI_Start_DMA+0x33a>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2202      	movs	r2, #2
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fa8:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0202 	bic.w	r2, r2, #2
 8001fb8:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	4a99      	ldr	r2, [pc, #612]	; (8002234 <HAL_DCMI_Start_DMA+0x2d0>)
 8001fd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd6:	4a98      	ldr	r2, [pc, #608]	; (8002238 <HAL_DCMI_Start_DMA+0x2d4>)
 8001fd8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	2200      	movs	r2, #0
 8001fe0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002006:	d24c      	bcs.n	80020a2 <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d037      	beq.n	8002086 <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	2b00      	cmp	r3, #0
 800201e:	d023      	beq.n	8002068 <HAL_DCMI_Start_DMA+0x104>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01d      	beq.n	8002068 <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6a3a      	ldr	r2, [r7, #32]
 8002036:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205a:	4618      	mov	r0, r3
 800205c:	f000 ff5a 	bl	8002f14 <HAL_DMAEx_List_Start_IT>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002066:	e0f9      	b.n	800225c <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	; 0x40
 800206c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002084:	e0ea      	b.n	800225c <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3328      	adds	r3, #40	; 0x28
 8002090:	4619      	mov	r1, r3
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	f000 fb34 	bl	8002702 <HAL_DMA_Start_IT>
 800209a:	4603      	mov	r3, r0
 800209c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020a0:	e0dc      	b.n	800225c <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2201      	movs	r2, #1
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a3a      	ldr	r2, [r7, #32]
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80020b4:	e009      	b.n	80020ca <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	085a      	lsrs	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	005a      	lsls	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d2:	d2f0      	bcs.n	80020b6 <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a3 	beq.w	800223c <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 808a 	beq.w	8002216 <HAL_DCMI_Start_DMA+0x2b2>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8083 	beq.w	8002216 <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800211c:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d04b      	beq.n	80021f8 <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002178:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 8002180:	6979      	ldr	r1, [r7, #20]
 8002182:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8002186:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 8002188:	4313      	orrs	r3, r2
 800218a:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80021a6:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80021a8:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 80021aa:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 80021ac:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80021be:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80021c0:	4313      	orrs	r3, r2
 80021c2:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 80021c8:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fea0 	bl	8002f14 <HAL_DMAEx_List_Start_IT>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d03f      	beq.n	800225a <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 80021f6:	e030      	b.n	800225a <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8002214:	e021      	b.n	800225a <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002232:	e013      	b.n	800225c <HAL_DCMI_Start_DMA+0x2f8>
 8002234:	080025bd 	.word	0x080025bd
 8002238:	080026c9 	.word	0x080026c9
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002258:	e000      	b.n	800225c <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800225a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800225c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10c      	bne.n	800227e <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800227c:	e00d      	b.n	800229a <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 800229a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop

080022a8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_DCMI_Stop+0xb8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <HAL_DCMI_Stop+0xbc>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0a5b      	lsrs	r3, r3, #9
 80022bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_DCMI_Stop+0x30>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e03f      	b.n	8002358 <HAL_DCMI_Stop+0xb0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d108      	bne.n	8002316 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	72fb      	strb	r3, [r7, #11]
      break;
 8002314:	e006      	b.n	8002324 <HAL_DCMI_Stop+0x7c>
    }
  } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e9      	bne.n	80022f8 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002332:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fa42 	bl	80027c2 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8002356:	7afb      	ldrb	r3, [r7, #11]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000018 	.word	0x20000018
 8002364:	10624dd3 	.word	0x10624dd3

08002368 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_DCMI_Suspend+0xa8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_DCMI_Suspend+0xac>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0a5b      	lsrs	r3, r3, #9
 800237c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_DCMI_Suspend+0x30>
 8002394:	2302      	movs	r3, #2
 8002396:	e034      	b.n	8002402 <HAL_DCMI_Suspend+0x9a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d125      	bne.n	80023f8 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2205      	movs	r2, #5
 80023b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10c      	bne.n	80023ea <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	f043 0220 	orr.w	r2, r3, #32
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	72fb      	strb	r3, [r7, #11]
        break;
 80023e8:	e006      	b.n	80023f8 <HAL_DCMI_Suspend+0x90>
      }
    } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e5      	bne.n	80023c4 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8002400:	7afb      	ldrb	r3, [r7, #11]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000018 	.word	0x20000018
 8002414:	10624dd3 	.word	0x10624dd3

08002418 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_DCMI_Resume+0x16>
 800242a:	2302      	movs	r3, #2
 800242c:	e01a      	b.n	8002464 <HAL_DCMI_Resume+0x4c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10b      	bne.n	800245a <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0201 	orr.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01e      	beq.n	80024c8 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2204      	movs	r2, #4
 8002490:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2204      	movs	r2, #4
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024aa:	4a39      	ldr	r2, [pc, #228]	; (8002590 <HAL_DCMI_IRQHandler+0x120>)
 80024ac:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fa01 	bl	80028ba <HAL_DMA_Abort_IT>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f900 	bl	80026c8 <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d01e      	beq.n	8002510 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2202      	movs	r2, #2
 80024d8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2204      	movs	r2, #4
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f2:	4a27      	ldr	r2, [pc, #156]	; (8002590 <HAL_DCMI_IRQHandler+0x120>)
 80024f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f9dd 	bl	80028ba <HAL_DMA_Abort_IT>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f8dc 	bl	80026c8 <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2210      	movs	r2, #16
 8002520:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f836 	bl	8002594 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d006      	beq.n	8002540 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2208      	movs	r2, #8
 8002538:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f834 	bl	80025a8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d01d      	beq.n	8002586 <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b02      	cmp	r3, #2
 8002556:	d107      	bne.n	8002568 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 021e 	bic.w	r2, r2, #30
 8002566:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2201      	movs	r2, #1
 800257e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f007 fbfd 	bl	8009d80 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	080026c9 	.word	0x080026c9

08002594 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80025bc:	b480      	push	{r7}
 80025be:	b08b      	sub	sp, #44	; 0x2c
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d061      	beq.n	8002696 <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e8:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80025f2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	0c1b      	lsrs	r3, r3, #16
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	2b01      	cmp	r3, #1
 8002616:	d910      	bls.n	800263a <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	3302      	adds	r3, #2
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	fb03 f202 	mul.w	r2, r3, r2
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	441a      	add	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	1e5a      	subs	r2, r3, #1
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 8002638:	e040      	b.n	80026bc <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	2b01      	cmp	r3, #1
 8002640:	d109      	bne.n	8002656 <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002654:	e032      	b.n	80026bc <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	441a      	add	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
 800267a:	e003      	b.n	8002684 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	60da      	str	r2, [r3, #12]
}
 8002694:	e012      	b.n	80026bc <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d103      	bne.n	80026bc <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80026bc:	bf00      	nop
 80026be:	372c      	adds	r7, #44	; 0x2c
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d009      	beq.n	80026f4 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f007 fb55 	bl	8009da4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e04f      	b.n	80027ba <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Start_IT+0x26>
 8002724:	2302      	movs	r3, #2
 8002726:	e048      	b.n	80027ba <HAL_DMA_Start_IT+0xb8>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d136      	bne.n	80027aa <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fa8b 	bl	8002c6c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8002764:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277c:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002794:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e007      	b.n	80027ba <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2240      	movs	r2, #64	; 0x40
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80027ca:	f7ff f9df 	bl	8001b8c <HAL_GetTick>
 80027ce:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d008      	beq.n	80027f8 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e05c      	b.n	80028b2 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0204 	orr.w	r2, r2, #4
 8002806:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2205      	movs	r2, #5
 800280c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002810:	e020      	b.n	8002854 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002812:	f7ff f9bb 	bl	8001b8c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b05      	cmp	r3, #5
 800281e:	d919      	bls.n	8002854 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f043 0210 	orr.w	r2, r3, #16
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2203      	movs	r2, #3
 8002830:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	2201      	movs	r2, #1
 8002846:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e02e      	b.n	80028b2 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0d7      	beq.n	8002812 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0202 	orr.w	r2, r2, #2
 8002870:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002882:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289c:	2201      	movs	r2, #1
 800289e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e019      	b.n	8002900 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d004      	beq.n	80028e2 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2220      	movs	r2, #32
 80028dc:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e00e      	b.n	8002900 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800291c:	f023 030f 	bic.w	r3, r3, #15
 8002920:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	3b50      	subs	r3, #80	; 0x50
 800292c:	09db      	lsrs	r3, r3, #7
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2201      	movs	r2, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8150 	beq.w	8002be8 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002952:	2b00      	cmp	r3, #0
 8002954:	d011      	beq.n	800297a <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800296c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002984:	2b00      	cmp	r3, #0
 8002986:	d011      	beq.n	80029ac <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800299e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	f043 0202 	orr.w	r2, r3, #2
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d011      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029d0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	f043 0204 	orr.w	r2, r3, #4
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d011      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a02:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f043 0208 	orr.w	r2, r3, #8
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d013      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00c      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a34:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d055      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d04e      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a6a:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d137      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a86:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0202 	orr.w	r2, r2, #2
 8002a96:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002aae:	e003      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	2201      	movs	r2, #1
 8002aca:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8087 	beq.w	8002bec <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
        }

        return;
 8002ae6:	e081      	b.n	8002bec <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2205      	movs	r2, #5
 8002aec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d039      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d032      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d012      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b48:	2201      	movs	r2, #1
 8002b4a:	731a      	strb	r2, [r3, #12]
 8002b4c:	e008      	b.n	8002b60 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b68:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d031      	beq.n	8002bee <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0202 	orr.w	r2, r2, #2
 8002b98:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2203      	movs	r2, #3
 8002bac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002bb0:	e003      	b.n	8002bba <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bca:	2201      	movs	r2, #1
 8002bcc:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
 8002be6:	e002      	b.n	8002bee <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002be8:	bf00      	nop
 8002bea:	e000      	b.n	8002bee <HAL_DMA_IRQHandler+0x2e2>
        return;
 8002bec:	bf00      	nop
    }
  }
}
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e02b      	b.n	8002c60 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c10:	f023 030f 	bic.w	r3, r3, #15
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1e:	3b50      	subs	r3, #80	; 0x50
 8002c20:	09db      	lsrs	r3, r3, #7
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	2201      	movs	r2, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f003 0311 	and.w	r3, r3, #17
 8002c3e:	2b11      	cmp	r3, #17
 8002c40:	d106      	bne.n	8002c50 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e006      	b.n	8002c5e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	401a      	ands	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	b291      	uxth	r1, r2
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002c98:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7fe ff64 	bl	8001b8c <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0dc      	b.n	8002e8a <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6f      	ldr	r2, [pc, #444]	; (8002e94 <HAL_DMAEx_List_Init+0x1dc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	f000 809f 	beq.w	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6d      	ldr	r2, [pc, #436]	; (8002e98 <HAL_DMAEx_List_Init+0x1e0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	f000 8099 	beq.w	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6b      	ldr	r2, [pc, #428]	; (8002e9c <HAL_DMAEx_List_Init+0x1e4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	f000 8093 	beq.w	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a69      	ldr	r2, [pc, #420]	; (8002ea0 <HAL_DMAEx_List_Init+0x1e8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	f000 808d 	beq.w	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a67      	ldr	r2, [pc, #412]	; (8002ea4 <HAL_DMAEx_List_Init+0x1ec>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f000 8087 	beq.w	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a65      	ldr	r2, [pc, #404]	; (8002ea8 <HAL_DMAEx_List_Init+0x1f0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f000 8081 	beq.w	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a63      	ldr	r2, [pc, #396]	; (8002eac <HAL_DMAEx_List_Init+0x1f4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d07b      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a62      	ldr	r2, [pc, #392]	; (8002eb0 <HAL_DMAEx_List_Init+0x1f8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d076      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a60      	ldr	r2, [pc, #384]	; (8002eb4 <HAL_DMAEx_List_Init+0x1fc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d071      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5f      	ldr	r2, [pc, #380]	; (8002eb8 <HAL_DMAEx_List_Init+0x200>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d06c      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5d      	ldr	r2, [pc, #372]	; (8002ebc <HAL_DMAEx_List_Init+0x204>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d067      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5c      	ldr	r2, [pc, #368]	; (8002ec0 <HAL_DMAEx_List_Init+0x208>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d062      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a5a      	ldr	r2, [pc, #360]	; (8002ec4 <HAL_DMAEx_List_Init+0x20c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d05d      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a59      	ldr	r2, [pc, #356]	; (8002ec8 <HAL_DMAEx_List_Init+0x210>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d058      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a57      	ldr	r2, [pc, #348]	; (8002ecc <HAL_DMAEx_List_Init+0x214>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d053      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a56      	ldr	r2, [pc, #344]	; (8002ed0 <HAL_DMAEx_List_Init+0x218>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04e      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a54      	ldr	r2, [pc, #336]	; (8002ed4 <HAL_DMAEx_List_Init+0x21c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d049      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a53      	ldr	r2, [pc, #332]	; (8002ed8 <HAL_DMAEx_List_Init+0x220>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d044      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a51      	ldr	r2, [pc, #324]	; (8002edc <HAL_DMAEx_List_Init+0x224>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d03f      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a50      	ldr	r2, [pc, #320]	; (8002ee0 <HAL_DMAEx_List_Init+0x228>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d03a      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a4e      	ldr	r2, [pc, #312]	; (8002ee4 <HAL_DMAEx_List_Init+0x22c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d035      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4d      	ldr	r2, [pc, #308]	; (8002ee8 <HAL_DMAEx_List_Init+0x230>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d030      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	; (8002eec <HAL_DMAEx_List_Init+0x234>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02b      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a4a      	ldr	r2, [pc, #296]	; (8002ef0 <HAL_DMAEx_List_Init+0x238>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d026      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a48      	ldr	r2, [pc, #288]	; (8002ef4 <HAL_DMAEx_List_Init+0x23c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d021      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a47      	ldr	r2, [pc, #284]	; (8002ef8 <HAL_DMAEx_List_Init+0x240>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d01c      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a45      	ldr	r2, [pc, #276]	; (8002efc <HAL_DMAEx_List_Init+0x244>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d017      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a44      	ldr	r2, [pc, #272]	; (8002f00 <HAL_DMAEx_List_Init+0x248>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d012      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a42      	ldr	r2, [pc, #264]	; (8002f04 <HAL_DMAEx_List_Init+0x24c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a41      	ldr	r2, [pc, #260]	; (8002f08 <HAL_DMAEx_List_Init+0x250>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d008      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a3f      	ldr	r2, [pc, #252]	; (8002f0c <HAL_DMAEx_List_Init+0x254>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d003      	beq.n	8002e1a <HAL_DMAEx_List_Init+0x162>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a3e      	ldr	r2, [pc, #248]	; (8002f10 <HAL_DMAEx_List_Init+0x258>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0206 	orr.w	r2, r2, #6
 8002e3a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002e3c:	e00f      	b.n	8002e5e <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002e3e:	f7fe fea5 	bl	8001b8c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d908      	bls.n	8002e5e <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2210      	movs	r2, #16
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2203      	movs	r2, #3
 8002e56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e015      	b.n	8002e8a <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e8      	bne.n	8002e3e <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fa77 	bl	8003360 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40020050 	.word	0x40020050
 8002e98:	50020050 	.word	0x50020050
 8002e9c:	400200d0 	.word	0x400200d0
 8002ea0:	500200d0 	.word	0x500200d0
 8002ea4:	40020150 	.word	0x40020150
 8002ea8:	50020150 	.word	0x50020150
 8002eac:	400201d0 	.word	0x400201d0
 8002eb0:	500201d0 	.word	0x500201d0
 8002eb4:	40020250 	.word	0x40020250
 8002eb8:	50020250 	.word	0x50020250
 8002ebc:	400202d0 	.word	0x400202d0
 8002ec0:	500202d0 	.word	0x500202d0
 8002ec4:	40020350 	.word	0x40020350
 8002ec8:	50020350 	.word	0x50020350
 8002ecc:	400203d0 	.word	0x400203d0
 8002ed0:	500203d0 	.word	0x500203d0
 8002ed4:	40020450 	.word	0x40020450
 8002ed8:	50020450 	.word	0x50020450
 8002edc:	400204d0 	.word	0x400204d0
 8002ee0:	500204d0 	.word	0x500204d0
 8002ee4:	40020550 	.word	0x40020550
 8002ee8:	50020550 	.word	0x50020550
 8002eec:	400205d0 	.word	0x400205d0
 8002ef0:	500205d0 	.word	0x500205d0
 8002ef4:	40020650 	.word	0x40020650
 8002ef8:	50020650 	.word	0x50020650
 8002efc:	400206d0 	.word	0x400206d0
 8002f00:	500206d0 	.word	0x500206d0
 8002f04:	40020750 	.word	0x40020750
 8002f08:	50020750 	.word	0x50020750
 8002f0c:	400207d0 	.word	0x400207d0
 8002f10:	500207d0 	.word	0x500207d0

08002f14 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_DMAEx_List_Start_IT+0x16>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e082      	b.n	8003034 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f34:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d005      	beq.n	8002f54 <HAL_DMAEx_List_Start_IT+0x40>
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d16a      	bne.n	8003024 <HAL_DMAEx_List_Start_IT+0x110>
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d067      	beq.n	8003024 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d157      	bne.n	8003010 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_DMAEx_List_Start_IT+0x5a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e062      	b.n	8003034 <HAL_DMAEx_List_Start_IT+0x120>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	2202      	movs	r2, #2
 8002f84:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8002fa2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fba:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fd2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f107 010c 	add.w	r1, r7, #12
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fcd3 	bl	800398c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	0c0b      	lsrs	r3, r1, #16
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003004:	4013      	ands	r3, r2
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	430b      	orrs	r3, r1
 800300e:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e007      	b.n	8003034 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_DMAEx_List_BuildNode+0x16>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e004      	b.n	8003060 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8003056:	6839      	ldr	r1, [r7, #0]
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fad9 	bl	8003610 <DMA_List_BuildNode>

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_DMAEx_List_InsertNode_Tail+0x16>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e066      	b.n	8003150 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d104      	bne.n	8003094 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2204      	movs	r2, #4
 800308e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e05d      	b.n	8003150 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2200      	movs	r2, #0
 800309a:	6839      	ldr	r1, [r7, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fc09 	bl	80038b4 <DMA_List_CheckNodesBaseAddresses>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d004      	beq.n	80030b2 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2205      	movs	r2, #5
 80030ac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e04e      	b.n	8003150 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2200      	movs	r2, #0
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fc2a 	bl	8003914 <DMA_List_CheckNodesTypes>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2204      	movs	r2, #4
 80030ca:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e03f      	b.n	8003150 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d103      	bne.n	80030e0 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e02b      	b.n	8003138 <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80030e0:	f107 0220 	add.w	r2, r7, #32
 80030e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e8:	4619      	mov	r1, r3
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	f000 fc4e 	bl	800398c <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	461a      	mov	r2, r3
 80030fa:	2100      	movs	r1, #0
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fc75 	bl	80039ec <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003114:	4013      	ands	r3, r2
 8003116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	4319      	orrs	r1, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003128:	4013      	ands	r3, r2
 800312a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4610      	mov	r0, r2
 8003130:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003132:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003134:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e05c      	b.n	800322c <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d104      	bne.n	8003184 <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e053      	b.n	800322c <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d101      	bne.n	800319a <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	e048      	b.n	800322c <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2204      	movs	r2, #4
 800319e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e043      	b.n	800322c <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d104      	bne.n	80031b6 <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2204      	movs	r2, #4
 80031b0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e03a      	b.n	800322c <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 80031c2:	f107 0220 	add.w	r2, r7, #32
 80031c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ca:	4619      	mov	r1, r3
 80031cc:	6838      	ldr	r0, [r7, #0]
 80031ce:	f000 fbdd 	bl	800398c <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	461a      	mov	r2, r3
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fc04 	bl	80039ec <DMA_List_FindNode>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11c      	bne.n	8003224 <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	461a      	mov	r2, r3
 80031f0:	2100      	movs	r1, #0
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fbfa 	bl	80039ec <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80031fe:	4013      	ands	r3, r2
 8003200:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4610      	mov	r0, r2
 8003206:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8003208:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800320a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e003      	b.n	800322c <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2206      	movs	r2, #6
 8003228:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
}
 800322c:	4618      	mov	r0, r3
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <HAL_DMAEx_List_LinkQ+0x16>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e072      	b.n	8003334 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003254:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d002      	beq.n	8003268 <HAL_DMAEx_List_LinkQ+0x34>
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b05      	cmp	r3, #5
 8003266:	d108      	bne.n	800327a <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2240      	movs	r2, #64	; 0x40
 800326c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e05c      	b.n	8003334 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	7b1b      	ldrb	r3, [r3, #12]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d104      	bne.n	800328e <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e052      	b.n	8003334 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <HAL_DMAEx_List_LinkQ+0x10c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d022      	beq.n	80032de <HAL_DMAEx_List_LinkQ+0xaa>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a29      	ldr	r2, [pc, #164]	; (8003344 <HAL_DMAEx_List_LinkQ+0x110>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01d      	beq.n	80032de <HAL_DMAEx_List_LinkQ+0xaa>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a28      	ldr	r2, [pc, #160]	; (8003348 <HAL_DMAEx_List_LinkQ+0x114>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d018      	beq.n	80032de <HAL_DMAEx_List_LinkQ+0xaa>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <HAL_DMAEx_List_LinkQ+0x118>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_DMAEx_List_LinkQ+0xaa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a25      	ldr	r2, [pc, #148]	; (8003350 <HAL_DMAEx_List_LinkQ+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00e      	beq.n	80032de <HAL_DMAEx_List_LinkQ+0xaa>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a23      	ldr	r2, [pc, #140]	; (8003354 <HAL_DMAEx_List_LinkQ+0x120>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_DMAEx_List_LinkQ+0xaa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a22      	ldr	r2, [pc, #136]	; (8003358 <HAL_DMAEx_List_LinkQ+0x124>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_DMAEx_List_LinkQ+0xaa>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a20      	ldr	r2, [pc, #128]	; (800335c <HAL_DMAEx_List_LinkQ+0x128>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_DMAEx_List_LinkQ+0xae>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_DMAEx_List_LinkQ+0xb0>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2203      	movs	r2, #3
 80032fa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e019      	b.n	8003334 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003304:	2b81      	cmp	r3, #129	; 0x81
 8003306:	d108      	bne.n	800331a <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2204      	movs	r2, #4
 8003314:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e00c      	b.n	8003334 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2204      	movs	r2, #4
 8003326:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e003      	b.n	8003334 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40020650 	.word	0x40020650
 8003344:	50020650 	.word	0x50020650
 8003348:	400206d0 	.word	0x400206d0
 800334c:	500206d0 	.word	0x500206d0
 8003350:	40020750 	.word	0x40020750
 8003354:	50020750 	.word	0x50020750
 8003358:	400207d0 	.word	0x400207d0
 800335c:	500207d0 	.word	0x500207d0

08003360 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a85      	ldr	r2, [pc, #532]	; (8003590 <DMA_List_Init+0x230>)
 800337a:	4293      	cmp	r3, r2
 800337c:	f000 80a0 	beq.w	80034c0 <DMA_List_Init+0x160>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a83      	ldr	r2, [pc, #524]	; (8003594 <DMA_List_Init+0x234>)
 8003386:	4293      	cmp	r3, r2
 8003388:	f000 809a 	beq.w	80034c0 <DMA_List_Init+0x160>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a81      	ldr	r2, [pc, #516]	; (8003598 <DMA_List_Init+0x238>)
 8003392:	4293      	cmp	r3, r2
 8003394:	f000 8094 	beq.w	80034c0 <DMA_List_Init+0x160>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a7f      	ldr	r2, [pc, #508]	; (800359c <DMA_List_Init+0x23c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	f000 808e 	beq.w	80034c0 <DMA_List_Init+0x160>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a7d      	ldr	r2, [pc, #500]	; (80035a0 <DMA_List_Init+0x240>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	f000 8088 	beq.w	80034c0 <DMA_List_Init+0x160>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a7b      	ldr	r2, [pc, #492]	; (80035a4 <DMA_List_Init+0x244>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	f000 8082 	beq.w	80034c0 <DMA_List_Init+0x160>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a79      	ldr	r2, [pc, #484]	; (80035a8 <DMA_List_Init+0x248>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d07c      	beq.n	80034c0 <DMA_List_Init+0x160>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a78      	ldr	r2, [pc, #480]	; (80035ac <DMA_List_Init+0x24c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d077      	beq.n	80034c0 <DMA_List_Init+0x160>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a76      	ldr	r2, [pc, #472]	; (80035b0 <DMA_List_Init+0x250>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d072      	beq.n	80034c0 <DMA_List_Init+0x160>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a75      	ldr	r2, [pc, #468]	; (80035b4 <DMA_List_Init+0x254>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d06d      	beq.n	80034c0 <DMA_List_Init+0x160>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a73      	ldr	r2, [pc, #460]	; (80035b8 <DMA_List_Init+0x258>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d068      	beq.n	80034c0 <DMA_List_Init+0x160>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a72      	ldr	r2, [pc, #456]	; (80035bc <DMA_List_Init+0x25c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d063      	beq.n	80034c0 <DMA_List_Init+0x160>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a70      	ldr	r2, [pc, #448]	; (80035c0 <DMA_List_Init+0x260>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d05e      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6f      	ldr	r2, [pc, #444]	; (80035c4 <DMA_List_Init+0x264>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d059      	beq.n	80034c0 <DMA_List_Init+0x160>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6d      	ldr	r2, [pc, #436]	; (80035c8 <DMA_List_Init+0x268>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d054      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <DMA_List_Init+0x26c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04f      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a6a      	ldr	r2, [pc, #424]	; (80035d0 <DMA_List_Init+0x270>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d04a      	beq.n	80034c0 <DMA_List_Init+0x160>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a69      	ldr	r2, [pc, #420]	; (80035d4 <DMA_List_Init+0x274>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d045      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a67      	ldr	r2, [pc, #412]	; (80035d8 <DMA_List_Init+0x278>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d040      	beq.n	80034c0 <DMA_List_Init+0x160>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a66      	ldr	r2, [pc, #408]	; (80035dc <DMA_List_Init+0x27c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d03b      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a64      	ldr	r2, [pc, #400]	; (80035e0 <DMA_List_Init+0x280>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d036      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <DMA_List_Init+0x284>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d031      	beq.n	80034c0 <DMA_List_Init+0x160>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a61      	ldr	r2, [pc, #388]	; (80035e8 <DMA_List_Init+0x288>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02c      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a60      	ldr	r2, [pc, #384]	; (80035ec <DMA_List_Init+0x28c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d027      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a5e      	ldr	r2, [pc, #376]	; (80035f0 <DMA_List_Init+0x290>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d022      	beq.n	80034c0 <DMA_List_Init+0x160>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a5d      	ldr	r2, [pc, #372]	; (80035f4 <DMA_List_Init+0x294>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d01d      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a5b      	ldr	r2, [pc, #364]	; (80035f8 <DMA_List_Init+0x298>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d018      	beq.n	80034c0 <DMA_List_Init+0x160>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a5a      	ldr	r2, [pc, #360]	; (80035fc <DMA_List_Init+0x29c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <DMA_List_Init+0x160>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a58      	ldr	r2, [pc, #352]	; (8003600 <DMA_List_Init+0x2a0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00e      	beq.n	80034c0 <DMA_List_Init+0x160>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a57      	ldr	r2, [pc, #348]	; (8003604 <DMA_List_Init+0x2a4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d009      	beq.n	80034c0 <DMA_List_Init+0x160>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a55      	ldr	r2, [pc, #340]	; (8003608 <DMA_List_Init+0x2a8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <DMA_List_Init+0x160>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a54      	ldr	r2, [pc, #336]	; (800360c <DMA_List_Init+0x2ac>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <DMA_List_Init+0x164>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <DMA_List_Init+0x166>
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2200      	movs	r2, #0
 8003510:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a36      	ldr	r2, [pc, #216]	; (80035f0 <DMA_List_Init+0x290>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d022      	beq.n	8003562 <DMA_List_Init+0x202>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a34      	ldr	r2, [pc, #208]	; (80035f4 <DMA_List_Init+0x294>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d01d      	beq.n	8003562 <DMA_List_Init+0x202>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a33      	ldr	r2, [pc, #204]	; (80035f8 <DMA_List_Init+0x298>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d018      	beq.n	8003562 <DMA_List_Init+0x202>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a31      	ldr	r2, [pc, #196]	; (80035fc <DMA_List_Init+0x29c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <DMA_List_Init+0x202>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a30      	ldr	r2, [pc, #192]	; (8003600 <DMA_List_Init+0x2a0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00e      	beq.n	8003562 <DMA_List_Init+0x202>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <DMA_List_Init+0x2a4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <DMA_List_Init+0x202>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <DMA_List_Init+0x2a8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <DMA_List_Init+0x202>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <DMA_List_Init+0x2ac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <DMA_List_Init+0x206>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <DMA_List_Init+0x208>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2200      	movs	r2, #0
 8003572:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2200      	movs	r2, #0
 800357a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2200      	movs	r2, #0
 8003582:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40020050 	.word	0x40020050
 8003594:	50020050 	.word	0x50020050
 8003598:	400200d0 	.word	0x400200d0
 800359c:	500200d0 	.word	0x500200d0
 80035a0:	40020150 	.word	0x40020150
 80035a4:	50020150 	.word	0x50020150
 80035a8:	400201d0 	.word	0x400201d0
 80035ac:	500201d0 	.word	0x500201d0
 80035b0:	40020250 	.word	0x40020250
 80035b4:	50020250 	.word	0x50020250
 80035b8:	400202d0 	.word	0x400202d0
 80035bc:	500202d0 	.word	0x500202d0
 80035c0:	40020350 	.word	0x40020350
 80035c4:	50020350 	.word	0x50020350
 80035c8:	400203d0 	.word	0x400203d0
 80035cc:	500203d0 	.word	0x500203d0
 80035d0:	40020450 	.word	0x40020450
 80035d4:	50020450 	.word	0x50020450
 80035d8:	400204d0 	.word	0x400204d0
 80035dc:	500204d0 	.word	0x500204d0
 80035e0:	40020550 	.word	0x40020550
 80035e4:	50020550 	.word	0x50020550
 80035e8:	400205d0 	.word	0x400205d0
 80035ec:	500205d0 	.word	0x500205d0
 80035f0:	40020650 	.word	0x40020650
 80035f4:	50020650 	.word	0x50020650
 80035f8:	400206d0 	.word	0x400206d0
 80035fc:	500206d0 	.word	0x500206d0
 8003600:	40020750 	.word	0x40020750
 8003604:	50020750 	.word	0x50020750
 8003608:	400207d0 	.word	0x400207d0
 800360c:	500207d0 	.word	0x500207d0

08003610 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003622:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8003628:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800362e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003634:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d017      	beq.n	8003676 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	3b01      	subs	r3, #1
 800365a:	051b      	lsls	r3, r3, #20
 800365c:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003660:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	3b01      	subs	r3, #1
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 800366e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003670:	431a      	orrs	r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	f240 237f 	movw	r3, #639	; 0x27f
 8003682:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8003684:	431a      	orrs	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d10c      	bne.n	80036ae <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d011      	beq.n	80036c4 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	e00a      	b.n	80036c4 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b6:	d105      	bne.n	80036c4 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00f      	beq.n	80036ec <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036de:	041b      	lsls	r3, r3, #16
 80036e0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80036e4:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80036e6:	431a      	orrs	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d04e      	beq.n	80037a0 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	3b01      	subs	r3, #1
 800370c:	0419      	lsls	r1, r3, #16
 800370e:	4b67      	ldr	r3, [pc, #412]	; (80038ac <DMA_List_BuildNode+0x29c>)
 8003710:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003712:	431a      	orrs	r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	2b00      	cmp	r3, #0
 800371e:	da06      	bge.n	800372e <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e005      	b.n	800373a <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	2b00      	cmp	r3, #0
 8003740:	da06      	bge.n	8003750 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	e005      	b.n	800375c <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003760:	2b00      	cmp	r3, #0
 8003762:	da06      	bge.n	8003772 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	e005      	b.n	800377e <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	2b00      	cmp	r3, #0
 8003784:	da06      	bge.n	8003794 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	e005      	b.n	80037a0 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d059      	beq.n	8003870 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da09      	bge.n	80037d8 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	425b      	negs	r3, r3
 80037ca:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	615a      	str	r2, [r3, #20]
 80037d6:	e005      	b.n	80037e4 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037dc:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	da0d      	bge.n	8003808 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f0:	425b      	negs	r3, r3
 80037f2:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	0419      	lsls	r1, r3, #16
 80037fc:	4b2c      	ldr	r3, [pc, #176]	; (80038b0 <DMA_List_BuildNode+0x2a0>)
 80037fe:	400b      	ands	r3, r1
 8003800:	431a      	orrs	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	615a      	str	r2, [r3, #20]
 8003806:	e009      	b.n	800381c <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	0419      	lsls	r1, r3, #16
 8003812:	4b27      	ldr	r3, [pc, #156]	; (80038b0 <DMA_List_BuildNode+0x2a0>)
 8003814:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8003816:	431a      	orrs	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	2b00      	cmp	r3, #0
 8003822:	da08      	bge.n	8003836 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003828:	425b      	negs	r3, r3
 800382a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	b29a      	uxth	r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	619a      	str	r2, [r3, #24]
 8003834:	e004      	b.n	8003840 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003844:	2b00      	cmp	r3, #0
 8003846:	da0b      	bge.n	8003860 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	425b      	negs	r3, r3
 800384e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003858:	431a      	orrs	r2, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	e007      	b.n	8003870 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800386a:	431a      	orrs	r2, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d006      	beq.n	8003892 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8003890:	e005      	b.n	800389e <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	07ff0000 	.word	0x07ff0000
 80038b0:	1fff0000 	.word	0x1fff0000

080038b4 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	0c1b      	lsrs	r3, r3, #16
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e00a      	b.n	80038f6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e004      	b.n	80038f6 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	041b      	lsls	r3, r3, #16
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d001      	beq.n	8003906 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e00e      	b.n	8003952 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e006      	b.n	8003952 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003964:	2302      	movs	r3, #2
 8003966:	e00b      	b.n	8003980 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800397a:	2303      	movs	r3, #3
 800397c:	e000      	b.n	8003980 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	371c      	adds	r7, #28
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00c      	beq.n	80039be <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <DMA_List_GetCLLRNodeInfo+0x58>)
 80039ae:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00f      	beq.n	80039d6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2207      	movs	r2, #7
 80039ba:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80039bc:	e00b      	b.n	80039d6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 80039c8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2205      	movs	r2, #5
 80039d4:	601a      	str	r2, [r3, #0]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	fe010000 	.word	0xfe010000
 80039e8:	f8010000 	.word	0xf8010000

080039ec <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d142      	bne.n	8003a96 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003a10:	e01d      	b.n	8003a4e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e00f      	b.n	8003a48 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4413      	add	r3, r2
 8003a38:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003a40:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3dc      	bcc.n	8003a12 <DMA_List_FindNode+0x26>
 8003a58:	e029      	b.n	8003aae <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d107      	bne.n	8003a70 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	e00f      	b.n	8003a90 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4413      	add	r3, r2
 8003a80:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003a88:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d206      	bcs.n	8003aae <DMA_List_FindNode+0xc2>
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d1d5      	bne.n	8003a5a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003aba:	4013      	ands	r3, r2
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e02b      	b.n	8003b1e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	041b      	lsls	r3, r3, #16
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	461a      	mov	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	461a      	mov	r2, r3
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8003b0c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b3e:	e1ba      	b.n	8003eb6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2101      	movs	r1, #1
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 81aa 	beq.w	8003eb0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a55      	ldr	r2, [pc, #340]	; (8003cb4 <HAL_GPIO_Init+0x188>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d15d      	bne.n	8003c20 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0201 	and.w	r2, r3, #1
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003b94:	4a48      	ldr	r2, [pc, #288]	; (8003cb8 <HAL_GPIO_Init+0x18c>)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b9c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003b9e:	4a46      	ldr	r2, [pc, #280]	; (8003cb8 <HAL_GPIO_Init+0x18c>)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	08da      	lsrs	r2, r3, #3
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	3208      	adds	r2, #8
 8003bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220b      	movs	r2, #11
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	08da      	lsrs	r2, r3, #3
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	3208      	adds	r2, #8
 8003bea:	69f9      	ldr	r1, [r7, #28]
 8003bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e067      	b.n	8003cf0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x104>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b12      	cmp	r3, #18
 8003c2e:	d145      	bne.n	8003cbc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	220f      	movs	r2, #15
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f003 020f 	and.w	r2, r3, #15
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	69f9      	ldr	r1, [r7, #28]
 8003c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	2203      	movs	r2, #3
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 0203 	and.w	r2, r3, #3
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e01e      	b.n	8003cf0 <HAL_GPIO_Init+0x1c4>
 8003cb2:	bf00      	nop
 8003cb4:	46020000 	.word	0x46020000
 8003cb8:	0800d1bc 	.word	0x0800d1bc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0203 	and.w	r2, r3, #3
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d00b      	beq.n	8003d10 <HAL_GPIO_Init+0x1e4>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d007      	beq.n	8003d10 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d04:	2b11      	cmp	r3, #17
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b12      	cmp	r3, #18
 8003d0e:	d130      	bne.n	8003d72 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	69fa      	ldr	r2, [r7, #28]
 8003d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003d46:	2201      	movs	r2, #1
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	f003 0201 	and.w	r2, r3, #1
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d017      	beq.n	8003daa <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d07c      	beq.n	8003eb0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003db6:	4a47      	ldr	r2, [pc, #284]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3318      	adds	r3, #24
 8003dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	220f      	movs	r2, #15
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0a9a      	lsrs	r2, r3, #10
 8003dde:	4b3e      	ldr	r3, [pc, #248]	; (8003ed8 <HAL_GPIO_Init+0x3ac>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	f002 0203 	and.w	r2, r2, #3
 8003de8:	00d2      	lsls	r2, r2, #3
 8003dea:	4093      	lsls	r3, r2
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003df2:	4938      	ldr	r1, [pc, #224]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	089b      	lsrs	r3, r3, #2
 8003df8:	3318      	adds	r3, #24
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003e00:	4b34      	ldr	r3, [pc, #208]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003e24:	4a2b      	ldr	r2, [pc, #172]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003e2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003e4e:	4a21      	ldr	r2, [pc, #132]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003e54:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003e7a:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003e82:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e88:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <HAL_GPIO_Init+0x3a8>)
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f47f ae3d 	bne.w	8003b40 <HAL_GPIO_Init+0x14>
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	bf00      	nop
 8003eca:	3724      	adds	r7, #36	; 0x24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	46022000 	.word	0x46022000
 8003ed8:	002f7f7f 	.word	0x002f7f7f

08003edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	807b      	strh	r3, [r7, #2]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eec:	787b      	ldrb	r3, [r7, #1]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ef2:	887a      	ldrh	r2, [r7, #2]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	041a      	lsls	r2, r3, #16
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	43d9      	mvns	r1, r3
 8003f2a:	887b      	ldrh	r3, [r7, #2]
 8003f2c:	400b      	ands	r3, r1
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	619a      	str	r2, [r3, #24]
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e081      	b.n	8004056 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd fb7e 	bl	8001668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2224      	movs	r2, #36	; 0x24
 8003f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0201 	bic.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	e006      	b.n	8003fc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d104      	bne.n	8003fda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ffc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1a      	ldr	r2, [r3, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	460b      	mov	r3, r1
 800406e:	817b      	strh	r3, [r7, #10]
 8004070:	4613      	mov	r3, r2
 8004072:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b20      	cmp	r3, #32
 800407e:	f040 80da 	bne.w	8004236 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_I2C_Master_Transmit+0x30>
 800408c:	2302      	movs	r3, #2
 800408e:	e0d3      	b.n	8004238 <HAL_I2C_Master_Transmit+0x1d8>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004098:	f7fd fd78 	bl	8001b8c <HAL_GetTick>
 800409c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2319      	movs	r3, #25
 80040a4:	2201      	movs	r2, #1
 80040a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f9e6 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0be      	b.n	8004238 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2210      	movs	r2, #16
 80040c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	893a      	ldrh	r2, [r7, #8]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2bff      	cmp	r3, #255	; 0xff
 80040ea:	d90e      	bls.n	800410a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	22ff      	movs	r2, #255	; 0xff
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	8979      	ldrh	r1, [r7, #10]
 80040fa:	4b51      	ldr	r3, [pc, #324]	; (8004240 <HAL_I2C_Master_Transmit+0x1e0>)
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fbdc 	bl	80048c0 <I2C_TransferConfig>
 8004108:	e06c      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	b2da      	uxtb	r2, r3
 800411a:	8979      	ldrh	r1, [r7, #10]
 800411c:	4b48      	ldr	r3, [pc, #288]	; (8004240 <HAL_I2C_Master_Transmit+0x1e0>)
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 fbcb 	bl	80048c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800412a:	e05b      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	6a39      	ldr	r1, [r7, #32]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f9e3 	bl	80044fc <I2C_WaitOnTXISFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e07b      	b.n	8004238 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	781a      	ldrb	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d034      	beq.n	80041e4 <HAL_I2C_Master_Transmit+0x184>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d130      	bne.n	80041e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	2200      	movs	r2, #0
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f975 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e04d      	b.n	8004238 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2bff      	cmp	r3, #255	; 0xff
 80041a4:	d90e      	bls.n	80041c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	22ff      	movs	r2, #255	; 0xff
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	8979      	ldrh	r1, [r7, #10]
 80041b4:	2300      	movs	r3, #0
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fb7f 	bl	80048c0 <I2C_TransferConfig>
 80041c2:	e00f      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	8979      	ldrh	r1, [r7, #10]
 80041d6:	2300      	movs	r3, #0
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fb6e 	bl	80048c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d19e      	bne.n	800412c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	6a39      	ldr	r1, [r7, #32]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f9c2 	bl	800457c <I2C_WaitOnSTOPFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e01a      	b.n	8004238 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2220      	movs	r2, #32
 8004208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_I2C_Master_Transmit+0x1e4>)
 8004216:	400b      	ands	r3, r1
 8004218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	80002000 	.word	0x80002000
 8004244:	fe00e800 	.word	0xfe00e800

08004248 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	461a      	mov	r2, r3
 8004254:	460b      	mov	r3, r1
 8004256:	817b      	strh	r3, [r7, #10]
 8004258:	4613      	mov	r3, r2
 800425a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	f040 80db 	bne.w	8004420 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_I2C_Master_Receive+0x30>
 8004274:	2302      	movs	r3, #2
 8004276:	e0d4      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004280:	f7fd fc84 	bl	8001b8c <HAL_GetTick>
 8004284:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2319      	movs	r3, #25
 800428c:	2201      	movs	r2, #1
 800428e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8f2 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0bf      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2222      	movs	r2, #34	; 0x22
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2210      	movs	r2, #16
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	893a      	ldrh	r2, [r7, #8]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2bff      	cmp	r3, #255	; 0xff
 80042d2:	d90e      	bls.n	80042f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	22ff      	movs	r2, #255	; 0xff
 80042d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	8979      	ldrh	r1, [r7, #10]
 80042e2:	4b52      	ldr	r3, [pc, #328]	; (800442c <HAL_I2C_Master_Receive+0x1e4>)
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fae8 	bl	80048c0 <I2C_TransferConfig>
 80042f0:	e06d      	b.n	80043ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	b2da      	uxtb	r2, r3
 8004302:	8979      	ldrh	r1, [r7, #10]
 8004304:	4b49      	ldr	r3, [pc, #292]	; (800442c <HAL_I2C_Master_Receive+0x1e4>)
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fad7 	bl	80048c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004312:	e05c      	b.n	80043ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6a39      	ldr	r1, [r7, #32]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f96b 	bl	80045f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e07c      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d034      	beq.n	80043ce <HAL_I2C_Master_Receive+0x186>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d130      	bne.n	80043ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2200      	movs	r2, #0
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f880 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e04d      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2bff      	cmp	r3, #255	; 0xff
 800438e:	d90e      	bls.n	80043ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	22ff      	movs	r2, #255	; 0xff
 8004394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	b2da      	uxtb	r2, r3
 800439c:	8979      	ldrh	r1, [r7, #10]
 800439e:	2300      	movs	r3, #0
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa8a 	bl	80048c0 <I2C_TransferConfig>
 80043ac:	e00f      	b.n	80043ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	2300      	movs	r3, #0
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fa79 	bl	80048c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d19d      	bne.n	8004314 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	6a39      	ldr	r1, [r7, #32]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f8cd 	bl	800457c <I2C_WaitOnSTOPFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e01a      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2220      	movs	r2, #32
 80043f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_I2C_Master_Receive+0x1e8>)
 8004400:	400b      	ands	r3, r1
 8004402:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	80002400 	.word	0x80002400
 8004430:	fe00e800 	.word	0xfe00e800

08004434 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d103      	bne.n	8004452 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d007      	beq.n	8004470 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	619a      	str	r2, [r3, #24]
  }
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	e022      	b.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d01e      	beq.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fd fb79 	bl	8001b8c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d113      	bne.n	80044d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b0:	f043 0220 	orr.w	r2, r3, #32
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e00f      	b.n	80044f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d0cd      	beq.n	800448e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004508:	e02c      	b.n	8004564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 f8ea 	bl	80046e8 <I2C_IsErrorOccurred>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e02a      	b.n	8004574 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d01e      	beq.n	8004564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fd fb31 	bl	8001b8c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d113      	bne.n	8004564 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	f043 0220 	orr.w	r2, r3, #32
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e007      	b.n	8004574 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b02      	cmp	r3, #2
 8004570:	d1cb      	bne.n	800450a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004588:	e028      	b.n	80045dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f8aa 	bl	80046e8 <I2C_IsErrorOccurred>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e026      	b.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fd faf5 	bl	8001b8c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d113      	bne.n	80045dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	f043 0220 	orr.w	r2, r3, #32
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e007      	b.n	80045ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d1cf      	bne.n	800458a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004600:	e064      	b.n	80046cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f86e 	bl	80046e8 <I2C_IsErrorOccurred>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e062      	b.n	80046dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d138      	bne.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b04      	cmp	r3, #4
 8004630:	d105      	bne.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e04e      	b.n	80046dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b10      	cmp	r3, #16
 800464a:	d107      	bne.n	800465c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2210      	movs	r2, #16
 8004652:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2204      	movs	r2, #4
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
 800465a:	e002      	b.n	8004662 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2220      	movs	r2, #32
 8004668:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004676:	400b      	ands	r3, r1
 8004678:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e022      	b.n	80046dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fd fa79 	bl	8001b8c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10f      	bne.n	80046cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e007      	b.n	80046dc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d193      	bne.n	8004602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	fe00e800 	.word	0xfe00e800

080046e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b00      	cmp	r3, #0
 8004712:	d075      	beq.n	8004800 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2210      	movs	r2, #16
 800471a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800471c:	e056      	b.n	80047cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d052      	beq.n	80047cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004726:	f7fd fa31 	bl	8001b8c <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <I2C_IsErrorOccurred+0x54>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d147      	bne.n	80047cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004746:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800474e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800475a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800475e:	d12e      	bne.n	80047be <I2C_IsErrorOccurred+0xd6>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004766:	d02a      	beq.n	80047be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d027      	beq.n	80047be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800477e:	f7fd fa05 	bl	8001b8c <HAL_GetTick>
 8004782:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004784:	e01b      	b.n	80047be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004786:	f7fd fa01 	bl	8001b8c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b19      	cmp	r3, #25
 8004792:	d914      	bls.n	80047be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004798:	f043 0220 	orr.w	r2, r3, #32
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d1dc      	bne.n	8004786 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d003      	beq.n	80047e2 <I2C_IsErrorOccurred+0xfa>
 80047da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d09d      	beq.n	800471e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2220      	movs	r2, #32
 80047f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004822:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f043 0308 	orr.w	r3, r3, #8
 800483a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f043 0302 	orr.w	r3, r3, #2
 800485c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004866:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800486e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01c      	beq.n	80048b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff fddc 	bl	8004434 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <I2C_IsErrorOccurred+0x1d4>)
 8004888:	400b      	ands	r3, r1
 800488a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	431a      	orrs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80048b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3728      	adds	r7, #40	; 0x28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	fe00e800 	.word	0xfe00e800

080048c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	817b      	strh	r3, [r7, #10]
 80048ce:	4613      	mov	r3, r2
 80048d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048d2:	897b      	ldrh	r3, [r7, #10]
 80048d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048d8:	7a7b      	ldrb	r3, [r7, #9]
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	0d5b      	lsrs	r3, r3, #21
 80048fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <I2C_TransferConfig+0x60>)
 8004900:	430b      	orrs	r3, r1
 8004902:	43db      	mvns	r3, r3
 8004904:	ea02 0103 	and.w	r1, r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	03ff63ff 	.word	0x03ff63ff

08004924 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b20      	cmp	r3, #32
 8004938:	d138      	bne.n	80049ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004944:	2302      	movs	r3, #2
 8004946:	e032      	b.n	80049ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2224      	movs	r2, #36	; 0x24
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6819      	ldr	r1, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d139      	bne.n	8004a44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049da:	2302      	movs	r3, #2
 80049dc:	e033      	b.n	8004a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2224      	movs	r2, #36	; 0x24
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	e000      	b.n	8004a46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
  }
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
 8004a70:	e007      	b.n	8004a82 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 0204 	bic.w	r2, r3, #4
 8004a7a:	4905      	ldr	r1, [pc, #20]	; (8004a90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40030400 	.word	0x40030400

08004a94 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_ICACHE_Enable+0x1c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_ICACHE_Enable+0x1c>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40030400 	.word	0x40030400

08004ab4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004abc:	4b34      	ldr	r3, [pc, #208]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d101      	bne.n	8004ad2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	e057      	b.n	8004b82 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d90a      	bls.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004ada:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	4a2a      	ldr	r2, [pc, #168]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aec:	60d3      	str	r3, [r2, #12]
 8004aee:	e007      	b.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004af8:	4925      	ldr	r1, [pc, #148]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b00:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a24      	ldr	r2, [pc, #144]	; (8004b98 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	2232      	movs	r2, #50	; 0x32
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	4a21      	ldr	r2, [pc, #132]	; (8004b98 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b1e:	e002      	b.n	8004b26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x84>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f3      	bne.n	8004b20 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01b      	beq.n	8004b76 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b3e:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	099b      	lsrs	r3, r3, #6
 8004b4a:	2232      	movs	r2, #50	; 0x32
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	3301      	adds	r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b5c:	e002      	b.n	8004b64 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f3      	bne.n	8004b5e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e000      	b.n	8004b82 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	46020800 	.word	0x46020800
 8004b94:	20000018 	.word	0x20000018
 8004b98:	10624dd3 	.word	0x10624dd3

08004b9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	46020800 	.word	0x46020800

08004bb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a04      	ldr	r2, [pc, #16]	; (8004bd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004bc8:	bf00      	nop
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	46020800 	.word	0x46020800

08004bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08e      	sub	sp, #56	; 0x38
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004be0:	2300      	movs	r3, #0
 8004be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f000 bec3 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf2:	4b9c      	ldr	r3, [pc, #624]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bfc:	4b99      	ldr	r3, [pc, #612]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8172 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_RCC_OscConfig+0x52>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	f040 80e4 	bne.w	8004dea <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f040 80e0 	bne.w	8004dea <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c2a:	4b8e      	ldr	r3, [pc, #568]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <HAL_RCC_OscConfig+0x6c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f000 be9a 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c48:	4b86      	ldr	r3, [pc, #536]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <HAL_RCC_OscConfig+0x86>
 8004c54:	4b83      	ldr	r3, [pc, #524]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c5c:	e005      	b.n	8004c6a <HAL_RCC_OscConfig+0x92>
 8004c5e:	4b81      	ldr	r3, [pc, #516]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d255      	bcs.n	8004d1a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 fa0b 	bl	8006094 <RCC_SetFlashLatencyFromMSIRange>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f000 be77 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004c8a:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	4a75      	ldr	r2, [pc, #468]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c94:	6093      	str	r3, [r2, #8]
 8004c96:	4b73      	ldr	r3, [pc, #460]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	4970      	ldr	r1, [pc, #448]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004cb0:	d309      	bcc.n	8004cc6 <HAL_RCC_OscConfig+0xee>
 8004cb2:	4b6c      	ldr	r3, [pc, #432]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 021f 	bic.w	r2, r3, #31
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	4969      	ldr	r1, [pc, #420]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60cb      	str	r3, [r1, #12]
 8004cc4:	e07e      	b.n	8004dc4 <HAL_RCC_OscConfig+0x1ec>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da0a      	bge.n	8004ce4 <HAL_RCC_OscConfig+0x10c>
 8004cce:	4b65      	ldr	r3, [pc, #404]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	015b      	lsls	r3, r3, #5
 8004cdc:	4961      	ldr	r1, [pc, #388]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60cb      	str	r3, [r1, #12]
 8004ce2:	e06f      	b.n	8004dc4 <HAL_RCC_OscConfig+0x1ec>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d30a      	bcc.n	8004d04 <HAL_RCC_OscConfig+0x12c>
 8004cee:	4b5d      	ldr	r3, [pc, #372]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	029b      	lsls	r3, r3, #10
 8004cfc:	4959      	ldr	r1, [pc, #356]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60cb      	str	r3, [r1, #12]
 8004d02:	e05f      	b.n	8004dc4 <HAL_RCC_OscConfig+0x1ec>
 8004d04:	4b57      	ldr	r3, [pc, #348]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	03db      	lsls	r3, r3, #15
 8004d12:	4954      	ldr	r1, [pc, #336]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60cb      	str	r3, [r1, #12]
 8004d18:	e054      	b.n	8004dc4 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d1a:	4b52      	ldr	r3, [pc, #328]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4a51      	ldr	r2, [pc, #324]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d24:	6093      	str	r3, [r2, #8]
 8004d26:	4b4f      	ldr	r3, [pc, #316]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	494c      	ldr	r1, [pc, #304]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004d40:	d309      	bcc.n	8004d56 <HAL_RCC_OscConfig+0x17e>
 8004d42:	4b48      	ldr	r3, [pc, #288]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f023 021f 	bic.w	r2, r3, #31
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	4945      	ldr	r1, [pc, #276]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60cb      	str	r3, [r1, #12]
 8004d54:	e028      	b.n	8004da8 <HAL_RCC_OscConfig+0x1d0>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da0a      	bge.n	8004d74 <HAL_RCC_OscConfig+0x19c>
 8004d5e:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	015b      	lsls	r3, r3, #5
 8004d6c:	493d      	ldr	r1, [pc, #244]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60cb      	str	r3, [r1, #12]
 8004d72:	e019      	b.n	8004da8 <HAL_RCC_OscConfig+0x1d0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7c:	d30a      	bcc.n	8004d94 <HAL_RCC_OscConfig+0x1bc>
 8004d7e:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	029b      	lsls	r3, r3, #10
 8004d8c:	4935      	ldr	r1, [pc, #212]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60cb      	str	r3, [r1, #12]
 8004d92:	e009      	b.n	8004da8 <HAL_RCC_OscConfig+0x1d0>
 8004d94:	4b33      	ldr	r3, [pc, #204]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	03db      	lsls	r3, r3, #15
 8004da2:	4930      	ldr	r1, [pc, #192]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 f96e 	bl	8006094 <RCC_SetFlashLatencyFromMSIRange>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f000 bdda 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004dc4:	f001 f910 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004dc8:	4b27      	ldr	r3, [pc, #156]	; (8004e68 <HAL_RCC_OscConfig+0x290>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fc fe93 	bl	8001af8 <HAL_InitTick>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 808a 	beq.w	8004ef6 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de6:	f000 bdc7 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d066      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004df2:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1b      	ldr	r2, [pc, #108]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004dfe:	f7fc fec5 	bl	8001b8c <HAL_GetTick>
 8004e02:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004e04:	e009      	b.n	8004e1a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e06:	f7fc fec1 	bl	8001b8c <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d902      	bls.n	8004e1a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	f000 bdaf 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0ef      	beq.n	8004e06 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4a0e      	ldr	r2, [pc, #56]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	4909      	ldr	r1, [pc, #36]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004e4c:	d30e      	bcc.n	8004e6c <HAL_RCC_OscConfig+0x294>
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f023 021f 	bic.w	r2, r3, #31
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	4902      	ldr	r1, [pc, #8]	; (8004e64 <HAL_RCC_OscConfig+0x28c>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60cb      	str	r3, [r1, #12]
 8004e60:	e04a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x320>
 8004e62:	bf00      	nop
 8004e64:	46020c00 	.word	0x46020c00
 8004e68:	2000001c 	.word	0x2000001c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da0a      	bge.n	8004e8a <HAL_RCC_OscConfig+0x2b2>
 8004e74:	4b9b      	ldr	r3, [pc, #620]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	015b      	lsls	r3, r3, #5
 8004e82:	4998      	ldr	r1, [pc, #608]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60cb      	str	r3, [r1, #12]
 8004e88:	e036      	b.n	8004ef8 <HAL_RCC_OscConfig+0x320>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e92:	d30a      	bcc.n	8004eaa <HAL_RCC_OscConfig+0x2d2>
 8004e94:	4b93      	ldr	r3, [pc, #588]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	029b      	lsls	r3, r3, #10
 8004ea2:	4990      	ldr	r1, [pc, #576]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60cb      	str	r3, [r1, #12]
 8004ea8:	e026      	b.n	8004ef8 <HAL_RCC_OscConfig+0x320>
 8004eaa:	4b8e      	ldr	r3, [pc, #568]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	03db      	lsls	r3, r3, #15
 8004eb8:	498a      	ldr	r1, [pc, #552]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60cb      	str	r3, [r1, #12]
 8004ebe:	e01b      	b.n	8004ef8 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004ec0:	4b88      	ldr	r3, [pc, #544]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a87      	ldr	r2, [pc, #540]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ecc:	f7fc fe5e 	bl	8001b8c <HAL_GetTick>
 8004ed0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004ed2:	e009      	b.n	8004ee8 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ed4:	f7fc fe5a 	bl	8001b8c <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d902      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	f000 bd48 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004ee8:	4b7e      	ldr	r3, [pc, #504]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ef      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x2fc>
 8004ef4:	e000      	b.n	8004ef8 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ef6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8094 	beq.w	800502e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_OscConfig+0x340>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	d110      	bne.n	8004f34 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d10d      	bne.n	8004f34 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	4b72      	ldr	r3, [pc, #456]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8083 	beq.w	800502c <HAL_RCC_OscConfig+0x454>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d17e      	bne.n	800502c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f000 bd22 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d106      	bne.n	8004f4c <HAL_RCC_OscConfig+0x374>
 8004f3e:	4b69      	ldr	r3, [pc, #420]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a68      	ldr	r2, [pc, #416]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e041      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3f8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f54:	d112      	bne.n	8004f7c <HAL_RCC_OscConfig+0x3a4>
 8004f56:	4b63      	ldr	r3, [pc, #396]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a62      	ldr	r2, [pc, #392]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b60      	ldr	r3, [pc, #384]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a5f      	ldr	r2, [pc, #380]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b5d      	ldr	r3, [pc, #372]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a5c      	ldr	r2, [pc, #368]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	e029      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3f8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004f84:	d112      	bne.n	8004fac <HAL_RCC_OscConfig+0x3d4>
 8004f86:	4b57      	ldr	r3, [pc, #348]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a56      	ldr	r2, [pc, #344]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	4b54      	ldr	r3, [pc, #336]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a53      	ldr	r2, [pc, #332]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4b51      	ldr	r3, [pc, #324]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a50      	ldr	r2, [pc, #320]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e011      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3f8>
 8004fac:	4b4d      	ldr	r3, [pc, #308]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a4c      	ldr	r2, [pc, #304]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	4b4a      	ldr	r3, [pc, #296]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a49      	ldr	r2, [pc, #292]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b47      	ldr	r3, [pc, #284]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a46      	ldr	r2, [pc, #280]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004fca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d014      	beq.n	8005002 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004fd8:	f7fc fdd8 	bl	8001b8c <HAL_GetTick>
 8004fdc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fde:	e009      	b.n	8004ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fc fdd4 	bl	8001b8c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d902      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	f000 bcc2 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0ef      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x408>
 8005000:	e015      	b.n	800502e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005002:	f7fc fdc3 	bl	8001b8c <HAL_GetTick>
 8005006:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005008:	e009      	b.n	800501e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800500a:	f7fc fdbf 	bl	8001b8c <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b64      	cmp	r3, #100	; 0x64
 8005016:	d902      	bls.n	800501e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	f000 bcad 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800501e:	4b31      	ldr	r3, [pc, #196]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1ef      	bne.n	800500a <HAL_RCC_OscConfig+0x432>
 800502a:	e000      	b.n	800502e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d066      	beq.n	8005108 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	2b04      	cmp	r3, #4
 800503e:	d005      	beq.n	800504c <HAL_RCC_OscConfig+0x474>
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	2b0c      	cmp	r3, #12
 8005044:	d11a      	bne.n	800507c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	2b02      	cmp	r3, #2
 800504a:	d117      	bne.n	800507c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800504c:	4b25      	ldr	r3, [pc, #148]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d006      	beq.n	8005066 <HAL_RCC_OscConfig+0x48e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	f000 bc89 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005066:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	041b      	lsls	r3, r3, #16
 8005074:	491b      	ldr	r1, [pc, #108]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800507a:	e045      	b.n	8005108 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d024      	beq.n	80050ce <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005084:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 800508a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800508e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005090:	f7fc fd7c 	bl	8001b8c <HAL_GetTick>
 8005094:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005096:	e009      	b.n	80050ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005098:	f7fc fd78 	bl	8001b8c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d902      	bls.n	80050ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	f000 bc66 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050ac:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0ef      	beq.n	8005098 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	041b      	lsls	r3, r3, #16
 80050c6:	4907      	ldr	r1, [pc, #28]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	610b      	str	r3, [r1, #16]
 80050cc:	e01c      	b.n	8005108 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80050ce:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <HAL_RCC_OscConfig+0x50c>)
 80050d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80050da:	f7fc fd57 	bl	8001b8c <HAL_GetTick>
 80050de:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050e0:	e00c      	b.n	80050fc <HAL_RCC_OscConfig+0x524>
 80050e2:	bf00      	nop
 80050e4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050e8:	f7fc fd50 	bl	8001b8c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d902      	bls.n	80050fc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	f000 bc3e 	b.w	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050fc:	4baf      	ldr	r3, [pc, #700]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1ef      	bne.n	80050e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80c7 	beq.w	80052a4 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005116:	2300      	movs	r3, #0
 8005118:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800511c:	4ba7      	ldr	r3, [pc, #668]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800511e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d111      	bne.n	800514e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800512a:	4ba4      	ldr	r3, [pc, #656]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800512c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005130:	4aa2      	ldr	r2, [pc, #648]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005132:	f043 0304 	orr.w	r3, r3, #4
 8005136:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800513a:	4ba0      	ldr	r3, [pc, #640]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800513c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800514e:	4b9c      	ldr	r3, [pc, #624]	; (80053c0 <HAL_RCC_OscConfig+0x7e8>)
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d118      	bne.n	800518c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800515a:	4b99      	ldr	r3, [pc, #612]	; (80053c0 <HAL_RCC_OscConfig+0x7e8>)
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	4a98      	ldr	r2, [pc, #608]	; (80053c0 <HAL_RCC_OscConfig+0x7e8>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005166:	f7fc fd11 	bl	8001b8c <HAL_GetTick>
 800516a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516e:	f7fc fd0d 	bl	8001b8c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e3fb      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005180:	4b8f      	ldr	r3, [pc, #572]	; (80053c0 <HAL_RCC_OscConfig+0x7e8>)
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d05f      	beq.n	8005254 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005194:	4b89      	ldr	r3, [pc, #548]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800519a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d037      	beq.n	800521a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d006      	beq.n	80051c2 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e3da      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01b      	beq.n	8005204 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80051cc:	4b7b      	ldr	r3, [pc, #492]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 80051ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051d2:	4a7a      	ldr	r2, [pc, #488]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 80051d4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80051d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80051dc:	f7fc fcd6 	bl	8001b8c <HAL_GetTick>
 80051e0:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051e4:	f7fc fcd2 	bl	8001b8c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e3c0      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80051f6:	4b71      	ldr	r3, [pc, #452]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 80051f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ef      	bne.n	80051e4 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005204:	4b6d      	ldr	r3, [pc, #436]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800520a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	496a      	ldr	r1, [pc, #424]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800521a:	4b68      	ldr	r3, [pc, #416]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800521c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005220:	4a66      	ldr	r2, [pc, #408]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005222:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005226:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800522a:	f7fc fcaf 	bl	8001b8c <HAL_GetTick>
 800522e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005232:	f7fc fcab 	bl	8001b8c <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e399      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005244:	4b5d      	ldr	r3, [pc, #372]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800524a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0ef      	beq.n	8005232 <HAL_RCC_OscConfig+0x65a>
 8005252:	e01b      	b.n	800528c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005254:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800525a:	4a58      	ldr	r2, [pc, #352]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800525c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005260:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005264:	f7fc fc92 	bl	8001b8c <HAL_GetTick>
 8005268:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800526c:	f7fc fc8e 	bl	8001b8c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e37c      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800527e:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1ef      	bne.n	800526c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800528c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005290:	2b01      	cmp	r3, #1
 8005292:	d107      	bne.n	80052a4 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005294:	4b49      	ldr	r3, [pc, #292]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529a:	4a48      	ldr	r2, [pc, #288]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8112 	beq.w	80054d6 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80052b2:	2300      	movs	r3, #0
 80052b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052b8:	4b40      	ldr	r3, [pc, #256]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 80052ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d111      	bne.n	80052ea <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c6:	4b3d      	ldr	r3, [pc, #244]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 80052c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052cc:	4a3b      	ldr	r2, [pc, #236]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 80052ce:	f043 0304 	orr.w	r3, r3, #4
 80052d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80052d6:	4b39      	ldr	r3, [pc, #228]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 80052d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052ea:	4b35      	ldr	r3, [pc, #212]	; (80053c0 <HAL_RCC_OscConfig+0x7e8>)
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d118      	bne.n	8005328 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80052f6:	4b32      	ldr	r3, [pc, #200]	; (80053c0 <HAL_RCC_OscConfig+0x7e8>)
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	4a31      	ldr	r2, [pc, #196]	; (80053c0 <HAL_RCC_OscConfig+0x7e8>)
 80052fc:	f043 0301 	orr.w	r3, r3, #1
 8005300:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fc fc43 	bl	8001b8c <HAL_GetTick>
 8005306:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530a:	f7fc fc3f 	bl	8001b8c <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e32d      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <HAL_RCC_OscConfig+0x7e8>)
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0f0      	beq.n	800530a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01f      	beq.n	8005374 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d010      	beq.n	8005362 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005340:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005346:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005348:	f043 0304 	orr.w	r3, r3, #4
 800534c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005356:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005360:	e018      	b.n	8005394 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005362:	4b16      	ldr	r3, [pc, #88]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005368:	4a14      	ldr	r2, [pc, #80]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005372:	e00f      	b.n	8005394 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005376:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800537a:	4a10      	ldr	r2, [pc, #64]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005384:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 8005386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800538a:	4a0c      	ldr	r2, [pc, #48]	; (80053bc <HAL_RCC_OscConfig+0x7e4>)
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d058      	beq.n	800544e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800539c:	f7fc fbf6 	bl	8001b8c <HAL_GetTick>
 80053a0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a2:	e00f      	b.n	80053c4 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a4:	f7fc fbf2 	bl	8001b8c <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d906      	bls.n	80053c4 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e2de      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
 80053ba:	bf00      	nop
 80053bc:	46020c00 	.word	0x46020c00
 80053c0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c4:	4b9c      	ldr	r3, [pc, #624]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80053c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0e8      	beq.n	80053a4 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01b      	beq.n	8005416 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80053de:	4b96      	ldr	r3, [pc, #600]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80053e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053e4:	4a94      	ldr	r2, [pc, #592]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80053e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f0:	f7fc fbcc 	bl	8001b8c <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e2b8      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005406:	4b8c      	ldr	r3, [pc, #560]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800540c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0ed      	beq.n	80053f0 <HAL_RCC_OscConfig+0x818>
 8005414:	e053      	b.n	80054be <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005416:	4b88      	ldr	r3, [pc, #544]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800541c:	4a86      	ldr	r2, [pc, #536]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 800541e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005422:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005426:	e00a      	b.n	800543e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005428:	f7fc fbb0 	bl	8001b8c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e29c      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800543e:	4b7e      	ldr	r3, [pc, #504]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1ed      	bne.n	8005428 <HAL_RCC_OscConfig+0x850>
 800544c:	e037      	b.n	80054be <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800544e:	f7fc fb9d 	bl	8001b8c <HAL_GetTick>
 8005452:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005454:	e00a      	b.n	800546c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005456:	f7fc fb99 	bl	8001b8c <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f241 3288 	movw	r2, #5000	; 0x1388
 8005464:	4293      	cmp	r3, r2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e285      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800546c:	4b72      	ldr	r3, [pc, #456]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 800546e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1ed      	bne.n	8005456 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800547a:	4b6f      	ldr	r3, [pc, #444]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 800547c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01a      	beq.n	80054be <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005488:	4b6b      	ldr	r3, [pc, #428]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 800548a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800548e:	4a6a      	ldr	r2, [pc, #424]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005494:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005498:	e00a      	b.n	80054b0 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800549a:	f7fc fb77 	bl	8001b8c <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e263      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054b0:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80054b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1ed      	bne.n	800549a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c6:	4b5c      	ldr	r3, [pc, #368]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80054c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054cc:	4a5a      	ldr	r2, [pc, #360]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80054ce:	f023 0304 	bic.w	r3, r3, #4
 80054d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d036      	beq.n	8005550 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d019      	beq.n	800551e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80054ea:	4b53      	ldr	r3, [pc, #332]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a52      	ldr	r2, [pc, #328]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80054f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80054f6:	f7fc fb49 	bl	8001b8c <HAL_GetTick>
 80054fa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054fe:	f7fc fb45 	bl	8001b8c <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e233      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005510:	4b49      	ldr	r3, [pc, #292]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x926>
 800551c:	e018      	b.n	8005550 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800551e:	4b46      	ldr	r3, [pc, #280]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a45      	ldr	r2, [pc, #276]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005528:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800552a:	f7fc fb2f 	bl	8001b8c <HAL_GetTick>
 800552e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005532:	f7fc fb2b 	bl	8001b8c <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e219      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005544:	4b3c      	ldr	r3, [pc, #240]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f0      	bne.n	8005532 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005558:	2b00      	cmp	r3, #0
 800555a:	d036      	beq.n	80055ca <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	2b00      	cmp	r3, #0
 8005562:	d019      	beq.n	8005598 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005564:	4b34      	ldr	r3, [pc, #208]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a33      	ldr	r2, [pc, #204]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 800556a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800556e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005570:	f7fc fb0c 	bl	8001b8c <HAL_GetTick>
 8005574:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005578:	f7fc fb08 	bl	8001b8c <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1f6      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800558a:	4b2b      	ldr	r3, [pc, #172]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x9a0>
 8005596:	e018      	b.n	80055ca <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005598:	4b27      	ldr	r3, [pc, #156]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 800559e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055a4:	f7fc faf2 	bl	8001b8c <HAL_GetTick>
 80055a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80055ac:	f7fc faee 	bl	8001b8c <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e1dc      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80055be:	4b1e      	ldr	r3, [pc, #120]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d07f      	beq.n	80056d6 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d062      	beq.n	80056a4 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80055de:	4b16      	ldr	r3, [pc, #88]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	4a15      	ldr	r2, [pc, #84]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80055e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055e8:	6093      	str	r3, [r2, #8]
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	4910      	ldr	r1, [pc, #64]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005604:	d309      	bcc.n	800561a <HAL_RCC_OscConfig+0xa42>
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f023 021f 	bic.w	r2, r3, #31
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	4909      	ldr	r1, [pc, #36]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005614:	4313      	orrs	r3, r2
 8005616:	60cb      	str	r3, [r1, #12]
 8005618:	e02a      	b.n	8005670 <HAL_RCC_OscConfig+0xa98>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	da0c      	bge.n	800563c <HAL_RCC_OscConfig+0xa64>
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	015b      	lsls	r3, r3, #5
 8005630:	4901      	ldr	r1, [pc, #4]	; (8005638 <HAL_RCC_OscConfig+0xa60>)
 8005632:	4313      	orrs	r3, r2
 8005634:	60cb      	str	r3, [r1, #12]
 8005636:	e01b      	b.n	8005670 <HAL_RCC_OscConfig+0xa98>
 8005638:	46020c00 	.word	0x46020c00
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005644:	d30a      	bcc.n	800565c <HAL_RCC_OscConfig+0xa84>
 8005646:	4ba5      	ldr	r3, [pc, #660]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	029b      	lsls	r3, r3, #10
 8005654:	49a1      	ldr	r1, [pc, #644]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005656:	4313      	orrs	r3, r2
 8005658:	60cb      	str	r3, [r1, #12]
 800565a:	e009      	b.n	8005670 <HAL_RCC_OscConfig+0xa98>
 800565c:	4b9f      	ldr	r3, [pc, #636]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	03db      	lsls	r3, r3, #15
 800566a:	499c      	ldr	r1, [pc, #624]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 800566c:	4313      	orrs	r3, r2
 800566e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005670:	4b9a      	ldr	r3, [pc, #616]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a99      	ldr	r2, [pc, #612]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005676:	f043 0310 	orr.w	r3, r3, #16
 800567a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800567c:	f7fc fa86 	bl	8001b8c <HAL_GetTick>
 8005680:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005684:	f7fc fa82 	bl	8001b8c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e170      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005696:	4b91      	ldr	r3, [pc, #580]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0xaac>
 80056a2:	e018      	b.n	80056d6 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80056a4:	4b8d      	ldr	r3, [pc, #564]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a8c      	ldr	r2, [pc, #560]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80056aa:	f023 0310 	bic.w	r3, r3, #16
 80056ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80056b0:	f7fc fa6c 	bl	8001b8c <HAL_GetTick>
 80056b4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80056b8:	f7fc fa68 	bl	8001b8c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e156      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80056ca:	4b84      	ldr	r3, [pc, #528]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 814b 	beq.w	8005976 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056e6:	4b7d      	ldr	r3, [pc, #500]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	f000 80fa 	beq.w	80058e8 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	f040 80cc 	bne.w	8005896 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80056fe:	4b77      	ldr	r3, [pc, #476]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a76      	ldr	r2, [pc, #472]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005708:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800570a:	f7fc fa3f 	bl	8001b8c <HAL_GetTick>
 800570e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005712:	f7fc fa3b 	bl	8001b8c <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e129      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005724:	4b6d      	ldr	r3, [pc, #436]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005730:	4b6a      	ldr	r3, [pc, #424]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d111      	bne.n	8005762 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800573e:	4b67      	ldr	r3, [pc, #412]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005744:	4a65      	ldr	r2, [pc, #404]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005746:	f043 0304 	orr.w	r3, r3, #4
 800574a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800574e:	4b63      	ldr	r3, [pc, #396]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005762:	4b5f      	ldr	r3, [pc, #380]	; (80058e0 <HAL_RCC_OscConfig+0xd08>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800576e:	d102      	bne.n	8005776 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005776:	4b5a      	ldr	r3, [pc, #360]	; (80058e0 <HAL_RCC_OscConfig+0xd08>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	4a59      	ldr	r2, [pc, #356]	; (80058e0 <HAL_RCC_OscConfig+0xd08>)
 800577c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005780:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005782:	4b56      	ldr	r3, [pc, #344]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005796:	3a01      	subs	r2, #1
 8005798:	0212      	lsls	r2, r2, #8
 800579a:	4311      	orrs	r1, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057a0:	430a      	orrs	r2, r1
 80057a2:	494e      	ldr	r1, [pc, #312]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	628b      	str	r3, [r1, #40]	; 0x28
 80057a8:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80057aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ac:	4b4d      	ldr	r3, [pc, #308]	; (80058e4 <HAL_RCC_OscConfig+0xd0c>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057b4:	3a01      	subs	r2, #1
 80057b6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80057be:	3a01      	subs	r2, #1
 80057c0:	0252      	lsls	r2, r2, #9
 80057c2:	b292      	uxth	r2, r2
 80057c4:	4311      	orrs	r1, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057ca:	3a01      	subs	r2, #1
 80057cc:	0412      	lsls	r2, r2, #16
 80057ce:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80057d2:	4311      	orrs	r1, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80057d8:	3a01      	subs	r2, #1
 80057da:	0612      	lsls	r2, r2, #24
 80057dc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80057e0:	430a      	orrs	r2, r1
 80057e2:	493e      	ldr	r1, [pc, #248]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057e8:	4b3c      	ldr	r3, [pc, #240]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	4a3b      	ldr	r2, [pc, #236]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80057ee:	f023 0310 	bic.w	r3, r3, #16
 80057f2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80057f4:	4b39      	ldr	r3, [pc, #228]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005804:	00d2      	lsls	r2, r2, #3
 8005806:	4935      	ldr	r1, [pc, #212]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005808:	4313      	orrs	r3, r2
 800580a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800580c:	4b33      	ldr	r3, [pc, #204]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	4a32      	ldr	r2, [pc, #200]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005812:	f043 0310 	orr.w	r3, r3, #16
 8005816:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581c:	f023 020c 	bic.w	r2, r3, #12
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	492d      	ldr	r1, [pc, #180]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005826:	4313      	orrs	r3, r2
 8005828:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800582a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800582e:	2b01      	cmp	r3, #1
 8005830:	d105      	bne.n	800583e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005832:	4b2b      	ldr	r3, [pc, #172]	; (80058e0 <HAL_RCC_OscConfig+0xd08>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <HAL_RCC_OscConfig+0xd08>)
 8005838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800583c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800583e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005842:	2b01      	cmp	r3, #1
 8005844:	d107      	bne.n	8005856 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005846:	4b25      	ldr	r3, [pc, #148]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584c:	4a23      	ldr	r2, [pc, #140]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 800584e:	f023 0304 	bic.w	r3, r3, #4
 8005852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005856:	4b21      	ldr	r3, [pc, #132]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	4a20      	ldr	r2, [pc, #128]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 800585c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005860:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800586c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800586e:	f7fc f98d 	bl	8001b8c <HAL_GetTick>
 8005872:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005876:	f7fc f989 	bl	8001b8c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e077      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005888:	4b14      	ldr	r3, [pc, #80]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <HAL_RCC_OscConfig+0xc9e>
 8005894:	e06f      	b.n	8005976 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005896:	4b11      	ldr	r3, [pc, #68]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a10      	ldr	r2, [pc, #64]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 800589c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80058a2:	f7fc f973 	bl	8001b8c <HAL_GetTick>
 80058a6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058aa:	f7fc f96f 	bl	8001b8c <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e05d      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058bc:	4b07      	ldr	r3, [pc, #28]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f0      	bne.n	80058aa <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	4a03      	ldr	r2, [pc, #12]	; (80058dc <HAL_RCC_OscConfig+0xd04>)
 80058ce:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	6293      	str	r3, [r2, #40]	; 0x28
 80058d8:	e04d      	b.n	8005976 <HAL_RCC_OscConfig+0xd9e>
 80058da:	bf00      	nop
 80058dc:	46020c00 	.word	0x46020c00
 80058e0:	46020800 	.word	0x46020800
 80058e4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80058e8:	4b25      	ldr	r3, [pc, #148]	; (8005980 <HAL_RCC_OscConfig+0xda8>)
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058ee:	4b24      	ldr	r3, [pc, #144]	; (8005980 <HAL_RCC_OscConfig+0xda8>)
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d03a      	beq.n	8005972 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0203 	and.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005906:	429a      	cmp	r2, r3
 8005908:	d133      	bne.n	8005972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	0a1b      	lsrs	r3, r3, #8
 800590e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005918:	429a      	cmp	r2, r3
 800591a:	d12a      	bne.n	8005972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	0b1b      	lsrs	r3, r3, #12
 8005920:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005928:	429a      	cmp	r2, r3
 800592a:	d122      	bne.n	8005972 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005936:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005938:	429a      	cmp	r2, r3
 800593a:	d11a      	bne.n	8005972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	0a5b      	lsrs	r3, r3, #9
 8005940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005948:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d111      	bne.n	8005972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	0c1b      	lsrs	r3, r3, #16
 8005952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800595c:	429a      	cmp	r2, r3
 800595e:	d108      	bne.n	8005972 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	0e1b      	lsrs	r3, r3, #24
 8005964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d001      	beq.n	8005976 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3738      	adds	r7, #56	; 0x38
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	46020c00 	.word	0x46020c00

08005984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e1d9      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005998:	4b9b      	ldr	r3, [pc, #620]	; (8005c08 <HAL_RCC_ClockConfig+0x284>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d910      	bls.n	80059c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b98      	ldr	r3, [pc, #608]	; (8005c08 <HAL_RCC_ClockConfig+0x284>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f023 020f 	bic.w	r2, r3, #15
 80059ae:	4996      	ldr	r1, [pc, #600]	; (8005c08 <HAL_RCC_ClockConfig+0x284>)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b94      	ldr	r3, [pc, #592]	; (8005c08 <HAL_RCC_ClockConfig+0x284>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e1c1      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	4b8c      	ldr	r3, [pc, #560]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d908      	bls.n	80059f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80059e4:	4b89      	ldr	r3, [pc, #548]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	4986      	ldr	r1, [pc, #536]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d012      	beq.n	8005a28 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	4b81      	ldr	r3, [pc, #516]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d909      	bls.n	8005a28 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005a14:	4b7d      	ldr	r3, [pc, #500]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a16:	6a1b      	ldr	r3, [r3, #32]
 8005a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	497a      	ldr	r1, [pc, #488]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d010      	beq.n	8005a56 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	4b74      	ldr	r3, [pc, #464]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d908      	bls.n	8005a56 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005a44:	4b71      	ldr	r3, [pc, #452]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	496e      	ldr	r1, [pc, #440]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d010      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	4b69      	ldr	r3, [pc, #420]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d908      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005a72:	4b66      	ldr	r3, [pc, #408]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f023 020f 	bic.w	r2, r3, #15
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	4963      	ldr	r1, [pc, #396]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80d2 	beq.w	8005c36 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d143      	bne.n	8005b26 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9e:	4b5b      	ldr	r3, [pc, #364]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d110      	bne.n	8005ace <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005aac:	4b57      	ldr	r3, [pc, #348]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ab2:	4a56      	ldr	r2, [pc, #344]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005ab4:	f043 0304 	orr.w	r3, r3, #4
 8005ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005abc:	4b53      	ldr	r3, [pc, #332]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005ace:	f7fc f85d 	bl	8001b8c <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005ad4:	4b4e      	ldr	r3, [pc, #312]	; (8005c10 <HAL_RCC_ClockConfig+0x28c>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00f      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005ae0:	e008      	b.n	8005af4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005ae2:	f7fc f853 	bl	8001b8c <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e12b      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005af4:	4b46      	ldr	r3, [pc, #280]	; (8005c10 <HAL_RCC_ClockConfig+0x28c>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0f0      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d107      	bne.n	8005b16 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b06:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0c:	4a3f      	ldr	r2, [pc, #252]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005b0e:	f023 0304 	bic.w	r3, r3, #4
 8005b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005b16:	4b3d      	ldr	r3, [pc, #244]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d121      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e112      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b2e:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d115      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e106      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005b46:	4b31      	ldr	r3, [pc, #196]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e0fa      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b56:	4b2d      	ldr	r3, [pc, #180]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e0f2      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4926      	ldr	r1, [pc, #152]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005b78:	f7fc f808 	bl	8001b8c <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d112      	bne.n	8005bac <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b86:	e00a      	b.n	8005b9e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b88:	f7fc f800 	bl	8001b8c <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e0d6      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b0c      	cmp	r3, #12
 8005ba8:	d1ee      	bne.n	8005b88 <HAL_RCC_ClockConfig+0x204>
 8005baa:	e044      	b.n	8005c36 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d112      	bne.n	8005bda <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bb4:	e00a      	b.n	8005bcc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb6:	f7fb ffe9 	bl	8001b8c <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e0bf      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f003 030c 	and.w	r3, r3, #12
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d1ee      	bne.n	8005bb6 <HAL_RCC_ClockConfig+0x232>
 8005bd8:	e02d      	b.n	8005c36 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d123      	bne.n	8005c2a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be4:	f7fb ffd2 	bl	8001b8c <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e0a8      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bfa:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <HAL_RCC_ClockConfig+0x288>)
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1ee      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x260>
 8005c06:	e016      	b.n	8005c36 <HAL_RCC_ClockConfig+0x2b2>
 8005c08:	40022000 	.word	0x40022000
 8005c0c:	46020c00 	.word	0x46020c00
 8005c10:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c14:	f7fb ffba 	bl	8001b8c <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e090      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c2a:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f003 030c 	and.w	r3, r3, #12
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d1ee      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689a      	ldr	r2, [r3, #8]
 8005c46:	4b43      	ldr	r3, [pc, #268]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d208      	bcs.n	8005c64 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005c52:	4b40      	ldr	r3, [pc, #256]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 020f 	bic.w	r2, r3, #15
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	493d      	ldr	r1, [pc, #244]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c64:	4b3c      	ldr	r3, [pc, #240]	; (8005d58 <HAL_RCC_ClockConfig+0x3d4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 030f 	and.w	r3, r3, #15
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d210      	bcs.n	8005c94 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c72:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <HAL_RCC_ClockConfig+0x3d4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f023 020f 	bic.w	r2, r3, #15
 8005c7a:	4937      	ldr	r1, [pc, #220]	; (8005d58 <HAL_RCC_ClockConfig+0x3d4>)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c82:	4b35      	ldr	r3, [pc, #212]	; (8005d58 <HAL_RCC_ClockConfig+0x3d4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 030f 	and.w	r3, r3, #15
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d001      	beq.n	8005c94 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e05b      	b.n	8005d4c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d208      	bcs.n	8005cc2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005cb0:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4925      	ldr	r1, [pc, #148]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d012      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d209      	bcs.n	8005cf4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ce0:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	4919      	ldr	r1, [pc, #100]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d010      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	695a      	ldr	r2, [r3, #20]
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d208      	bcs.n	8005d22 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005d10:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	490d      	ldr	r1, [pc, #52]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d22:	f000 f859 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005d26:	4602      	mov	r2, r0
 8005d28:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <HAL_RCC_ClockConfig+0x3d0>)
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	490a      	ldr	r1, [pc, #40]	; (8005d5c <HAL_RCC_ClockConfig+0x3d8>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <HAL_RCC_ClockConfig+0x3dc>)
 8005d3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <HAL_RCC_ClockConfig+0x3e0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fb fed9 	bl	8001af8 <HAL_InitTick>
 8005d46:	4603      	mov	r3, r0
 8005d48:	73fb      	strb	r3, [r7, #15]

  return status;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	46020c00 	.word	0x46020c00
 8005d58:	40022000 	.word	0x40022000
 8005d5c:	0800d164 	.word	0x0800d164
 8005d60:	20000018 	.word	0x20000018
 8005d64:	2000001c 	.word	0x2000001c

08005d68 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	; 0x28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 8005d74:	4b16      	ldr	r3, [pc, #88]	; (8005dd0 <HAL_RCC_MCOConfig+0x68>)
 8005d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <HAL_RCC_MCOConfig+0x68>)
 8005d7c:	f043 0301 	orr.w	r3, r3, #1
 8005d80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005d84:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <HAL_RCC_MCOConfig+0x68>)
 8005d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 8005d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d96:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8005d98:	2302      	movs	r3, #2
 8005d9a:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 8005da4:	2300      	movs	r3, #0
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8005da8:	f107 0314 	add.w	r3, r7, #20
 8005dac:	4619      	mov	r1, r3
 8005dae:	4809      	ldr	r0, [pc, #36]	; (8005dd4 <HAL_RCC_MCOConfig+0x6c>)
 8005db0:	f7fd febc 	bl	8003b2c <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8005db4:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_RCC_MCOConfig+0x68>)
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	4903      	ldr	r1, [pc, #12]	; (8005dd0 <HAL_RCC_MCOConfig+0x68>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61cb      	str	r3, [r1, #28]
}
 8005dc8:	bf00      	nop
 8005dca:	3728      	adds	r7, #40	; 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	46020c00 	.word	0x46020c00
 8005dd4:	42020000 	.word	0x42020000

08005dd8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b08b      	sub	sp, #44	; 0x2c
 8005ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de6:	4b7b      	ldr	r3, [pc, #492]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005df0:	4b78      	ldr	r3, [pc, #480]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x34>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b0c      	cmp	r3, #12
 8005e04:	d121      	bne.n	8005e4a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d11e      	bne.n	8005e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005e0c:	4b71      	ldr	r3, [pc, #452]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d107      	bne.n	8005e28 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005e18:	4b6e      	ldr	r3, [pc, #440]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e1e:	0b1b      	lsrs	r3, r3, #12
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
 8005e26:	e005      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005e28:	4b6a      	ldr	r3, [pc, #424]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	0f1b      	lsrs	r3, r3, #28
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e34:	4a68      	ldr	r2, [pc, #416]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d110      	bne.n	8005e66 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e48:	e00d      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e4a:	4b62      	ldr	r3, [pc, #392]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e4c:	69db      	ldr	r3, [r3, #28]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d102      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e56:	4b61      	ldr	r3, [pc, #388]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	e004      	b.n	8005e66 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e62:	4b5e      	ldr	r3, [pc, #376]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8005e64:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b0c      	cmp	r3, #12
 8005e6a:	f040 80ac 	bne.w	8005fc6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005e6e:	4b59      	ldr	r3, [pc, #356]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005e78:	4b56      	ldr	r3, [pc, #344]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	0a1b      	lsrs	r3, r3, #8
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	3301      	adds	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005e86:	4b53      	ldr	r3, [pc, #332]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e92:	4b50      	ldr	r3, [pc, #320]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	08db      	lsrs	r3, r3, #3
 8005e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8086 	beq.w	8005fc2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d003      	beq.n	8005ec4 <HAL_RCC_GetSysClockFreq+0xec>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d022      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0x130>
 8005ec2:	e043      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ece:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005fe0 <HAL_RCC_GetSysClockFreq+0x208>
 8005ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed6:	4b3f      	ldr	r3, [pc, #252]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ee6:	ed97 6a01 	vldr	s12, [r7, #4]
 8005eea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005fe4 <HAL_RCC_GetSysClockFreq+0x20c>
 8005eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f02:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f06:	e046      	b.n	8005f96 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f12:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005fe0 <HAL_RCC_GetSysClockFreq+0x208>
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	4b2e      	ldr	r3, [pc, #184]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f2a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f2e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005fe4 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f4a:	e024      	b.n	8005f96 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f64:	4b1b      	ldr	r3, [pc, #108]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f74:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f78:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005fe4 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f90:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f94:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005f96:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9a:	0e1b      	lsrs	r3, r3, #24
 8005f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fba:	ee17 3a90 	vmov	r3, s15
 8005fbe:	623b      	str	r3, [r7, #32]
 8005fc0:	e001      	b.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	372c      	adds	r7, #44	; 0x2c
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	46020c00 	.word	0x46020c00
 8005fd8:	0800d17c 	.word	0x0800d17c
 8005fdc:	00f42400 	.word	0x00f42400
 8005fe0:	4b742400 	.word	0x4b742400
 8005fe4:	46000000 	.word	0x46000000

08005fe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005fec:	f7ff fef4 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b07      	ldr	r3, [pc, #28]	; (8006010 <HAL_RCC_GetHCLKFreq+0x28>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	4906      	ldr	r1, [pc, #24]	; (8006014 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005ffc:	5ccb      	ldrb	r3, [r1, r3]
 8005ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8006002:	4a05      	ldr	r2, [pc, #20]	; (8006018 <HAL_RCC_GetHCLKFreq+0x30>)
 8006004:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006006:	4b04      	ldr	r3, [pc, #16]	; (8006018 <HAL_RCC_GetHCLKFreq+0x30>)
 8006008:	681b      	ldr	r3, [r3, #0]
}
 800600a:	4618      	mov	r0, r3
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	46020c00 	.word	0x46020c00
 8006014:	0800d164 	.word	0x0800d164
 8006018:	20000018 	.word	0x20000018

0800601c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006020:	f7ff ffe2 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b05      	ldr	r3, [pc, #20]	; (800603c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	091b      	lsrs	r3, r3, #4
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	4903      	ldr	r1, [pc, #12]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006032:	5ccb      	ldrb	r3, [r1, r3]
 8006034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	bd80      	pop	{r7, pc}
 800603c:	46020c00 	.word	0x46020c00
 8006040:	0800d174 	.word	0x0800d174

08006044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006048:	f7ff ffce 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 800604c:	4602      	mov	r2, r0
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	4903      	ldr	r1, [pc, #12]	; (8006068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800605a:	5ccb      	ldrb	r3, [r1, r3]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	bd80      	pop	{r7, pc}
 8006064:	46020c00 	.word	0x46020c00
 8006068:	0800d174 	.word	0x0800d174

0800606c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006070:	f7ff ffba 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8006074:	4602      	mov	r2, r0
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <HAL_RCC_GetPCLK3Freq+0x20>)
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	091b      	lsrs	r3, r3, #4
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	4903      	ldr	r1, [pc, #12]	; (8006090 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006082:	5ccb      	ldrb	r3, [r1, r3]
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006088:	4618      	mov	r0, r3
 800608a:	bd80      	pop	{r7, pc}
 800608c:	46020c00 	.word	0x46020c00
 8006090:	0800d174 	.word	0x0800d174

08006094 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800609c:	4b3e      	ldr	r3, [pc, #248]	; (8006198 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800609e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d003      	beq.n	80060b2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060aa:	f7fe fd77 	bl	8004b9c <HAL_PWREx_GetVoltageRange>
 80060ae:	6178      	str	r0, [r7, #20]
 80060b0:	e019      	b.n	80060e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060b2:	4b39      	ldr	r3, [pc, #228]	; (8006198 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b8:	4a37      	ldr	r2, [pc, #220]	; (8006198 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060ba:	f043 0304 	orr.w	r3, r3, #4
 80060be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80060c2:	4b35      	ldr	r3, [pc, #212]	; (8006198 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060d0:	f7fe fd64 	bl	8004b9c <HAL_PWREx_GetVoltageRange>
 80060d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060d6:	4b30      	ldr	r3, [pc, #192]	; (8006198 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060dc:	4a2e      	ldr	r2, [pc, #184]	; (8006198 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060de:	f023 0304 	bic.w	r3, r3, #4
 80060e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80060ec:	d003      	beq.n	80060f6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f4:	d109      	bne.n	800610a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060fc:	d202      	bcs.n	8006104 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80060fe:	2301      	movs	r3, #1
 8006100:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006102:	e033      	b.n	800616c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006104:	2300      	movs	r3, #0
 8006106:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006108:	e030      	b.n	800616c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006110:	d208      	bcs.n	8006124 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d102      	bne.n	8006120 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800611a:	2303      	movs	r3, #3
 800611c:	613b      	str	r3, [r7, #16]
 800611e:	e025      	b.n	800616c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e035      	b.n	8006190 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800612a:	d90f      	bls.n	800614c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006138:	d902      	bls.n	8006140 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800613a:	2300      	movs	r3, #0
 800613c:	613b      	str	r3, [r7, #16]
 800613e:	e015      	b.n	800616c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006140:	2301      	movs	r3, #1
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	e012      	b.n	800616c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e00f      	b.n	800616c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006152:	d109      	bne.n	8006168 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615a:	d102      	bne.n	8006162 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800615c:	2301      	movs	r3, #1
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	e004      	b.n	800616c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006162:	2302      	movs	r3, #2
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	e001      	b.n	800616c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006168:	2301      	movs	r3, #1
 800616a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f023 020f 	bic.w	r2, r3, #15
 8006174:	4909      	ldr	r1, [pc, #36]	; (800619c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800617c:	4b07      	ldr	r3, [pc, #28]	; (800619c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	429a      	cmp	r2, r3
 8006188:	d001      	beq.n	800618e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	46020c00 	.word	0x46020c00
 800619c:	40022000 	.word	0x40022000

080061a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80061a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a4:	b0ba      	sub	sp, #232	; 0xe8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061b2:	2300      	movs	r3, #0
 80061b4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f002 0401 	and.w	r4, r2, #1
 80061c4:	2500      	movs	r5, #0
 80061c6:	ea54 0305 	orrs.w	r3, r4, r5
 80061ca:	d00b      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80061cc:	4bcb      	ldr	r3, [pc, #812]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061d2:	f023 0103 	bic.w	r1, r3, #3
 80061d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061dc:	4ac7      	ldr	r2, [pc, #796]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061de:	430b      	orrs	r3, r1
 80061e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f002 0802 	and.w	r8, r2, #2
 80061f0:	f04f 0900 	mov.w	r9, #0
 80061f4:	ea58 0309 	orrs.w	r3, r8, r9
 80061f8:	d00b      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80061fa:	4bc0      	ldr	r3, [pc, #768]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006200:	f023 010c 	bic.w	r1, r3, #12
 8006204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	4abc      	ldr	r2, [pc, #752]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800620c:	430b      	orrs	r3, r1
 800620e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f002 0a04 	and.w	sl, r2, #4
 800621e:	f04f 0b00 	mov.w	fp, #0
 8006222:	ea5a 030b 	orrs.w	r3, sl, fp
 8006226:	d00b      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006228:	4bb4      	ldr	r3, [pc, #720]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800622a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800622e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006238:	4ab0      	ldr	r2, [pc, #704]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800623a:	430b      	orrs	r3, r1
 800623c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006240:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f002 0308 	and.w	r3, r2, #8
 800624c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006250:	2300      	movs	r3, #0
 8006252:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006256:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800625a:	460b      	mov	r3, r1
 800625c:	4313      	orrs	r3, r2
 800625e:	d00b      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006260:	4ba6      	ldr	r3, [pc, #664]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006266:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800626a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	4aa2      	ldr	r2, [pc, #648]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006272:	430b      	orrs	r3, r1
 8006274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f002 0310 	and.w	r3, r2, #16
 8006284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006288:	2300      	movs	r3, #0
 800628a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800628e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006292:	460b      	mov	r3, r1
 8006294:	4313      	orrs	r3, r2
 8006296:	d00b      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006298:	4b98      	ldr	r3, [pc, #608]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800629a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800629e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a8:	4a94      	ldr	r2, [pc, #592]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062aa:	430b      	orrs	r3, r1
 80062ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 0320 	and.w	r3, r2, #32
 80062bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80062ca:	460b      	mov	r3, r1
 80062cc:	4313      	orrs	r3, r2
 80062ce:	d00b      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80062d0:	4b8a      	ldr	r3, [pc, #552]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062d6:	f023 0107 	bic.w	r1, r3, #7
 80062da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e0:	4a86      	ldr	r2, [pc, #536]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062e2:	430b      	orrs	r3, r1
 80062e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80062f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062f8:	2300      	movs	r3, #0
 80062fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006302:	460b      	mov	r3, r1
 8006304:	4313      	orrs	r3, r2
 8006306:	d00b      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006308:	4b7c      	ldr	r3, [pc, #496]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800630a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800630e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006318:	4a78      	ldr	r2, [pc, #480]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800631a:	430b      	orrs	r3, r1
 800631c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800632c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006336:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d00b      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006340:	4b6e      	ldr	r3, [pc, #440]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800634a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800634e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006350:	4a6a      	ldr	r2, [pc, #424]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006352:	430b      	orrs	r3, r1
 8006354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006364:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006368:	2300      	movs	r3, #0
 800636a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800636e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006372:	460b      	mov	r3, r1
 8006374:	4313      	orrs	r3, r2
 8006376:	d00b      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006378:	4b60      	ldr	r3, [pc, #384]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800637a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800637e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	4a5c      	ldr	r2, [pc, #368]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800638a:	430b      	orrs	r3, r1
 800638c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800639c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80063aa:	460b      	mov	r3, r1
 80063ac:	4313      	orrs	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80063b0:	4b52      	ldr	r3, [pc, #328]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063b6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80063ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c0:	4a4e      	ldr	r2, [pc, #312]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063c2:	430b      	orrs	r3, r1
 80063c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80063d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063d8:	2300      	movs	r3, #0
 80063da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80063e2:	460b      	mov	r3, r1
 80063e4:	4313      	orrs	r3, r2
 80063e6:	d00b      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80063e8:	4b44      	ldr	r3, [pc, #272]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063ee:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80063f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063f8:	4a40      	ldr	r2, [pc, #256]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063fa:	430b      	orrs	r3, r1
 80063fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006400:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800640c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006410:	2300      	movs	r3, #0
 8006412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006416:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800641a:	460b      	mov	r3, r1
 800641c:	4313      	orrs	r3, r2
 800641e:	d00b      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006420:	4b36      	ldr	r3, [pc, #216]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006426:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800642a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800642e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006430:	4a32      	ldr	r2, [pc, #200]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006432:	430b      	orrs	r3, r1
 8006434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006438:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006444:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006448:	2300      	movs	r3, #0
 800644a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800644e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d00c      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006458:	4b28      	ldr	r3, [pc, #160]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800645a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800645e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646a:	4a24      	ldr	r2, [pc, #144]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800646c:	430b      	orrs	r3, r1
 800646e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800647e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006480:	2300      	movs	r3, #0
 8006482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006484:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006488:	460b      	mov	r3, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	d04f      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800648e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d02d      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d827      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800649e:	2b60      	cmp	r3, #96	; 0x60
 80064a0:	d02e      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064a2:	2b60      	cmp	r3, #96	; 0x60
 80064a4:	d823      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d006      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80064aa:	2b40      	cmp	r3, #64	; 0x40
 80064ac:	d81f      	bhi.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d011      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80064b6:	e01a      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064b8:	4b10      	ldr	r3, [pc, #64]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	4a0f      	ldr	r2, [pc, #60]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064c2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064c4:	e01d      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ca:	3308      	adds	r3, #8
 80064cc:	4618      	mov	r0, r3
 80064ce:	f002 f981 	bl	80087d4 <RCCEx_PLL2_Config>
 80064d2:	4603      	mov	r3, r0
 80064d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064d8:	e013      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064de:	332c      	adds	r3, #44	; 0x2c
 80064e0:	4618      	mov	r0, r3
 80064e2:	f002 fa0f 	bl	8008904 <RCCEx_PLL3_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064ec:	e009      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80064f4:	e005      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80064f6:	bf00      	nop
 80064f8:	e003      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80064fa:	bf00      	nop
 80064fc:	46020c00 	.word	0x46020c00
        break;
 8006500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006502:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10d      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800650a:	4bb6      	ldr	r3, [pc, #728]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800650c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006510:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651c:	4ab1      	ldr	r2, [pc, #708]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800651e:	430b      	orrs	r3, r1
 8006520:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800652a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800652e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800653a:	673b      	str	r3, [r7, #112]	; 0x70
 800653c:	2300      	movs	r3, #0
 800653e:	677b      	str	r3, [r7, #116]	; 0x74
 8006540:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d053      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800654a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800654e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006556:	d033      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655c:	d82c      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800655e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006562:	d02f      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006568:	d826      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800656a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656e:	d008      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006574:	d820      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800657a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657e:	d011      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006580:	e01a      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006582:	4b98      	ldr	r3, [pc, #608]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	4a97      	ldr	r2, [pc, #604]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800658c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800658e:	e01a      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006594:	3308      	adds	r3, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f002 f91c 	bl	80087d4 <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065a2:	e010      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065a8:	332c      	adds	r3, #44	; 0x2c
 80065aa:	4618      	mov	r0, r3
 80065ac:	f002 f9aa 	bl	8008904 <RCCEx_PLL3_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065b6:	e006      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065be:	e002      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80065c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80065ce:	4b85      	ldr	r3, [pc, #532]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80065d4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80065d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065e0:	4a80      	ldr	r2, [pc, #512]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065e2:	430b      	orrs	r3, r1
 80065e4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80065e8:	e003      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065ee:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80065f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80065fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006600:	2300      	movs	r3, #0
 8006602:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006604:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006608:	460b      	mov	r3, r1
 800660a:	4313      	orrs	r3, r2
 800660c:	d046      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800660e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006612:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006616:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800661a:	d028      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800661c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006620:	d821      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006626:	d022      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800662c:	d81b      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800662e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006632:	d01c      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006638:	d815      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800663a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800663e:	d008      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006644:	d80f      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d011      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800664e:	d00e      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006650:	e009      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006656:	3308      	adds	r3, #8
 8006658:	4618      	mov	r0, r3
 800665a:	f002 f8bb 	bl	80087d4 <RCCEx_PLL2_Config>
 800665e:	4603      	mov	r3, r0
 8006660:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006664:	e004      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800666c:	e000      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800666e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006670:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10d      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006678:	4b5a      	ldr	r3, [pc, #360]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800667a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800667e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006686:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800668a:	4a56      	ldr	r2, [pc, #344]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800668c:	430b      	orrs	r3, r1
 800668e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006692:	e003      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006694:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006698:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800669c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80066a8:	663b      	str	r3, [r7, #96]	; 0x60
 80066aa:	2300      	movs	r3, #0
 80066ac:	667b      	str	r3, [r7, #100]	; 0x64
 80066ae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80066b2:	460b      	mov	r3, r1
 80066b4:	4313      	orrs	r3, r2
 80066b6:	d03f      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80066b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d81e      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	0800670b 	.word	0x0800670b
 80066d0:	080066e1 	.word	0x080066e1
 80066d4:	080066ef 	.word	0x080066ef
 80066d8:	0800670b 	.word	0x0800670b
 80066dc:	0800670b 	.word	0x0800670b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066e0:	4b40      	ldr	r3, [pc, #256]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e4:	4a3f      	ldr	r2, [pc, #252]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ea:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80066ec:	e00e      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f2:	332c      	adds	r3, #44	; 0x2c
 80066f4:	4618      	mov	r0, r3
 80066f6:	f002 f905 	bl	8008904 <RCCEx_PLL3_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006700:	e004      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006708:	e000      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800670a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800670c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10d      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006714:	4b33      	ldr	r3, [pc, #204]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006716:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800671a:	f023 0107 	bic.w	r1, r3, #7
 800671e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006726:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006728:	430b      	orrs	r3, r1
 800672a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800672e:	e003      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006730:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006734:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006744:	65bb      	str	r3, [r7, #88]	; 0x58
 8006746:	2300      	movs	r3, #0
 8006748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800674a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800674e:	460b      	mov	r3, r1
 8006750:	4313      	orrs	r3, r2
 8006752:	d04d      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006754:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800675c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006760:	d028      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006762:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006766:	d821      	bhi.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006768:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800676c:	d024      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800676e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006772:	d81b      	bhi.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006778:	d00e      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800677a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800677e:	d815      	bhi.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01b      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006788:	d110      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800678a:	4b16      	ldr	r3, [pc, #88]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	4a15      	ldr	r2, [pc, #84]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006794:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006796:	e012      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800679c:	332c      	adds	r3, #44	; 0x2c
 800679e:	4618      	mov	r0, r3
 80067a0:	f002 f8b0 	bl	8008904 <RCCEx_PLL3_Config>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067aa:	e008      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067b2:	e004      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80067b4:	bf00      	nop
 80067b6:	e002      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80067b8:	bf00      	nop
 80067ba:	e000      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80067bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d110      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80067c6:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80067d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d8:	4a02      	ldr	r2, [pc, #8]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067da:	430b      	orrs	r3, r1
 80067dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80067e0:	e006      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80067e2:	bf00      	nop
 80067e4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067ec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80067fc:	653b      	str	r3, [r7, #80]	; 0x50
 80067fe:	2300      	movs	r3, #0
 8006800:	657b      	str	r3, [r7, #84]	; 0x54
 8006802:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006806:	460b      	mov	r3, r1
 8006808:	4313      	orrs	r3, r2
 800680a:	f000 80b5 	beq.w	8006978 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800680e:	2300      	movs	r3, #0
 8006810:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006814:	4b9d      	ldr	r3, [pc, #628]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b00      	cmp	r3, #0
 8006820:	d113      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006822:	4b9a      	ldr	r3, [pc, #616]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006828:	4a98      	ldr	r2, [pc, #608]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800682a:	f043 0304 	orr.w	r3, r3, #4
 800682e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006832:	4b96      	ldr	r3, [pc, #600]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800684a:	4b91      	ldr	r3, [pc, #580]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	4a90      	ldr	r2, [pc, #576]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006856:	f7fb f999 	bl	8001b8c <HAL_GetTick>
 800685a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800685e:	e00b      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006860:	f7fb f994 	bl	8001b8c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d903      	bls.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006876:	e005      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006878:	4b85      	ldr	r3, [pc, #532]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0ed      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006884:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d165      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800688c:	4b7f      	ldr	r3, [pc, #508]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800688e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d023      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80068a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01b      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068b2:	4b76      	ldr	r3, [pc, #472]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068c0:	4b72      	ldr	r3, [pc, #456]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068c6:	4a71      	ldr	r2, [pc, #452]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068d0:	4b6e      	ldr	r3, [pc, #440]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068d6:	4a6d      	ldr	r2, [pc, #436]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068e0:	4a6a      	ldr	r2, [pc, #424]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d019      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fb f949 	bl	8001b8c <HAL_GetTick>
 80068fa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068fe:	e00d      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006900:	f7fb f944 	bl	8001b8c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006910:	429a      	cmp	r2, r3
 8006912:	d903      	bls.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800691a:	e006      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800691c:	4b5b      	ldr	r3, [pc, #364]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800691e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0ea      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800692a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10d      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006932:	4b56      	ldr	r3, [pc, #344]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006938:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800693c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006940:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006944:	4a51      	ldr	r2, [pc, #324]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006946:	430b      	orrs	r3, r1
 8006948:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800694c:	e008      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800694e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006952:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006956:	e003      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006958:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800695c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006960:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006964:	2b01      	cmp	r3, #1
 8006966:	d107      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006968:	4b48      	ldr	r3, [pc, #288]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800696a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800696e:	4a47      	ldr	r2, [pc, #284]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006978:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006984:	64bb      	str	r3, [r7, #72]	; 0x48
 8006986:	2300      	movs	r3, #0
 8006988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800698a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800698e:	460b      	mov	r3, r1
 8006990:	4313      	orrs	r3, r2
 8006992:	d042      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006998:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800699c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069a0:	d022      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80069a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069a6:	d81b      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80069a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ac:	d011      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80069ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b2:	d815      	bhi.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d019      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80069b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069bc:	d110      	bne.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c2:	3308      	adds	r3, #8
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 ff05 	bl	80087d4 <RCCEx_PLL2_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069d0:	e00d      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d2:	4b2e      	ldr	r3, [pc, #184]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	4a2d      	ldr	r2, [pc, #180]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069dc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80069de:	e006      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069e6:	e002      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80069e8:	bf00      	nop
 80069ea:	e000      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80069ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10d      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80069f6:	4b25      	ldr	r3, [pc, #148]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069fc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006a00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a08:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a10:	e003      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a12:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a16:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
 8006a28:	2300      	movs	r3, #0
 8006a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8006a2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006a30:	460b      	mov	r3, r1
 8006a32:	4313      	orrs	r3, r2
 8006a34:	d032      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a42:	d00b      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a48:	d804      	bhi.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d008      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a52:	d007      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a5a:	e004      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006a5c:	bf00      	nop
 8006a5e:	e002      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006a64:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a66:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d112      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006a6e:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a80:	4a02      	ldr	r2, [pc, #8]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a82:	430b      	orrs	r3, r1
 8006a84:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006a88:	e008      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006a8a:	bf00      	nop
 8006a8c:	46020c00 	.word	0x46020c00
 8006a90:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a94:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a98:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aaa:	2300      	movs	r3, #0
 8006aac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	d00c      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006ab8:	4b98      	ldr	r3, [pc, #608]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006abe:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aca:	4a94      	ldr	r2, [pc, #592]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006acc:	430b      	orrs	r3, r1
 8006ace:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006ade:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4313      	orrs	r3, r2
 8006aec:	d019      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006af2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006afa:	d105      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006afc:	4b87      	ldr	r3, [pc, #540]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	4a86      	ldr	r2, [pc, #536]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b06:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006b08:	4b84      	ldr	r3, [pc, #528]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b0e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b1a:	4a80      	ldr	r2, [pc, #512]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b30:	2300      	movs	r3, #0
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	d00c      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006b3e:	4b77      	ldr	r3, [pc, #476]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b50:	4972      	ldr	r1, [pc, #456]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b60:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006b64:	623b      	str	r3, [r7, #32]
 8006b66:	2300      	movs	r3, #0
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4313      	orrs	r3, r2
 8006b72:	d00c      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006b74:	4b69      	ldr	r3, [pc, #420]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b82:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006b86:	4965      	ldr	r1, [pc, #404]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006b9a:	61bb      	str	r3, [r7, #24]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61fb      	str	r3, [r7, #28]
 8006ba0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	d00c      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006baa:	4b5c      	ldr	r3, [pc, #368]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bb0:	f023 0218 	bic.w	r2, r3, #24
 8006bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bb8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006bbc:	4957      	ldr	r1, [pc, #348]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d032      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006be0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bec:	d105      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bee:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf2:	4a4a      	ldr	r2, [pc, #296]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c06:	d108      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 fde0 	bl	80087d4 <RCCEx_PLL2_Config>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006c1a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10d      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006c22:	4b3e      	ldr	r3, [pc, #248]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c34:	4939      	ldr	r1, [pc, #228]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006c3c:	e003      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c42:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006c52:	60bb      	str	r3, [r7, #8]
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	d03a      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c6e:	d00e      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c74:	d815      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d017      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006c7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c7e:	d110      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c80:	4b26      	ldr	r3, [pc, #152]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	4a25      	ldr	r2, [pc, #148]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006c8c:	e00e      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c92:	3308      	adds	r3, #8
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 fd9d 	bl	80087d4 <RCCEx_PLL2_Config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006ca0:	e004      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006caa:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006cac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10d      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006cb4:	4b19      	ldr	r3, [pc, #100]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc6:	4915      	ldr	r1, [pc, #84]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006cce:	e003      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006cd4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006ce4:	603b      	str	r3, [r7, #0]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	d00c      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cfa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d06:	4905      	ldr	r1, [pc, #20]	; (8006d1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006d0e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	37e8      	adds	r7, #232	; 0xe8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d1c:	46020c00 	.word	0x46020c00

08006d20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006d28:	4bac      	ldr	r3, [pc, #688]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d30:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006d32:	4baa      	ldr	r3, [pc, #680]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d36:	f003 0303 	and.w	r3, r3, #3
 8006d3a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006d3c:	4ba7      	ldr	r3, [pc, #668]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	0a1b      	lsrs	r3, r3, #8
 8006d42:	f003 030f 	and.w	r3, r3, #15
 8006d46:	3301      	adds	r3, #1
 8006d48:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006d4a:	4ba4      	ldr	r3, [pc, #656]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d54:	4ba1      	ldr	r3, [pc, #644]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	08db      	lsrs	r3, r3, #3
 8006d5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	ee07 3a90 	vmov	s15, r3
 8006d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8123 	beq.w	8006fbe <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d062      	beq.n	8006e44 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	f200 8081 	bhi.w	8006e88 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d024      	beq.n	8006dd6 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d17a      	bne.n	8006e88 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	ee07 3a90 	vmov	s15, r3
 8006d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da4:	4b8d      	ldr	r3, [pc, #564]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006db4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006db8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd4:	e08f      	b.n	8006ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006dd6:	4b81      	ldr	r3, [pc, #516]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006de2:	4b7e      	ldr	r3, [pc, #504]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	0f1b      	lsrs	r3, r3, #28
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	e006      	b.n	8006dfc <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006dee:	4b7b      	ldr	r3, [pc, #492]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006df4:	041b      	lsls	r3, r3, #16
 8006df6:	0f1b      	lsrs	r3, r3, #28
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	4a7a      	ldr	r2, [pc, #488]	; (8006fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	ee07 3a90 	vmov	s15, r3
 8006e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e26:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e42:	e058      	b.n	8006ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e4e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e56:	4b61      	ldr	r3, [pc, #388]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e6a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e86:	e036      	b.n	8006ef6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e88:	4b54      	ldr	r3, [pc, #336]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006e94:	4b51      	ldr	r3, [pc, #324]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	0f1b      	lsrs	r3, r3, #28
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	e006      	b.n	8006eae <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006ea0:	4b4e      	ldr	r3, [pc, #312]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ea2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ea6:	041b      	lsls	r3, r3, #16
 8006ea8:	0f1b      	lsrs	r3, r3, #28
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	4a4e      	ldr	r2, [pc, #312]	; (8006fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ef4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006ef6:	4b39      	ldr	r3, [pc, #228]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d017      	beq.n	8006f32 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f02:	4b36      	ldr	r3, [pc, #216]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f06:	0a5b      	lsrs	r3, r3, #9
 8006f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f18:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f28:	ee17 2a90 	vmov	r2, s15
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	e002      	b.n	8006f38 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006f38:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d017      	beq.n	8006f74 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f44:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f6a:	ee17 2a90 	vmov	r2, s15
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]
 8006f72:	e002      	b.n	8006f7a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006f7a:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d017      	beq.n	8006fb6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f86:	4b15      	ldr	r3, [pc, #84]	; (8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	0e1b      	lsrs	r3, r3, #24
 8006f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f90:	ee07 3a90 	vmov	s15, r3
 8006f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006f98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f9c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fac:	ee17 2a90 	vmov	r2, s15
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006fb4:	e00c      	b.n	8006fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	609a      	str	r2, [r3, #8]
}
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	609a      	str	r2, [r3, #8]
}
 8006fd0:	bf00      	nop
 8006fd2:	3724      	adds	r7, #36	; 0x24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	46020c00 	.word	0x46020c00
 8006fe0:	4b742400 	.word	0x4b742400
 8006fe4:	46000000 	.word	0x46000000
 8006fe8:	0800d17c 	.word	0x0800d17c

08006fec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b089      	sub	sp, #36	; 0x24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006ff4:	4bac      	ldr	r3, [pc, #688]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006ffe:	4baa      	ldr	r3, [pc, #680]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007008:	4ba7      	ldr	r3, [pc, #668]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	0a1b      	lsrs	r3, r3, #8
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	3301      	adds	r3, #1
 8007014:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007016:	4ba4      	ldr	r3, [pc, #656]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	f003 0310 	and.w	r3, r3, #16
 800701e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007020:	4ba1      	ldr	r3, [pc, #644]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	ee07 3a90 	vmov	s15, r3
 8007034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007038:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8123 	beq.w	800728a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d062      	beq.n	8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b03      	cmp	r3, #3
 800704e:	f200 8081 	bhi.w	8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d024      	beq.n	80070a2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b02      	cmp	r3, #2
 800705c:	d17a      	bne.n	8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	ee07 3a90 	vmov	s15, r3
 8007064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007068:	eddf 6a90 	vldr	s13, [pc, #576]	; 80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800706c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007070:	4b8d      	ldr	r3, [pc, #564]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007078:	ee07 3a90 	vmov	s15, r3
 800707c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007080:	ed97 6a02 	vldr	s12, [r7, #8]
 8007084:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007088:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800708c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007094:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070a0:	e08f      	b.n	80071c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80070a2:	4b81      	ldr	r3, [pc, #516]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d005      	beq.n	80070ba <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80070ae:	4b7e      	ldr	r3, [pc, #504]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	0f1b      	lsrs	r3, r3, #28
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	e006      	b.n	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80070ba:	4b7b      	ldr	r3, [pc, #492]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	0f1b      	lsrs	r3, r3, #28
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	4a7a      	ldr	r2, [pc, #488]	; (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80070ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	ee07 3a90 	vmov	s15, r3
 80070dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800710e:	e058      	b.n	80071c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b61      	ldr	r3, [pc, #388]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007132:	ed97 6a02 	vldr	s12, [r7, #8]
 8007136:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007152:	e036      	b.n	80071c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007154:	4b54      	ldr	r3, [pc, #336]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8007160:	4b51      	ldr	r3, [pc, #324]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	0f1b      	lsrs	r3, r3, #28
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	e006      	b.n	800717a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800716c:	4b4e      	ldr	r3, [pc, #312]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800716e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	0f1b      	lsrs	r3, r3, #28
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	4a4e      	ldr	r2, [pc, #312]	; (80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800717c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007180:	ee07 3a90 	vmov	s15, r3
 8007184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	ee07 3a90 	vmov	s15, r3
 800719c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80071a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80071b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c0:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80071c2:	4b39      	ldr	r3, [pc, #228]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d017      	beq.n	80071fe <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80071ce:	4b36      	ldr	r3, [pc, #216]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	0a5b      	lsrs	r3, r3, #9
 80071d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80071e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80071e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f4:	ee17 2a90 	vmov	r2, s15
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	e002      	b.n	8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007204:	4b28      	ldr	r3, [pc, #160]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d017      	beq.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007210:	4b25      	ldr	r3, [pc, #148]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721a:	ee07 3a90 	vmov	s15, r3
 800721e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007226:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800722a:	edd7 6a07 	vldr	s13, [r7, #28]
 800722e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007236:	ee17 2a90 	vmov	r2, s15
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	e002      	b.n	8007246 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007246:	4b18      	ldr	r3, [pc, #96]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d017      	beq.n	8007282 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	0e1b      	lsrs	r3, r3, #24
 8007258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800725c:	ee07 3a90 	vmov	s15, r3
 8007260:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007264:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007268:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800726c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007278:	ee17 2a90 	vmov	r2, s15
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007280:	e00c      	b.n	800729c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	609a      	str	r2, [r3, #8]
}
 8007288:	e008      	b.n	800729c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	609a      	str	r2, [r3, #8]
}
 800729c:	bf00      	nop
 800729e:	3724      	adds	r7, #36	; 0x24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	46020c00 	.word	0x46020c00
 80072ac:	4b742400 	.word	0x4b742400
 80072b0:	46000000 	.word	0x46000000
 80072b4:	0800d17c 	.word	0x0800d17c

080072b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b089      	sub	sp, #36	; 0x24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80072c0:	4bac      	ldr	r3, [pc, #688]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80072ca:	4baa      	ldr	r3, [pc, #680]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ce:	f003 0303 	and.w	r3, r3, #3
 80072d2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80072d4:	4ba7      	ldr	r3, [pc, #668]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	0a1b      	lsrs	r3, r3, #8
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	3301      	adds	r3, #1
 80072e0:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80072e2:	4ba4      	ldr	r3, [pc, #656]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80072ec:	4ba1      	ldr	r3, [pc, #644]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f0:	08db      	lsrs	r3, r3, #3
 80072f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	fb02 f303 	mul.w	r3, r2, r3
 80072fc:	ee07 3a90 	vmov	s15, r3
 8007300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007304:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8123 	beq.w	8007556 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2b03      	cmp	r3, #3
 8007314:	d062      	beq.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b03      	cmp	r3, #3
 800731a:	f200 8081 	bhi.w	8007420 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d024      	beq.n	800736e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d17a      	bne.n	8007420 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	ee07 3a90 	vmov	s15, r3
 8007330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007334:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8007338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800733c:	4b8d      	ldr	r3, [pc, #564]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800734c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007350:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800757c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007354:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007358:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800735c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007360:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007368:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800736c:	e08f      	b.n	800748e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800736e:	4b81      	ldr	r3, [pc, #516]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800737a:	4b7e      	ldr	r3, [pc, #504]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	0f1b      	lsrs	r3, r3, #28
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	e006      	b.n	8007394 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8007386:	4b7b      	ldr	r3, [pc, #492]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	0f1b      	lsrs	r3, r3, #28
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	4a7a      	ldr	r2, [pc, #488]	; (8007580 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	ee07 3a90 	vmov	s15, r3
 80073a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80073be:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800757c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073da:	e058      	b.n	800748e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007578 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80073ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ee:	4b61      	ldr	r3, [pc, #388]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80073fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007402:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800757c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800740e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800741e:	e036      	b.n	800748e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007420:	4b54      	ldr	r3, [pc, #336]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800742c:	4b51      	ldr	r3, [pc, #324]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	0f1b      	lsrs	r3, r3, #28
 8007432:	f003 030f 	and.w	r3, r3, #15
 8007436:	e006      	b.n	8007446 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8007438:	4b4e      	ldr	r3, [pc, #312]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800743a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800743e:	041b      	lsls	r3, r3, #16
 8007440:	0f1b      	lsrs	r3, r3, #28
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	4a4e      	ldr	r2, [pc, #312]	; (8007580 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744c:	ee07 3a90 	vmov	s15, r3
 8007450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800745e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007470:	eddf 5a42 	vldr	s11, [pc, #264]	; 800757c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007480:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800748c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800748e:	4b39      	ldr	r3, [pc, #228]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d017      	beq.n	80074ca <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800749a:	4b36      	ldr	r3, [pc, #216]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800749c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800749e:	0a5b      	lsrs	r3, r3, #9
 80074a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a4:	ee07 3a90 	vmov	s15, r3
 80074a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80074ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80074b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c0:	ee17 2a90 	vmov	r2, s15
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e002      	b.n	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80074d0:	4b28      	ldr	r3, [pc, #160]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d017      	beq.n	800750c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80074dc:	4b25      	ldr	r3, [pc, #148]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80074de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80074ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074f2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80074f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007502:	ee17 2a90 	vmov	r2, s15
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	e002      	b.n	8007512 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007512:	4b18      	ldr	r3, [pc, #96]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d017      	beq.n	800754e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800751e:	4b15      	ldr	r3, [pc, #84]	; (8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007522:	0e1b      	lsrs	r3, r3, #24
 8007524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007534:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007538:	edd7 6a07 	vldr	s13, [r7, #28]
 800753c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007544:	ee17 2a90 	vmov	r2, s15
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800754c:	e00c      	b.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	609a      	str	r2, [r3, #8]
}
 8007554:	e008      	b.n	8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	609a      	str	r2, [r3, #8]
}
 8007568:	bf00      	nop
 800756a:	3724      	adds	r7, #36	; 0x24
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	46020c00 	.word	0x46020c00
 8007578:	4b742400 	.word	0x4b742400
 800757c:	46000000 	.word	0x46000000
 8007580:	0800d17c 	.word	0x0800d17c

08007584 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08e      	sub	sp, #56	; 0x38
 8007588:	af00      	add	r7, sp, #0
 800758a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800758e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007592:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8007596:	430b      	orrs	r3, r1
 8007598:	d145      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800759a:	4ba7      	ldr	r3, [pc, #668]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800759c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80075a6:	4ba4      	ldr	r3, [pc, #656]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d108      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ba:	d104      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80075bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c0:	637b      	str	r3, [r7, #52]	; 0x34
 80075c2:	f001 b8fc 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80075c6:	4b9c      	ldr	r3, [pc, #624]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d4:	d114      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075dc:	d110      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075de:	4b96      	ldr	r3, [pc, #600]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075ec:	d103      	bne.n	80075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80075ee:	23fa      	movs	r3, #250	; 0xfa
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075f2:	f001 b8e4 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80075f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075fc:	f001 b8df 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007600:	4b8d      	ldr	r3, [pc, #564]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800760c:	d107      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007614:	d103      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8007616:	4b89      	ldr	r3, [pc, #548]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
 800761a:	f001 b8d0 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
 8007622:	f001 b8cc 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800762a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800762e:	430b      	orrs	r3, r1
 8007630:	d151      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007632:	4b81      	ldr	r3, [pc, #516]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007634:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007638:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800763c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	2b80      	cmp	r3, #128	; 0x80
 8007642:	d035      	beq.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	2b80      	cmp	r3, #128	; 0x80
 8007648:	d841      	bhi.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2b60      	cmp	r3, #96	; 0x60
 800764e:	d02a      	beq.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	2b60      	cmp	r3, #96	; 0x60
 8007654:	d83b      	bhi.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d009      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d835      	bhi.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00c      	beq.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	2b20      	cmp	r3, #32
 800766c:	d012      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800766e:	e02e      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fb53 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800767e:	f001 b89e 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007682:	f107 0318 	add.w	r3, r7, #24
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fcb0 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007690:	f001 b895 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007694:	f107 030c 	add.w	r3, r7, #12
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fe0d 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076a2:	f001 b88c 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80076a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80076aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ac:	f001 b887 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076b0:	4b61      	ldr	r3, [pc, #388]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076bc:	d103      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80076be:	4b60      	ldr	r3, [pc, #384]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80076c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076c2:	f001 b87c 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ca:	f001 b878 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076d2:	f001 b874 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80076d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076da:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80076de:	430b      	orrs	r3, r1
 80076e0:	d158      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80076e2:	4b55      	ldr	r3, [pc, #340]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80076e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076ec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f4:	d03b      	beq.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076fc:	d846      	bhi.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007704:	d02e      	beq.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770c:	d83e      	bhi.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007714:	d00b      	beq.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771c:	d836      	bhi.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00d      	beq.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772a:	d012      	beq.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800772c:	e02e      	b.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800772e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff faf4 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800773c:	f001 b83f 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007740:	f107 0318 	add.w	r3, r7, #24
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff fc51 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800774e:	f001 b836 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007752:	f107 030c 	add.w	r3, r7, #12
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff fdae 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007760:	f001 b82d 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007764:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800776a:	f001 b828 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800776e:	4b32      	ldr	r3, [pc, #200]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777a:	d103      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800777c:	4b30      	ldr	r3, [pc, #192]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007780:	f001 b81d 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007788:	f001 b819 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007790:	f001 b815 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007798:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800779c:	430b      	orrs	r3, r1
 800779e:	d126      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80077a0:	4b25      	ldr	r3, [pc, #148]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80077a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077aa:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80077ac:	4b22      	ldr	r3, [pc, #136]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b8:	d106      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80077c0:	4b1f      	ldr	r3, [pc, #124]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
 80077c4:	f000 bffb 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80077c8:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d4:	d107      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077dc:	d103      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80077de:	4b19      	ldr	r3, [pc, #100]	; (8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80077e0:	637b      	str	r3, [r7, #52]	; 0x34
 80077e2:	f000 bfec 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ea:	f000 bfe8 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80077ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80077f6:	430b      	orrs	r3, r1
 80077f8:	d164      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007800:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007804:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800780c:	d03d      	beq.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007814:	d852      	bhi.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800781c:	d014      	beq.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007824:	d84a      	bhi.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01f      	beq.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007832:	d012      	beq.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007834:	e042      	b.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007836:	bf00      	nop
 8007838:	46020c00 	.word	0x46020c00
 800783c:	0007a120 	.word	0x0007a120
 8007840:	00f42400 	.word	0x00f42400
 8007844:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fa67 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007856:	f000 bfb2 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800785a:	f107 0318 	add.w	r3, r7, #24
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff fbc4 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007868:	f000 bfa9 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800786c:	4bab      	ldr	r3, [pc, #684]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007878:	d103      	bne.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800787a:	4ba9      	ldr	r3, [pc, #676]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800787e:	f000 bf9e 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007886:	f000 bf9a 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800788a:	4ba4      	ldr	r3, [pc, #656]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007896:	4ba1      	ldr	r3, [pc, #644]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	0e1b      	lsrs	r3, r3, #24
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	e006      	b.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80078a2:	4b9e      	ldr	r3, [pc, #632]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078a8:	041b      	lsls	r3, r3, #16
 80078aa:	0e1b      	lsrs	r3, r3, #24
 80078ac:	f003 030f 	and.w	r3, r3, #15
 80078b0:	4a9c      	ldr	r2, [pc, #624]	; (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80078b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078b8:	f000 bf81 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078c0:	f000 bf7d 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80078c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80078cc:	430b      	orrs	r3, r1
 80078ce:	d175      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80078d0:	4b92      	ldr	r3, [pc, #584]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80078d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078da:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d15b      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80078e2:	4b8e      	ldr	r3, [pc, #568]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078e8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80078ec:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80078f4:	d034      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80078fc:	d849      	bhi.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007904:	d00b      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800790c:	d841      	bhi.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	2b00      	cmp	r3, #0
 8007912:	d016      	beq.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800791a:	d009      	beq.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800791c:	e039      	b.n	8007992 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800791e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff f9fc 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800792c:	f000 bf47 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007930:	f107 0318 	add.w	r3, r7, #24
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff fb59 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800793e:	f000 bf3e 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007942:	4b76      	ldr	r3, [pc, #472]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794e:	d103      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007950:	4b73      	ldr	r3, [pc, #460]	; (8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007954:	f000 bf33 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800795c:	f000 bf2f 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007960:	4b6e      	ldr	r3, [pc, #440]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800796c:	4b6b      	ldr	r3, [pc, #428]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	0e1b      	lsrs	r3, r3, #24
 8007972:	f003 030f 	and.w	r3, r3, #15
 8007976:	e006      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8007978:	4b68      	ldr	r3, [pc, #416]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800797a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800797e:	041b      	lsls	r3, r3, #16
 8007980:	0e1b      	lsrs	r3, r3, #24
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	4a67      	ldr	r2, [pc, #412]	; (8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800798c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800798e:	f000 bf16 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007996:	f000 bf12 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079a0:	d108      	bne.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff f9ba 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	637b      	str	r3, [r7, #52]	; 0x34
 80079b0:	f000 bf05 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34
 80079b8:	f000 bf01 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80079bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079c0:	1e51      	subs	r1, r2, #1
 80079c2:	430b      	orrs	r3, r1
 80079c4:	d136      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80079c6:	4b55      	ldr	r3, [pc, #340]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079cc:	f003 0303 	and.w	r3, r3, #3
 80079d0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80079d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d104      	bne.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80079d8:	f7fe fb34 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 80079dc:	6378      	str	r0, [r7, #52]	; 0x34
 80079de:	f000 beee 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d104      	bne.n	80079f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079e8:	f7fe f9f6 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 80079ec:	6378      	str	r0, [r7, #52]	; 0x34
 80079ee:	f000 bee6 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80079f2:	4b4a      	ldr	r3, [pc, #296]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fe:	d106      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d103      	bne.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8007a06:	4b48      	ldr	r3, [pc, #288]	; (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0a:	f000 bed8 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007a0e:	4b43      	ldr	r3, [pc, #268]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d107      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	2b03      	cmp	r3, #3
 8007a20:	d104      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8007a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
 8007a28:	f000 bec9 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a30:	f000 bec5 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a38:	1e91      	subs	r1, r2, #2
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	d136      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007a3e:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a44:	f003 030c 	and.w	r3, r3, #12
 8007a48:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a50:	f7fe fae4 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007a54:	6378      	str	r0, [r7, #52]	; 0x34
 8007a56:	f000 beb2 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d104      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a60:	f7fe f9ba 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8007a64:	6378      	str	r0, [r7, #52]	; 0x34
 8007a66:	f000 beaa 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007a6a:	4b2c      	ldr	r3, [pc, #176]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a76:	d106      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d103      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8007a7e:	4b2a      	ldr	r3, [pc, #168]	; (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
 8007a82:	f000 be9c 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007a86:	4b25      	ldr	r3, [pc, #148]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d107      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	2b0c      	cmp	r3, #12
 8007a98:	d104      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8007a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa0:	f000 be8d 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa8:	f000 be89 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab0:	1f11      	subs	r1, r2, #4
 8007ab2:	430b      	orrs	r3, r1
 8007ab4:	d13e      	bne.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007ab6:	4b19      	ldr	r3, [pc, #100]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007abc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ac0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ac8:	f7fe faa8 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007acc:	6378      	str	r0, [r7, #52]	; 0x34
 8007ace:	f000 be76 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	2b10      	cmp	r3, #16
 8007ad6:	d104      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007ad8:	f7fe f97e 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8007adc:	6378      	str	r0, [r7, #52]	; 0x34
 8007ade:	f000 be6e 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007ae2:	4b0e      	ldr	r3, [pc, #56]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aee:	d106      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	2b20      	cmp	r3, #32
 8007af4:	d103      	bne.n	8007afe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
 8007afa:	f000 be60 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d10f      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	2b30      	cmp	r3, #48	; 0x30
 8007b10:	d10c      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8007b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b16:	637b      	str	r3, [r7, #52]	; 0x34
 8007b18:	f000 be51 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007b1c:	46020c00 	.word	0x46020c00
 8007b20:	02dc6c00 	.word	0x02dc6c00
 8007b24:	0800d17c 	.word	0x0800d17c
 8007b28:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b30:	f000 be45 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b38:	f1a2 0108 	sub.w	r1, r2, #8
 8007b3c:	430b      	orrs	r3, r1
 8007b3e:	d136      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007b40:	4b9f      	ldr	r3, [pc, #636]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b4a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d104      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b52:	f7fe fa63 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007b56:	6378      	str	r0, [r7, #52]	; 0x34
 8007b58:	f000 be31 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	d104      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b62:	f7fe f939 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8007b66:	6378      	str	r0, [r7, #52]	; 0x34
 8007b68:	f000 be29 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007b6c:	4b94      	ldr	r3, [pc, #592]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b78:	d106      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	2b80      	cmp	r3, #128	; 0x80
 8007b7e:	d103      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007b80:	4b90      	ldr	r3, [pc, #576]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
 8007b84:	f000 be1b 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007b88:	4b8d      	ldr	r3, [pc, #564]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d107      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8007b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b98:	2bc0      	cmp	r3, #192	; 0xc0
 8007b9a:	d104      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba2:	f000 be0c 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8007baa:	f000 be08 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb2:	f1a2 0110 	sub.w	r1, r2, #16
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	d139      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007bba:	4b81      	ldr	r3, [pc, #516]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007bcc:	f7fe fa26 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007bd0:	6378      	str	r0, [r7, #52]	; 0x34
 8007bd2:	f000 bdf4 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bdc:	d104      	bne.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bde:	f7fe f8fb 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8007be2:	6378      	str	r0, [r7, #52]	; 0x34
 8007be4:	f000 bdeb 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007be8:	4b75      	ldr	r3, [pc, #468]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bf4:	d107      	bne.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bfc:	d103      	bne.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007bfe:	4b71      	ldr	r3, [pc, #452]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
 8007c02:	f000 bddc 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007c06:	4b6e      	ldr	r3, [pc, #440]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d108      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c1a:	d104      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c20:	637b      	str	r3, [r7, #52]	; 0x34
 8007c22:	f000 bdcc 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2a:	f000 bdc8 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007c2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c32:	f1a2 0120 	sub.w	r1, r2, #32
 8007c36:	430b      	orrs	r3, r1
 8007c38:	d158      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007c3a:	4b61      	ldr	r3, [pc, #388]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007c4c:	f7fe fa0e 	bl	800606c <HAL_RCC_GetPCLK3Freq>
 8007c50:	6378      	str	r0, [r7, #52]	; 0x34
 8007c52:	f000 bdb4 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d104      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c5c:	f7fe f8bc 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8007c60:	6378      	str	r0, [r7, #52]	; 0x34
 8007c62:	f000 bdac 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007c66:	4b56      	ldr	r3, [pc, #344]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c72:	d106      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d103      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007c7a:	4b52      	ldr	r3, [pc, #328]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7e:	f000 bd9e 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007c82:	4b4f      	ldr	r3, [pc, #316]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d107      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d104      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8007c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	f000 bd8f 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007ca0:	4b47      	ldr	r3, [pc, #284]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0320 	and.w	r3, r3, #32
 8007ca8:	2b20      	cmp	r3, #32
 8007caa:	d11b      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	d118      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cb2:	4b43      	ldr	r3, [pc, #268]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007cbe:	4b40      	ldr	r3, [pc, #256]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	0e1b      	lsrs	r3, r3, #24
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	e006      	b.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007cca:	4b3d      	ldr	r3, [pc, #244]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ccc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007cd0:	041b      	lsls	r3, r3, #16
 8007cd2:	0e1b      	lsrs	r3, r3, #24
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	4a3b      	ldr	r2, [pc, #236]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cde:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce0:	f000 bd6d 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ce8:	f000 bd69 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	d169      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007cf8:	4b31      	ldr	r3, [pc, #196]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007cfe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d02:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0a:	d104      	bne.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d0c:	f7fe f864 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8007d10:	6378      	str	r0, [r7, #52]	; 0x34
 8007d12:	f000 bd54 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1c:	d108      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d1e:	f107 0318 	add.w	r3, r7, #24
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff f962 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d2c:	f000 bd47 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d104      	bne.n	8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007d36:	f7fe f957 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8007d3a:	6378      	str	r0, [r7, #52]	; 0x34
 8007d3c:	f000 bd3f 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007d46:	d118      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007d48:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007d54:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	0f1b      	lsrs	r3, r3, #28
 8007d5a:	f003 030f 	and.w	r3, r3, #15
 8007d5e:	e006      	b.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007d60:	4b17      	ldr	r3, [pc, #92]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	0f1b      	lsrs	r3, r3, #28
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	4a16      	ldr	r2, [pc, #88]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
 8007d76:	f000 bd22 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007d7a:	4b11      	ldr	r3, [pc, #68]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d86:	d107      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d8e:	d103      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007d90:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d92:	637b      	str	r3, [r7, #52]	; 0x34
 8007d94:	f000 bd13 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007d98:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da4:	d107      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dac:	d103      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007db0:	637b      	str	r3, [r7, #52]	; 0x34
 8007db2:	f000 bd04 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dba:	f000 bd00 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007dbe:	bf00      	nop
 8007dc0:	46020c00 	.word	0x46020c00
 8007dc4:	00f42400 	.word	0x00f42400
 8007dc8:	0800d17c 	.word	0x0800d17c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007dd4:	430b      	orrs	r3, r1
 8007dd6:	d14e      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007dd8:	4ba8      	ldr	r3, [pc, #672]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007dda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007dde:	f003 0307 	and.w	r3, r3, #7
 8007de2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	d841      	bhi.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e29 	.word	0x08007e29
 8007df4:	08007e05 	.word	0x08007e05
 8007df8:	08007e17 	.word	0x08007e17
 8007dfc:	08007e33 	.word	0x08007e33
 8007e00:	08007e3d 	.word	0x08007e3d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe ff89 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e12:	f000 bcd4 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7ff fa4c 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e24:	f000 bccb 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007e28:	f7fe f8de 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8007e2c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007e2e:	f000 bcc6 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e38:	f000 bcc1 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e3c:	4b8f      	ldr	r3, [pc, #572]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007e48:	4b8c      	ldr	r3, [pc, #560]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	0e1b      	lsrs	r3, r3, #24
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	e006      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007e54:	4b89      	ldr	r3, [pc, #548]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e5a:	041b      	lsls	r3, r3, #16
 8007e5c:	0e1b      	lsrs	r3, r3, #24
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	4a87      	ldr	r2, [pc, #540]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e6a:	f000 bca8 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e72:	f000 bca4 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e7a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	d15d      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007e82:	4b7e      	ldr	r3, [pc, #504]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e88:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007e8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e94:	d036      	beq.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e9c:	d84b      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ea4:	d029      	beq.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eac:	d843      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eb4:	d013      	beq.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ebc:	d83b      	bhi.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d015      	beq.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eca:	d134      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe ff25 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007eda:	f000 bc70 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ede:	f107 030c 	add.w	r3, r7, #12
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff f9e8 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007eec:	f000 bc67 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007ef0:	f7fe f87a 	bl	8005fe8 <HAL_RCC_GetHCLKFreq>
 8007ef4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007ef6:	f000 bc62 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007efa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f00:	f000 bc5d 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f04:	4b5d      	ldr	r3, [pc, #372]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007f10:	4b5a      	ldr	r3, [pc, #360]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	0e1b      	lsrs	r3, r3, #24
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	e006      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007f1c:	4b57      	ldr	r3, [pc, #348]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	0e1b      	lsrs	r3, r3, #24
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	4a55      	ldr	r2, [pc, #340]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f32:	f000 bc44 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f3a:	f000 bc40 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f42:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007f46:	430b      	orrs	r3, r1
 8007f48:	d14a      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007f4a:	4b4c      	ldr	r3, [pc, #304]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f54:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f5c:	f7fe f85e 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8007f60:	6378      	str	r0, [r7, #52]	; 0x34
 8007f62:	f000 bc2c 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6c:	d104      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007f6e:	f7fd ff33 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8007f72:	6378      	str	r0, [r7, #52]	; 0x34
 8007f74:	f000 bc23 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007f78:	4b40      	ldr	r3, [pc, #256]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f84:	d107      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f8c:	d103      	bne.n	8007f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007f8e:	4b3d      	ldr	r3, [pc, #244]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34
 8007f92:	f000 bc14 	b.w	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007f96:	4b39      	ldr	r3, [pc, #228]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d11b      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fa8:	d117      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007faa:	4b34      	ldr	r3, [pc, #208]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007fb6:	4b31      	ldr	r3, [pc, #196]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	0e1b      	lsrs	r3, r3, #24
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	e006      	b.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007fc2:	4b2e      	ldr	r3, [pc, #184]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fc8:	041b      	lsls	r3, r3, #16
 8007fca:	0e1b      	lsrs	r3, r3, #24
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	4a2b      	ldr	r2, [pc, #172]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	e3f1      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fde:	e3ee      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	d14d      	bne.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007fec:	4b23      	ldr	r3, [pc, #140]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ff2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ff6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d103      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ffe:	f7fe f80d 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008002:	6378      	str	r0, [r7, #52]	; 0x34
 8008004:	e3db      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800c:	d103      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800800e:	f7fd fee3 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8008012:	6378      	str	r0, [r7, #52]	; 0x34
 8008014:	e3d3      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008016:	4b19      	ldr	r3, [pc, #100]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800801e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008022:	d106      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800802a:	d102      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800802c:	4b15      	ldr	r3, [pc, #84]	; (8008084 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
 8008030:	e3c5      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b20      	cmp	r3, #32
 800803c:	d11b      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008044:	d117      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008046:	4b0d      	ldr	r3, [pc, #52]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	0e1b      	lsrs	r3, r3, #24
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	e006      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800805e:	4b07      	ldr	r3, [pc, #28]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008064:	041b      	lsls	r3, r3, #16
 8008066:	0e1b      	lsrs	r3, r3, #24
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	4a04      	ldr	r2, [pc, #16]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800806e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008072:	637b      	str	r3, [r7, #52]	; 0x34
 8008074:	e3a3      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
 800807a:	e3a0      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800807c:	46020c00 	.word	0x46020c00
 8008080:	0800d17c 	.word	0x0800d17c
 8008084:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008090:	430b      	orrs	r3, r1
 8008092:	d148      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008094:	4b9d      	ldr	r3, [pc, #628]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008096:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800809a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800809e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	2bc0      	cmp	r3, #192	; 0xc0
 80080a4:	d024      	beq.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	2bc0      	cmp	r3, #192	; 0xc0
 80080aa:	d839      	bhi.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	2b80      	cmp	r3, #128	; 0x80
 80080b0:	d00d      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b80      	cmp	r3, #128	; 0x80
 80080b6:	d833      	bhi.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	2b40      	cmp	r3, #64	; 0x40
 80080c2:	d011      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80080c4:	e02c      	b.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80080c6:	f7fd ffd1 	bl	800606c <HAL_RCC_GetPCLK3Freq>
 80080ca:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80080cc:	e377      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080ce:	4b8f      	ldr	r3, [pc, #572]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080da:	d102      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80080dc:	4b8c      	ldr	r3, [pc, #560]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80080de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080e0:	e36d      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080e6:	e36a      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80080e8:	f7fd fe76 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 80080ec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80080ee:	e366      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80080f0:	4b86      	ldr	r3, [pc, #536]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80080fc:	4b83      	ldr	r3, [pc, #524]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	0f1b      	lsrs	r3, r3, #28
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	e006      	b.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8008108:	4b80      	ldr	r3, [pc, #512]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800810a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	0f1b      	lsrs	r3, r3, #28
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	4a7f      	ldr	r2, [pc, #508]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8008118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800811e:	e34e      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008124:	e34b      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800812a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800812e:	430b      	orrs	r3, r1
 8008130:	d147      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008132:	4b76      	ldr	r3, [pc, #472]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800813c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	2b00      	cmp	r3, #0
 8008142:	d103      	bne.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008144:	f7fd ff6a 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008148:	6378      	str	r0, [r7, #52]	; 0x34
 800814a:	e338      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008152:	d103      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008154:	f7fd fe40 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8008158:	6378      	str	r0, [r7, #52]	; 0x34
 800815a:	e330      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800815c:	4b6b      	ldr	r3, [pc, #428]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008168:	d106      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008170:	d102      	bne.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8008172:	4b67      	ldr	r3, [pc, #412]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
 8008176:	e322      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008178:	4b64      	ldr	r3, [pc, #400]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b20      	cmp	r3, #32
 8008182:	d11b      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8008184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008186:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800818a:	d117      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800818c:	4b5f      	ldr	r3, [pc, #380]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8008198:	4b5c      	ldr	r3, [pc, #368]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	0e1b      	lsrs	r3, r3, #24
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	e006      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80081a4:	4b59      	ldr	r3, [pc, #356]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	0e1b      	lsrs	r3, r3, #24
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	4a58      	ldr	r2, [pc, #352]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80081b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
 80081ba:	e300      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	; 0x34
 80081c0:	e2fd      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80081c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80081ca:	430b      	orrs	r3, r1
 80081cc:	d15b      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80081ce:	4b4f      	ldr	r3, [pc, #316]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80081da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d117      	bne.n	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081e0:	4b4a      	ldr	r3, [pc, #296]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80081ec:	4b47      	ldr	r3, [pc, #284]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	0e1b      	lsrs	r3, r3, #24
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	e006      	b.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 80081f8:	4b44      	ldr	r3, [pc, #272]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	0e1b      	lsrs	r3, r3, #24
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	4a43      	ldr	r2, [pc, #268]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8008208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800820c:	637b      	str	r3, [r7, #52]	; 0x34
 800820e:	e2d6      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008210:	4b3e      	ldr	r3, [pc, #248]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800821a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800821e:	d112      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008226:	d10e      	bne.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008228:	4b38      	ldr	r3, [pc, #224]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800822a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800822e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008236:	d102      	bne.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8008238:	23fa      	movs	r3, #250	; 0xfa
 800823a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800823c:	e2bf      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800823e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008242:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008244:	e2bb      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008246:	4b31      	ldr	r3, [pc, #196]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800824e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008252:	d106      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825a:	d102      	bne.n	8008262 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 800825c:	4b2c      	ldr	r3, [pc, #176]	; (8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800825e:	637b      	str	r3, [r7, #52]	; 0x34
 8008260:	e2ad      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008262:	4b2a      	ldr	r3, [pc, #168]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b02      	cmp	r3, #2
 800826e:	d107      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008276:	d103      	bne.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8008278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
 800827e:	e29e      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	637b      	str	r3, [r7, #52]	; 0x34
 8008284:	e29b      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800828e:	430b      	orrs	r3, r1
 8008290:	d162      	bne.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008292:	4b1e      	ldr	r3, [pc, #120]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800829c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d117      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082a4:	4b19      	ldr	r3, [pc, #100]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80082b0:	4b16      	ldr	r3, [pc, #88]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	0e1b      	lsrs	r3, r3, #24
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	e006      	b.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80082bc:	4b13      	ldr	r3, [pc, #76]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082c2:	041b      	lsls	r3, r3, #16
 80082c4:	0e1b      	lsrs	r3, r3, #24
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	4a12      	ldr	r2, [pc, #72]	; (8008314 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80082cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
 80082d2:	e274      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80082d4:	4b0d      	ldr	r3, [pc, #52]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082e2:	d119      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ea:	d115      	bne.n	8008318 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80082ec:	4b07      	ldr	r3, [pc, #28]	; (800830c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082fa:	d102      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 80082fc:	23fa      	movs	r3, #250	; 0xfa
 80082fe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008300:	e25d      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008302:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008306:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008308:	e259      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800830a:	bf00      	nop
 800830c:	46020c00 	.word	0x46020c00
 8008310:	00f42400 	.word	0x00f42400
 8008314:	0800d17c 	.word	0x0800d17c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008318:	4b9d      	ldr	r3, [pc, #628]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008324:	d106      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832c:	d102      	bne.n	8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800832e:	4b99      	ldr	r3, [pc, #612]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
 8008332:	e244      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008334:	4b96      	ldr	r3, [pc, #600]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800833a:	f003 0302 	and.w	r3, r3, #2
 800833e:	2b02      	cmp	r3, #2
 8008340:	d107      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008348:	d103      	bne.n	8008352 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800834a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800834e:	637b      	str	r3, [r7, #52]	; 0x34
 8008350:	e235      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
 8008356:	e232      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800835c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008360:	430b      	orrs	r3, r1
 8008362:	d147      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008364:	4b8a      	ldr	r3, [pc, #552]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800836a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800836e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	2b00      	cmp	r3, #0
 8008374:	d103      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008376:	f7fd fe51 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 800837a:	6378      	str	r0, [r7, #52]	; 0x34
 800837c:	e21f      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800837e:	4b84      	ldr	r3, [pc, #528]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800838c:	d112      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008394:	d10e      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008396:	4b7e      	ldr	r3, [pc, #504]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008398:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800839c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083a4:	d102      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80083a6:	23fa      	movs	r3, #250	; 0xfa
 80083a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083aa:	e208      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80083ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083b2:	e204      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80083b4:	4b76      	ldr	r3, [pc, #472]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c0:	d106      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083c8:	d102      	bne.n	80083d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80083ca:	4b72      	ldr	r3, [pc, #456]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80083cc:	637b      	str	r3, [r7, #52]	; 0x34
 80083ce:	e1f6      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80083d0:	4b6f      	ldr	r3, [pc, #444]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80083d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d107      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80083e4:	d103      	bne.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80083e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ea:	637b      	str	r3, [r7, #52]	; 0x34
 80083ec:	e1e7      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	637b      	str	r3, [r7, #52]	; 0x34
 80083f2:	e1e4      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80083f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80083fc:	430b      	orrs	r3, r1
 80083fe:	d12d      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008400:	4b63      	ldr	r3, [pc, #396]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008406:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800840a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800840c:	4b60      	ldr	r3, [pc, #384]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008418:	d105      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008420:	4b5c      	ldr	r3, [pc, #368]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008422:	637b      	str	r3, [r7, #52]	; 0x34
 8008424:	e1cb      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800842e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fc74 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	637b      	str	r3, [r7, #52]	; 0x34
 800843c:	e1bf      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008444:	d107      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008446:	f107 0318 	add.w	r3, r7, #24
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fdce 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
 8008454:	e1b3      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	637b      	str	r3, [r7, #52]	; 0x34
 800845a:	e1b0      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800845c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008460:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008464:	430b      	orrs	r3, r1
 8008466:	d14d      	bne.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008468:	4b49      	ldr	r3, [pc, #292]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800846a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800846e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008472:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800847a:	d028      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008482:	d83c      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800848a:	d013      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008492:	d834      	bhi.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a0:	d004      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80084a2:	e02c      	b.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80084a4:	f7fd fdce 	bl	8006044 <HAL_RCC_GetPCLK2Freq>
 80084a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80084aa:	e188      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80084ac:	f7fd fc94 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 80084b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80084b2:	e184      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084b4:	4b36      	ldr	r3, [pc, #216]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c0:	d102      	bne.n	80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80084c2:	4b34      	ldr	r3, [pc, #208]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80084c4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084c6:	e17a      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084cc:	e177      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80084ce:	4b30      	ldr	r3, [pc, #192]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d005      	beq.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80084da:	4b2d      	ldr	r3, [pc, #180]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	0e1b      	lsrs	r3, r3, #24
 80084e0:	f003 030f 	and.w	r3, r3, #15
 80084e4:	e006      	b.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80084e6:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084ec:	041b      	lsls	r3, r3, #16
 80084ee:	0e1b      	lsrs	r3, r3, #24
 80084f0:	f003 030f 	and.w	r3, r3, #15
 80084f4:	4a28      	ldr	r2, [pc, #160]	; (8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80084f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084fc:	e15f      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008502:	e15c      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008508:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800850c:	430b      	orrs	r3, r1
 800850e:	d154      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008510:	4b1f      	ldr	r3, [pc, #124]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008516:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800851a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008522:	d028      	beq.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800852a:	d843      	bhi.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008532:	d013      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800853a:	d83b      	bhi.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008548:	d004      	beq.n	8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800854a:	e033      	b.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800854c:	f7fd fd66 	bl	800601c <HAL_RCC_GetPCLK1Freq>
 8008550:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008552:	e134      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008554:	f7fd fc40 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8008558:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800855a:	e130      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800855c:	4b0c      	ldr	r3, [pc, #48]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008568:	d102      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800856a:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800856e:	e126      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008574:	e123      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008576:	4b06      	ldr	r3, [pc, #24]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00c      	beq.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8008582:	4b03      	ldr	r3, [pc, #12]	; (8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	0e1b      	lsrs	r3, r3, #24
 8008588:	f003 030f 	and.w	r3, r3, #15
 800858c:	e00d      	b.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 800858e:	bf00      	nop
 8008590:	46020c00 	.word	0x46020c00
 8008594:	00f42400 	.word	0x00f42400
 8008598:	0800d17c 	.word	0x0800d17c
 800859c:	4b8a      	ldr	r3, [pc, #552]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800859e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	0e1b      	lsrs	r3, r3, #24
 80085a6:	f003 030f 	and.w	r3, r3, #15
 80085aa:	4a88      	ldr	r2, [pc, #544]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80085ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085b2:	e104      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085b8:	e101      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80085ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085be:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80085c2:	430b      	orrs	r3, r1
 80085c4:	d16e      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80085c6:	4b80      	ldr	r3, [pc, #512]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80085c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80085cc:	f003 0318 	and.w	r3, r3, #24
 80085d0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	2b18      	cmp	r3, #24
 80085d6:	d862      	bhi.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80085d8:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	08008645 	.word	0x08008645
 80085e4:	0800869f 	.word	0x0800869f
 80085e8:	0800869f 	.word	0x0800869f
 80085ec:	0800869f 	.word	0x0800869f
 80085f0:	0800869f 	.word	0x0800869f
 80085f4:	0800869f 	.word	0x0800869f
 80085f8:	0800869f 	.word	0x0800869f
 80085fc:	0800869f 	.word	0x0800869f
 8008600:	0800864d 	.word	0x0800864d
 8008604:	0800869f 	.word	0x0800869f
 8008608:	0800869f 	.word	0x0800869f
 800860c:	0800869f 	.word	0x0800869f
 8008610:	0800869f 	.word	0x0800869f
 8008614:	0800869f 	.word	0x0800869f
 8008618:	0800869f 	.word	0x0800869f
 800861c:	0800869f 	.word	0x0800869f
 8008620:	08008655 	.word	0x08008655
 8008624:	0800869f 	.word	0x0800869f
 8008628:	0800869f 	.word	0x0800869f
 800862c:	0800869f 	.word	0x0800869f
 8008630:	0800869f 	.word	0x0800869f
 8008634:	0800869f 	.word	0x0800869f
 8008638:	0800869f 	.word	0x0800869f
 800863c:	0800869f 	.word	0x0800869f
 8008640:	0800866f 	.word	0x0800866f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008644:	f7fd fd12 	bl	800606c <HAL_RCC_GetPCLK3Freq>
 8008648:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800864a:	e0b8      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800864c:	f7fd fbc4 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8008650:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008652:	e0b4      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008654:	4b5c      	ldr	r3, [pc, #368]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800865c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008660:	d102      	bne.n	8008668 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8008662:	4b5b      	ldr	r3, [pc, #364]	; (80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008666:	e0aa      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800866c:	e0a7      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800866e:	4b56      	ldr	r3, [pc, #344]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800867a:	4b53      	ldr	r3, [pc, #332]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	0e1b      	lsrs	r3, r3, #24
 8008680:	f003 030f 	and.w	r3, r3, #15
 8008684:	e006      	b.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8008686:	4b50      	ldr	r3, [pc, #320]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800868c:	041b      	lsls	r3, r3, #16
 800868e:	0e1b      	lsrs	r3, r3, #24
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	4a4d      	ldr	r2, [pc, #308]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800869a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800869c:	e08f      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086a2:	e08c      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80086a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a8:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80086ac:	430b      	orrs	r3, r1
 80086ae:	d14c      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80086b0:	4b45      	ldr	r3, [pc, #276]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80086b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80086b6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80086ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086c2:	d013      	beq.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086ca:	d83b      	bhi.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086d2:	d013      	beq.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80086d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086da:	d833      	bhi.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d014      	beq.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e8:	d014      	beq.n	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80086ea:	e02b      	b.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ec:	f107 0318 	add.w	r3, r7, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fc7b 	bl	8006fec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086fa:	e060      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe fb0d 	bl	8006d20 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800870a:	e058      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800870c:	f7fd fb64 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8008710:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008712:	e054      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008714:	4b2c      	ldr	r3, [pc, #176]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008720:	4b29      	ldr	r3, [pc, #164]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	0e1b      	lsrs	r3, r3, #24
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	e006      	b.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 800872c:	4b26      	ldr	r3, [pc, #152]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800872e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008732:	041b      	lsls	r3, r3, #16
 8008734:	0e1b      	lsrs	r3, r3, #24
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	4a24      	ldr	r2, [pc, #144]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800873c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008742:	e03c      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008748:	e039      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800874a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008752:	430b      	orrs	r3, r1
 8008754:	d131      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8008756:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800875c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008760:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008762:	4b19      	ldr	r3, [pc, #100]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008764:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b02      	cmp	r3, #2
 800876e:	d106      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	2b00      	cmp	r3, #0
 8008774:	d103      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8008776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
 800877c:	e01f      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800878c:	d112      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008794:	d10e      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008796:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800879c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087a4:	d102      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80087a6:	23fa      	movs	r3, #250	; 0xfa
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087aa:	e008      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80087ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80087b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087b2:	e004      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	637b      	str	r3, [r7, #52]	; 0x34
 80087b8:	e001      	b.n	80087be <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80087ba:	2300      	movs	r3, #0
 80087bc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80087be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3738      	adds	r7, #56	; 0x38
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	46020c00 	.word	0x46020c00
 80087cc:	0800d17c 	.word	0x0800d17c
 80087d0:	00f42400 	.word	0x00f42400

080087d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80087dc:	4b47      	ldr	r3, [pc, #284]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a46      	ldr	r2, [pc, #280]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 80087e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80087e8:	f7f9 f9d0 	bl	8001b8c <HAL_GetTick>
 80087ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80087ee:	e008      	b.n	8008802 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087f0:	f7f9 f9cc 	bl	8001b8c <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e077      	b.n	80088f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008802:	4b3e      	ldr	r3, [pc, #248]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f0      	bne.n	80087f0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800880e:	4b3b      	ldr	r3, [pc, #236]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 8008810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008812:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	6811      	ldr	r1, [r2, #0]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6852      	ldr	r2, [r2, #4]
 8008822:	3a01      	subs	r2, #1
 8008824:	0212      	lsls	r2, r2, #8
 8008826:	430a      	orrs	r2, r1
 8008828:	4934      	ldr	r1, [pc, #208]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 800882a:	4313      	orrs	r3, r2
 800882c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800882e:	4b33      	ldr	r3, [pc, #204]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 8008830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008832:	4b33      	ldr	r3, [pc, #204]	; (8008900 <RCCEx_PLL2_Config+0x12c>)
 8008834:	4013      	ands	r3, r2
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6892      	ldr	r2, [r2, #8]
 800883a:	3a01      	subs	r2, #1
 800883c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	68d2      	ldr	r2, [r2, #12]
 8008844:	3a01      	subs	r2, #1
 8008846:	0252      	lsls	r2, r2, #9
 8008848:	b292      	uxth	r2, r2
 800884a:	4311      	orrs	r1, r2
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6912      	ldr	r2, [r2, #16]
 8008850:	3a01      	subs	r2, #1
 8008852:	0412      	lsls	r2, r2, #16
 8008854:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008858:	4311      	orrs	r1, r2
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6952      	ldr	r2, [r2, #20]
 800885e:	3a01      	subs	r2, #1
 8008860:	0612      	lsls	r2, r2, #24
 8008862:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008866:	430a      	orrs	r2, r1
 8008868:	4924      	ldr	r1, [pc, #144]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 800886a:	4313      	orrs	r3, r2
 800886c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800886e:	4b23      	ldr	r3, [pc, #140]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	f023 020c 	bic.w	r2, r3, #12
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	4920      	ldr	r1, [pc, #128]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 800887c:	4313      	orrs	r3, r2
 800887e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008880:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 8008882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	491c      	ldr	r1, [pc, #112]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 800888a:	4313      	orrs	r3, r2
 800888c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800888e:	4b1b      	ldr	r3, [pc, #108]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 8008890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008892:	4a1a      	ldr	r2, [pc, #104]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 8008894:	f023 0310 	bic.w	r3, r3, #16
 8008898:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800889a:	4b18      	ldr	r3, [pc, #96]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	69d2      	ldr	r2, [r2, #28]
 80088aa:	00d2      	lsls	r2, r2, #3
 80088ac:	4913      	ldr	r1, [pc, #76]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80088b2:	4b12      	ldr	r3, [pc, #72]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 80088b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b6:	4a11      	ldr	r2, [pc, #68]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 80088b8:	f043 0310 	orr.w	r3, r3, #16
 80088bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80088be:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a0e      	ldr	r2, [pc, #56]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 80088c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088c8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80088ca:	f7f9 f95f 	bl	8001b8c <HAL_GetTick>
 80088ce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088d0:	e008      	b.n	80088e4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088d2:	f7f9 f95b 	bl	8001b8c <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d901      	bls.n	80088e4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e006      	b.n	80088f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <RCCEx_PLL2_Config+0x128>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f0      	beq.n	80088d2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80088f0:	2300      	movs	r3, #0

}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	46020c00 	.word	0x46020c00
 8008900:	80800000 	.word	0x80800000

08008904 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800890c:	4b47      	ldr	r3, [pc, #284]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a46      	ldr	r2, [pc, #280]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 8008912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008916:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008918:	f7f9 f938 	bl	8001b8c <HAL_GetTick>
 800891c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800891e:	e008      	b.n	8008932 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008920:	f7f9 f934 	bl	8001b8c <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	2b02      	cmp	r3, #2
 800892c:	d901      	bls.n	8008932 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800892e:	2303      	movs	r3, #3
 8008930:	e077      	b.n	8008a22 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008932:	4b3e      	ldr	r3, [pc, #248]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f0      	bne.n	8008920 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800893e:	4b3b      	ldr	r3, [pc, #236]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6811      	ldr	r1, [r2, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6852      	ldr	r2, [r2, #4]
 8008952:	3a01      	subs	r2, #1
 8008954:	0212      	lsls	r2, r2, #8
 8008956:	430a      	orrs	r2, r1
 8008958:	4934      	ldr	r1, [pc, #208]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 800895a:	4313      	orrs	r3, r2
 800895c:	630b      	str	r3, [r1, #48]	; 0x30
 800895e:	4b33      	ldr	r3, [pc, #204]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 8008960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008962:	4b33      	ldr	r3, [pc, #204]	; (8008a30 <RCCEx_PLL3_Config+0x12c>)
 8008964:	4013      	ands	r3, r2
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	6892      	ldr	r2, [r2, #8]
 800896a:	3a01      	subs	r2, #1
 800896c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	68d2      	ldr	r2, [r2, #12]
 8008974:	3a01      	subs	r2, #1
 8008976:	0252      	lsls	r2, r2, #9
 8008978:	b292      	uxth	r2, r2
 800897a:	4311      	orrs	r1, r2
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	6912      	ldr	r2, [r2, #16]
 8008980:	3a01      	subs	r2, #1
 8008982:	0412      	lsls	r2, r2, #16
 8008984:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008988:	4311      	orrs	r1, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6952      	ldr	r2, [r2, #20]
 800898e:	3a01      	subs	r2, #1
 8008990:	0612      	lsls	r2, r2, #24
 8008992:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008996:	430a      	orrs	r2, r1
 8008998:	4924      	ldr	r1, [pc, #144]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 800899a:	4313      	orrs	r3, r2
 800899c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800899e:	4b23      	ldr	r3, [pc, #140]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	f023 020c 	bic.w	r2, r3, #12
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	4920      	ldr	r1, [pc, #128]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80089b0:	4b1e      	ldr	r3, [pc, #120]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	491c      	ldr	r1, [pc, #112]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80089be:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c2:	4a1a      	ldr	r2, [pc, #104]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089ca:	4b18      	ldr	r3, [pc, #96]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	69d2      	ldr	r2, [r2, #28]
 80089da:	00d2      	lsls	r2, r2, #3
 80089dc:	4913      	ldr	r1, [pc, #76]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80089e2:	4b12      	ldr	r3, [pc, #72]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e6:	4a11      	ldr	r2, [pc, #68]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089e8:	f043 0310 	orr.w	r3, r3, #16
 80089ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80089ee:	4b0f      	ldr	r3, [pc, #60]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a0e      	ldr	r2, [pc, #56]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 80089f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089fa:	f7f9 f8c7 	bl	8001b8c <HAL_GetTick>
 80089fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a00:	e008      	b.n	8008a14 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a02:	f7f9 f8c3 	bl	8001b8c <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d901      	bls.n	8008a14 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e006      	b.n	8008a22 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a14:	4b05      	ldr	r3, [pc, #20]	; (8008a2c <RCCEx_PLL3_Config+0x128>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0f0      	beq.n	8008a02 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	46020c00 	.word	0x46020c00
 8008a30:	80800000 	.word	0x80800000

08008a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e042      	b.n	8008acc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d106      	bne.n	8008a5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7f8 fe6d 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2224      	movs	r2, #36	; 0x24
 8008a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0201 	bic.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f9ca 	bl	8008e10 <UART_SetConfig>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d101      	bne.n	8008a86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e022      	b.n	8008acc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fb60 	bl	8009154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685a      	ldr	r2, [r3, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ab2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0201 	orr.w	r2, r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fbe7 	bl	8009298 <UART_CheckIdleState>
 8008aca:	4603      	mov	r3, r0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08a      	sub	sp, #40	; 0x28
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	f040 8092 	bne.w	8008c14 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <HAL_UART_Transmit+0x28>
 8008af6:	88fb      	ldrh	r3, [r7, #6]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e08a      	b.n	8008c16 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d101      	bne.n	8008b0e <HAL_UART_Transmit+0x3a>
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	e083      	b.n	8008c16 <HAL_UART_Transmit+0x142>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b20:	2b80      	cmp	r3, #128	; 0x80
 8008b22:	d107      	bne.n	8008b34 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b32:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2221      	movs	r2, #33	; 0x21
 8008b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b44:	f7f9 f822 	bl	8001b8c <HAL_GetTick>
 8008b48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	88fa      	ldrh	r2, [r7, #6]
 8008b4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b62:	d108      	bne.n	8008b76 <HAL_UART_Transmit+0xa2>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	61bb      	str	r3, [r7, #24]
 8008b74:	e003      	b.n	8008b7e <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008b86:	e02c      	b.n	8008be2 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2180      	movs	r1, #128	; 0x80
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fbcb 	bl	800932e <UART_WaitOnFlagUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e039      	b.n	8008c16 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10b      	bne.n	8008bc0 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	3302      	adds	r3, #2
 8008bbc:	61bb      	str	r3, [r7, #24]
 8008bbe:	e007      	b.n	8008bd0 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	781a      	ldrb	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1cc      	bne.n	8008b88 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2140      	movs	r1, #64	; 0x40
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fb98 	bl	800932e <UART_WaitOnFlagUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e006      	b.n	8008c16 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	e000      	b.n	8008c16 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8008c14:	2302      	movs	r3, #2
  }
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b08c      	sub	sp, #48	; 0x30
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	f040 80c0 	bne.w	8008dbe <HAL_UART_Transmit_DMA+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d002      	beq.n	8008c4a <HAL_UART_Transmit_DMA+0x2a>
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e0b8      	b.n	8008dc0 <HAL_UART_Transmit_DMA+0x1a0>
    }

    __HAL_LOCK(huart);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d101      	bne.n	8008c5c <HAL_UART_Transmit_DMA+0x3c>
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e0b1      	b.n	8008dc0 <HAL_UART_Transmit_DMA+0x1a0>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	88fa      	ldrh	r2, [r7, #6]
 8008c76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2221      	movs	r2, #33	; 0x21
 8008c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d071      	beq.n	8008d76 <HAL_UART_Transmit_DMA+0x156>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c96:	4a4c      	ldr	r2, [pc, #304]	; (8008dc8 <HAL_UART_Transmit_DMA+0x1a8>)
 8008c98:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c9e:	4a4b      	ldr	r2, [pc, #300]	; (8008dcc <HAL_UART_Transmit_DMA+0x1ac>)
 8008ca0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ca6:	4a4a      	ldr	r2, [pc, #296]	; (8008dd0 <HAL_UART_Transmit_DMA+0x1b0>)
 8008ca8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cae:	2200      	movs	r2, #0
 8008cb0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cba:	d106      	bne.n	8008cca <HAL_UART_Transmit_DMA+0xaa>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	691b      	ldr	r3, [r3, #16]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d102      	bne.n	8008cca <HAL_UART_Transmit_DMA+0xaa>
      {
        nbByte = Size * 2U;
 8008cc4:	88fb      	ldrh	r3, [r7, #6]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d02d      	beq.n	8008d34 <HAL_UART_Transmit_DMA+0x114>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d024      	beq.n	8008d2c <HAL_UART_Transmit_DMA+0x10c>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d01e      	beq.n	8008d2c <HAL_UART_Transmit_DMA+0x10c>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008cf8:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f103 0228 	add.w	r2, r3, #40	; 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fa f8f8 	bl	8002f14 <HAL_DMAEx_List_Start_IT>
 8008d24:	4603      	mov	r3, r0
 8008d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008d2a:	e012      	b.n	8008d52 <HAL_UART_Transmit_DMA+0x132>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008d32:	e00e      	b.n	8008d52 <HAL_UART_Transmit_DMA+0x132>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3328      	adds	r3, #40	; 0x28
 8008d44:	461a      	mov	r2, r3
 8008d46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d48:	f7f9 fcdb 	bl	8002702 <HAL_DMA_Start_IT>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }

      if (status != HAL_OK)
 8008d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <HAL_UART_Transmit_DMA+0x156>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2210      	movs	r2, #16
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e024      	b.n	8008dc0 <HAL_UART_Transmit_DMA+0x1a0>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2240      	movs	r2, #64	; 0x40
 8008d7c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	e853 3f00 	ldrex	r3, [r3]
 8008d94:	617b      	str	r3, [r7, #20]
   return(result);
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3308      	adds	r3, #8
 8008da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008da6:	627a      	str	r2, [r7, #36]	; 0x24
 8008da8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008daa:	6a39      	ldr	r1, [r7, #32]
 8008dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dae:	e841 2300 	strex	r3, r2, [r1]
 8008db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1e5      	bne.n	8008d86 <HAL_UART_Transmit_DMA+0x166>

    return HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e000      	b.n	8008dc0 <HAL_UART_Transmit_DMA+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8008dbe:	2302      	movs	r3, #2
  }
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3730      	adds	r7, #48	; 0x30
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	0800960d 	.word	0x0800960d
 8008dcc:	0800966d 	.word	0x0800966d
 8008dd0:	08009689 	.word	0x08009689

08008dd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e14:	b094      	sub	sp, #80	; 0x50
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	4b7e      	ldr	r3, [pc, #504]	; (8009020 <UART_SetConfig+0x210>)
 8008e26:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	431a      	orrs	r2, r3
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	431a      	orrs	r2, r3
 8008e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4977      	ldr	r1, [pc, #476]	; (8009024 <UART_SetConfig+0x214>)
 8008e48:	4019      	ands	r1, r3
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e50:	430b      	orrs	r3, r1
 8008e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	68d9      	ldr	r1, [r3, #12]
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	ea40 0301 	orr.w	r3, r0, r1
 8008e6a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	4b6a      	ldr	r3, [pc, #424]	; (8009020 <UART_SetConfig+0x210>)
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d009      	beq.n	8008e90 <UART_SetConfig+0x80>
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	4b69      	ldr	r3, [pc, #420]	; (8009028 <UART_SetConfig+0x218>)
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d004      	beq.n	8008e90 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e88:	6a1a      	ldr	r2, [r3, #32]
 8008e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008e9a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea4:	430b      	orrs	r3, r1
 8008ea6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	f023 000f 	bic.w	r0, r3, #15
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	ea40 0301 	orr.w	r3, r0, r1
 8008ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	4b59      	ldr	r3, [pc, #356]	; (800902c <UART_SetConfig+0x21c>)
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d102      	bne.n	8008ed0 <UART_SetConfig+0xc0>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ece:	e029      	b.n	8008f24 <UART_SetConfig+0x114>
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4b56      	ldr	r3, [pc, #344]	; (8009030 <UART_SetConfig+0x220>)
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d102      	bne.n	8008ee0 <UART_SetConfig+0xd0>
 8008eda:	2302      	movs	r3, #2
 8008edc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ede:	e021      	b.n	8008f24 <UART_SetConfig+0x114>
 8008ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	4b53      	ldr	r3, [pc, #332]	; (8009034 <UART_SetConfig+0x224>)
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d102      	bne.n	8008ef0 <UART_SetConfig+0xe0>
 8008eea:	2304      	movs	r3, #4
 8008eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eee:	e019      	b.n	8008f24 <UART_SetConfig+0x114>
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	4b50      	ldr	r3, [pc, #320]	; (8009038 <UART_SetConfig+0x228>)
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d102      	bne.n	8008f00 <UART_SetConfig+0xf0>
 8008efa:	2308      	movs	r3, #8
 8008efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008efe:	e011      	b.n	8008f24 <UART_SetConfig+0x114>
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	4b4d      	ldr	r3, [pc, #308]	; (800903c <UART_SetConfig+0x22c>)
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d102      	bne.n	8008f10 <UART_SetConfig+0x100>
 8008f0a:	2310      	movs	r3, #16
 8008f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f0e:	e009      	b.n	8008f24 <UART_SetConfig+0x114>
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4b42      	ldr	r3, [pc, #264]	; (8009020 <UART_SetConfig+0x210>)
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d102      	bne.n	8008f20 <UART_SetConfig+0x110>
 8008f1a:	2320      	movs	r3, #32
 8008f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f1e:	e001      	b.n	8008f24 <UART_SetConfig+0x114>
 8008f20:	2300      	movs	r3, #0
 8008f22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	4b3d      	ldr	r3, [pc, #244]	; (8009020 <UART_SetConfig+0x210>)
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d005      	beq.n	8008f3a <UART_SetConfig+0x12a>
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4b3d      	ldr	r3, [pc, #244]	; (8009028 <UART_SetConfig+0x218>)
 8008f34:	429a      	cmp	r2, r3
 8008f36:	f040 8085 	bne.w	8009044 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	623b      	str	r3, [r7, #32]
 8008f40:	627a      	str	r2, [r7, #36]	; 0x24
 8008f42:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f46:	f7fe fb1d 	bl	8007584 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f4a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80e8 	beq.w	8009124 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	4a39      	ldr	r2, [pc, #228]	; (8009040 <UART_SetConfig+0x230>)
 8008f5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f62:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	4413      	add	r3, r2
 8008f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d305      	bcc.n	8008f84 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d903      	bls.n	8008f8c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008f8a:	e048      	b.n	800901e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f8e:	2200      	movs	r2, #0
 8008f90:	61bb      	str	r3, [r7, #24]
 8008f92:	61fa      	str	r2, [r7, #28]
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	4a29      	ldr	r2, [pc, #164]	; (8009040 <UART_SetConfig+0x230>)
 8008f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	613b      	str	r3, [r7, #16]
 8008fa4:	617a      	str	r2, [r7, #20]
 8008fa6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008faa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008fae:	f7f7 fdff 	bl	8000bb0 <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	4619      	mov	r1, r3
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	f04f 0300 	mov.w	r3, #0
 8008fc2:	020b      	lsls	r3, r1, #8
 8008fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fc8:	0202      	lsls	r2, r0, #8
 8008fca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fcc:	6849      	ldr	r1, [r1, #4]
 8008fce:	0849      	lsrs	r1, r1, #1
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	eb12 0804 	adds.w	r8, r2, r4
 8008fda:	eb43 0905 	adc.w	r9, r3, r5
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	60bb      	str	r3, [r7, #8]
 8008fe6:	60fa      	str	r2, [r7, #12]
 8008fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fec:	4640      	mov	r0, r8
 8008fee:	4649      	mov	r1, r9
 8008ff0:	f7f7 fdde 	bl	8000bb0 <__aeabi_uldivmod>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009002:	d308      	bcc.n	8009016 <UART_SetConfig+0x206>
 8009004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800900a:	d204      	bcs.n	8009016 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009012:	60da      	str	r2, [r3, #12]
 8009014:	e003      	b.n	800901e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800901c:	e082      	b.n	8009124 <UART_SetConfig+0x314>
 800901e:	e081      	b.n	8009124 <UART_SetConfig+0x314>
 8009020:	46002400 	.word	0x46002400
 8009024:	cfff69f3 	.word	0xcfff69f3
 8009028:	56002400 	.word	0x56002400
 800902c:	40013800 	.word	0x40013800
 8009030:	40004400 	.word	0x40004400
 8009034:	40004800 	.word	0x40004800
 8009038:	40004c00 	.word	0x40004c00
 800903c:	40005000 	.word	0x40005000
 8009040:	0800d23c 	.word	0x0800d23c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800904c:	d13c      	bne.n	80090c8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800904e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009050:	2200      	movs	r2, #0
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	607a      	str	r2, [r7, #4]
 8009056:	e9d7 0100 	ldrd	r0, r1, [r7]
 800905a:	f7fe fa93 	bl	8007584 <HAL_RCCEx_GetPeriphCLKFreq>
 800905e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009062:	2b00      	cmp	r3, #0
 8009064:	d05e      	beq.n	8009124 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	4a39      	ldr	r2, [pc, #228]	; (8009150 <UART_SetConfig+0x340>)
 800906c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009070:	461a      	mov	r2, r3
 8009072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009074:	fbb3 f3f2 	udiv	r3, r3, r2
 8009078:	005a      	lsls	r2, r3, #1
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	441a      	add	r2, r3
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	fbb2 f3f3 	udiv	r3, r2, r3
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800908c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908e:	2b0f      	cmp	r3, #15
 8009090:	d916      	bls.n	80090c0 <UART_SetConfig+0x2b0>
 8009092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009098:	d212      	bcs.n	80090c0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800909a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909c:	b29b      	uxth	r3, r3
 800909e:	f023 030f 	bic.w	r3, r3, #15
 80090a2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a6:	085b      	lsrs	r3, r3, #1
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80090b2:	4313      	orrs	r3, r2
 80090b4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80090bc:	60da      	str	r2, [r3, #12]
 80090be:	e031      	b.n	8009124 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80090c6:	e02d      	b.n	8009124 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ca:	2200      	movs	r2, #0
 80090cc:	469a      	mov	sl, r3
 80090ce:	4693      	mov	fp, r2
 80090d0:	4650      	mov	r0, sl
 80090d2:	4659      	mov	r1, fp
 80090d4:	f7fe fa56 	bl	8007584 <HAL_RCCEx_GetPeriphCLKFreq>
 80090d8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80090da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d021      	beq.n	8009124 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	4a1a      	ldr	r2, [pc, #104]	; (8009150 <UART_SetConfig+0x340>)
 80090e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	085b      	lsrs	r3, r3, #1
 80090f8:	441a      	add	r2, r3
 80090fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009106:	2b0f      	cmp	r3, #15
 8009108:	d909      	bls.n	800911e <UART_SetConfig+0x30e>
 800910a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800910c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009110:	d205      	bcs.n	800911e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009114:	b29a      	uxth	r2, r3
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	60da      	str	r2, [r3, #12]
 800911c:	e002      	b.n	8009124 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	2201      	movs	r2, #1
 8009128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	2201      	movs	r2, #1
 8009130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009136:	2200      	movs	r2, #0
 8009138:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	2200      	movs	r2, #0
 800913e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009140:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009144:	4618      	mov	r0, r3
 8009146:	3750      	adds	r7, #80	; 0x50
 8009148:	46bd      	mov	sp, r7
 800914a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800914e:	bf00      	nop
 8009150:	0800d23c 	.word	0x0800d23c

08009154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00a      	beq.n	80091a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a4:	f003 0304 	and.w	r3, r3, #4
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00a      	beq.n	80091c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c6:	f003 0308 	and.w	r3, r3, #8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00a      	beq.n	80091e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920a:	f003 0320 	and.w	r3, r3, #32
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01a      	beq.n	800926a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009252:	d10a      	bne.n	800926a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00a      	beq.n	800928c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	430a      	orrs	r2, r1
 800928a:	605a      	str	r2, [r3, #4]
  }
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af02      	add	r7, sp, #8
 800929e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092a8:	f7f8 fc70 	bl	8001b8c <HAL_GetTick>
 80092ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0308 	and.w	r3, r3, #8
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d10e      	bne.n	80092da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f82f 	bl	800932e <UART_WaitOnFlagUntilTimeout>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e025      	b.n	8009326 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b04      	cmp	r3, #4
 80092e6:	d10e      	bne.n	8009306 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f819 	bl	800932e <UART_WaitOnFlagUntilTimeout>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e00f      	b.n	8009326 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2220      	movs	r2, #32
 8009312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b09c      	sub	sp, #112	; 0x70
 8009332:	af00      	add	r7, sp, #0
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	60b9      	str	r1, [r7, #8]
 8009338:	603b      	str	r3, [r7, #0]
 800933a:	4613      	mov	r3, r2
 800933c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800933e:	e0a9      	b.n	8009494 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009346:	f000 80a5 	beq.w	8009494 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800934a:	f7f8 fc1f 	bl	8001b8c <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009356:	429a      	cmp	r2, r3
 8009358:	d302      	bcc.n	8009360 <UART_WaitOnFlagUntilTimeout+0x32>
 800935a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800935c:	2b00      	cmp	r3, #0
 800935e:	d140      	bne.n	80093e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800936e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009374:	667b      	str	r3, [r7, #100]	; 0x64
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800937e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009380:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800938c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e6      	bne.n	8009360 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	f023 0301 	bic.w	r3, r3, #1
 80093a8:	663b      	str	r3, [r7, #96]	; 0x60
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3308      	adds	r3, #8
 80093b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80093b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80093c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e5      	bne.n	8009392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2220      	movs	r2, #32
 80093ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e069      	b.n	80094b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d051      	beq.n	8009494 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093fe:	d149      	bne.n	8009494 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009408:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800941e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
 800942a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800942e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e6      	bne.n	800940a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3308      	adds	r3, #8
 8009442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	613b      	str	r3, [r7, #16]
   return(result);
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f023 0301 	bic.w	r3, r3, #1
 8009452:	66bb      	str	r3, [r7, #104]	; 0x68
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3308      	adds	r3, #8
 800945a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800945c:	623a      	str	r2, [r7, #32]
 800945e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	69f9      	ldr	r1, [r7, #28]
 8009462:	6a3a      	ldr	r2, [r7, #32]
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	61bb      	str	r3, [r7, #24]
   return(result);
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e5      	bne.n	800943c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2220      	movs	r2, #32
 8009474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2220      	movs	r2, #32
 800947c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2220      	movs	r2, #32
 8009484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e010      	b.n	80094b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	69da      	ldr	r2, [r3, #28]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	4013      	ands	r3, r2
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	bf0c      	ite	eq
 80094a4:	2301      	moveq	r3, #1
 80094a6:	2300      	movne	r3, #0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	f43f af46 	beq.w	8009340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3770      	adds	r7, #112	; 0x70
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094be:	b480      	push	{r7}
 80094c0:	b08f      	sub	sp, #60	; 0x3c
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80094da:	637b      	str	r3, [r7, #52]	; 0x34
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	461a      	mov	r2, r3
 80094e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e6      	bne.n	80094c6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3308      	adds	r3, #8
 80094fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	60bb      	str	r3, [r7, #8]
   return(result);
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800950e:	633b      	str	r3, [r7, #48]	; 0x30
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3308      	adds	r3, #8
 8009516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009518:	61ba      	str	r2, [r7, #24]
 800951a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	6979      	ldr	r1, [r7, #20]
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	613b      	str	r3, [r7, #16]
   return(result);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e5      	bne.n	80094f8 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2220      	movs	r2, #32
 8009530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009534:	bf00      	nop
 8009536:	373c      	adds	r7, #60	; 0x3c
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009540:	b480      	push	{r7}
 8009542:	b095      	sub	sp, #84	; 0x54
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800955c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009566:	643b      	str	r3, [r7, #64]	; 0x40
 8009568:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800956c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e6      	bne.n	8009548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3308      	adds	r3, #8
 8009580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	61fb      	str	r3, [r7, #28]
   return(result);
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009590:	f023 0301 	bic.w	r3, r3, #1
 8009594:	64bb      	str	r3, [r7, #72]	; 0x48
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	3308      	adds	r3, #8
 800959c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800959e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e3      	bne.n	800957a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d118      	bne.n	80095ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f023 0310 	bic.w	r3, r3, #16
 80095ce:	647b      	str	r3, [r7, #68]	; 0x44
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095d8:	61bb      	str	r3, [r7, #24]
 80095da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6979      	ldr	r1, [r7, #20]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	613b      	str	r3, [r7, #16]
   return(result);
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e6      	bne.n	80095ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009600:	bf00      	nop
 8009602:	3754      	adds	r7, #84	; 0x54
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08a      	sub	sp, #40	; 0x28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009618:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800961e:	2b81      	cmp	r3, #129	; 0x81
 8009620:	d01d      	beq.n	800965e <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	2200      	movs	r2, #0
 8009626:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	60fb      	str	r3, [r7, #12]
   return(result);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963e:	623b      	str	r3, [r7, #32]
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	69b9      	ldr	r1, [r7, #24]
 800964e:	69fa      	ldr	r2, [r7, #28]
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	617b      	str	r3, [r7, #20]
   return(result);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e6      	bne.n	800962a <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800965c:	e002      	b.n	8009664 <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 800965e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009660:	f7ff fbb8 	bl	8008dd4 <HAL_UART_TxCpltCallback>
}
 8009664:	bf00      	nop
 8009666:	3728      	adds	r7, #40	; 0x28
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009678:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff fbb4 	bl	8008de8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009694:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800969c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b0:	2b80      	cmp	r3, #128	; 0x80
 80096b2:	d109      	bne.n	80096c8 <UART_DMAError+0x40>
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	2b21      	cmp	r3, #33	; 0x21
 80096b8:	d106      	bne.n	80096c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80096c2:	6978      	ldr	r0, [r7, #20]
 80096c4:	f7ff fefb 	bl	80094be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d2:	2b40      	cmp	r3, #64	; 0x40
 80096d4:	d109      	bne.n	80096ea <UART_DMAError+0x62>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b22      	cmp	r3, #34	; 0x22
 80096da:	d106      	bne.n	80096ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80096e4:	6978      	ldr	r0, [r7, #20]
 80096e6:	f7ff ff2b 	bl	8009540 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096f0:	f043 0210 	orr.w	r2, r3, #16
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096fa:	6978      	ldr	r0, [r7, #20]
 80096fc:	f7ff fb7e 	bl	8008dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009700:	bf00      	nop
 8009702:	3718      	adds	r7, #24
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <HAL_UARTEx_DisableFifoMode+0x16>
 800971a:	2302      	movs	r3, #2
 800971c:	e027      	b.n	800976e <HAL_UARTEx_DisableFifoMode+0x66>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2224      	movs	r2, #36	; 0x24
 800972a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0201 	bic.w	r2, r2, #1
 8009744:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800974c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2220      	movs	r2, #32
 8009760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800978a:	2b01      	cmp	r3, #1
 800978c:	d101      	bne.n	8009792 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800978e:	2302      	movs	r3, #2
 8009790:	e02d      	b.n	80097ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2224      	movs	r2, #36	; 0x24
 800979e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 0201 	bic.w	r2, r2, #1
 80097b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f850 	bl	8009874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009806:	2b01      	cmp	r3, #1
 8009808:	d101      	bne.n	800980e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800980a:	2302      	movs	r3, #2
 800980c:	e02d      	b.n	800986a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2224      	movs	r2, #36	; 0x24
 800981a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0201 	bic.w	r2, r2, #1
 8009834:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f812 	bl	8009874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
	...

08009874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009880:	2b00      	cmp	r3, #0
 8009882:	d108      	bne.n	8009896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009894:	e031      	b.n	80098fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009896:	2308      	movs	r3, #8
 8009898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800989a:	2308      	movs	r3, #8
 800989c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	0e5b      	lsrs	r3, r3, #25
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 0307 	and.w	r3, r3, #7
 80098ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	0f5b      	lsrs	r3, r3, #29
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	7b3a      	ldrb	r2, [r7, #12]
 80098c2:	4911      	ldr	r1, [pc, #68]	; (8009908 <UARTEx_SetNbDataToProcess+0x94>)
 80098c4:	5c8a      	ldrb	r2, [r1, r2]
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098ca:	7b3a      	ldrb	r2, [r7, #12]
 80098cc:	490f      	ldr	r1, [pc, #60]	; (800990c <UARTEx_SetNbDataToProcess+0x98>)
 80098ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	7b7a      	ldrb	r2, [r7, #13]
 80098e0:	4909      	ldr	r1, [pc, #36]	; (8009908 <UARTEx_SetNbDataToProcess+0x94>)
 80098e2:	5c8a      	ldrb	r2, [r1, r2]
 80098e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098e8:	7b7a      	ldrb	r2, [r7, #13]
 80098ea:	4908      	ldr	r1, [pc, #32]	; (800990c <UARTEx_SetNbDataToProcess+0x98>)
 80098ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	0800d254 	.word	0x0800d254
 800990c:	0800d25c 	.word	0x0800d25c

08009910 <OV9712_Init>:

/************************************************************************
 *                      Local Function Definitions                      *
 ***********************************************************************/
void OV9712_Init(OV9712_t *ov9712, camera_params_t * params, I2C_Handle_t *i2c_port, DCMI_Handle_t *dcmi_port, OV9712_pins_t *pins)
{
 8009910:	b590      	push	{r4, r7, lr}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
	memcpy( &ov9712->params, params, sizeof(camera_params_t) );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3310      	adds	r3, #16
 8009922:	2210      	movs	r2, #16
 8009924:	68b9      	ldr	r1, [r7, #8]
 8009926:	4618      	mov	r0, r3
 8009928:	f000 fd52 	bl	800a3d0 <memcpy>
	ov9712->params.buffer_size = ov9712->params.width * ov9712->params.height * ov9712->params.depth / 2;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8a1b      	ldrh	r3, [r3, #16]
 8009930:	461a      	mov	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8a5b      	ldrh	r3, [r3, #18]
 8009936:	fb02 f303 	mul.w	r3, r2, r3
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	7d12      	ldrb	r2, [r2, #20]
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	0fda      	lsrs	r2, r3, #31
 8009944:	4413      	add	r3, r2
 8009946:	105b      	asrs	r3, r3, #1
 8009948:	b29a      	uxth	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	839a      	strh	r2, [r3, #28]
	ov9712->i2c = i2c_port;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	605a      	str	r2, [r3, #4]
	ov9712->dcmi = dcmi_port;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	609a      	str	r2, [r3, #8]
	ov9712->pins = pins;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6a3a      	ldr	r2, [r7, #32]
 800995e:	60da      	str	r2, [r3, #12]

	OV9712Functions.Enable(ov9712);
 8009960:	4b0e      	ldr	r3, [pc, #56]	; (800999c <OV9712_Init+0x8c>)
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	4798      	blx	r3
	HAL_Delay(OV9712_REG_INIT_DLY_MS);
 8009968:	2019      	movs	r0, #25
 800996a:	f7f8 f91b 	bl	8001ba4 <HAL_Delay>
	OV9712Functions.Reset( ov9712, true );
 800996e:	4b0b      	ldr	r3, [pc, #44]	; (800999c <OV9712_Init+0x8c>)
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	2101      	movs	r1, #1
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	4798      	blx	r3
	HAL_Delay(OV9712_REG_INIT_DLY_MS);
 8009978:	2019      	movs	r0, #25
 800997a:	f7f8 f913 	bl	8001ba4 <HAL_Delay>
	PlatformFunctions.CAM.Start_DMA(ov9712->dcmi, DCMI_MODE_CONTINUOUS, (uint32_t)ov9712->params.buffer, (uint32_t)ov9712->params.buffer_size);
 800997e:	4b08      	ldr	r3, [pc, #32]	; (80099a0 <OV9712_Init+0x90>)
 8009980:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6898      	ldr	r0, [r3, #8]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	461a      	mov	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8b9b      	ldrh	r3, [r3, #28]
 8009990:	2100      	movs	r1, #0
 8009992:	47a0      	blx	r4
}
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	bd90      	pop	{r4, r7, pc}
 800999c:	200000a8 	.word	0x200000a8
 80099a0:	20000024 	.word	0x20000024

080099a4 <OV9712_Config>:

void OV9712_Config( OV9712_t *ov9712 )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
	hw_register_t reg;
	for (int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++) {
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e010      	b.n	80099d4 <OV9712_Config+0x30>
		reg = OV9712_regs[i];
 80099b2:	4a0d      	ldr	r2, [pc, #52]	; (80099e8 <OV9712_Config+0x44>)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ba:	813b      	strh	r3, [r7, #8]
		if (reg.Address == ENDR)
 80099bc:	7a3b      	ldrb	r3, [r7, #8]
 80099be:	2bff      	cmp	r3, #255	; 0xff
 80099c0:	d00c      	beq.n	80099dc <OV9712_Config+0x38>
			break;
		OV9712Functions.Write(ov9712, reg.Address, reg.Value);
 80099c2:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <OV9712_Config+0x48>)
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	7a39      	ldrb	r1, [r7, #8]
 80099c8:	7a7a      	ldrb	r2, [r7, #9]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	4798      	blx	r3
	for (int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++) {
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b09      	cmp	r3, #9
 80099d8:	d9eb      	bls.n	80099b2 <OV9712_Config+0xe>
	}
}
 80099da:	e000      	b.n	80099de <OV9712_Config+0x3a>
			break;
 80099dc:	bf00      	nop
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	20000094 	.word	0x20000094
 80099ec:	200000a8 	.word	0x200000a8

080099f0 <OV9712_Write>:

void OV9712_Write(OV9712_t *ov9712, uint8_t r, uint8_t v)
{
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b087      	sub	sp, #28
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70fb      	strb	r3, [r7, #3]
 80099fc:	4613      	mov	r3, r2
 80099fe:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2] = { r, v };
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	733b      	strb	r3, [r7, #12]
 8009a04:	78bb      	ldrb	r3, [r7, #2]
 8009a06:	737b      	strb	r3, [r7, #13]
	PlatformFunctions.I2C.Transmit(ov9712->i2c, ov9712->address, data, 2, 1000);
 8009a08:	4b08      	ldr	r3, [pc, #32]	; (8009a2c <OV9712_Write+0x3c>)
 8009a0a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6858      	ldr	r0, [r3, #4]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	b299      	uxth	r1, r3
 8009a16:	f107 020c 	add.w	r2, r7, #12
 8009a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	2302      	movs	r3, #2
 8009a22:	47a0      	blx	r4
}
 8009a24:	bf00      	nop
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd90      	pop	{r4, r7, pc}
 8009a2c:	20000024 	.word	0x20000024

08009a30 <OV9712_Read>:

uint8_t OV9712_Read( OV9712_t * ov9712, uint8_t r )
{
 8009a30:	b590      	push	{r4, r7, lr}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	70fb      	strb	r3, [r7, #3]
	uint8_t v = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
	PlatformFunctions.I2C.Transmit(ov9712->i2c, ov9712->address, &r, 1, OV9712_I2C_TIMEOUT_MS);
 8009a40:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <OV9712_Read+0x50>)
 8009a42:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6858      	ldr	r0, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	b299      	uxth	r1, r3
 8009a4e:	1cfa      	adds	r2, r7, #3
 8009a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	2301      	movs	r3, #1
 8009a58:	47a0      	blx	r4
	PlatformFunctions.I2C.Receive( ov9712->i2c, ov9712->address, &v, 1, OV9712_I2C_TIMEOUT_MS);
 8009a5a:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <OV9712_Read+0x50>)
 8009a5c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6858      	ldr	r0, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b299      	uxth	r1, r3
 8009a68:	f107 020f 	add.w	r2, r7, #15
 8009a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	2301      	movs	r3, #1
 8009a74:	47a0      	blx	r4
	return v;
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd90      	pop	{r4, r7, pc}
 8009a80:	20000024 	.word	0x20000024

08009a84 <OV9712_Resume>:

void OV9712_Resume(OV9712_t *ov9712)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
	if (PlatformFunctions.CAM.Resume( ov9712->dcmi ) != HAL_OK)
 8009a8c:	4b07      	ldr	r3, [pc, #28]	; (8009aac <OV9712_Resume+0x28>)
 8009a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	6892      	ldr	r2, [r2, #8]
 8009a94:	4610      	mov	r0, r2
 8009a96:	4798      	blx	r3
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <OV9712_Resume+0x1e>
	{
		Error_Handler();
 8009a9e:	f7f7 fcf1 	bl	8001484 <Error_Handler>
	}
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	20000024 	.word	0x20000024

08009ab0 <OV9712_Pause>:

void OV9712_Pause(OV9712_t *ov9712)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	if (PlatformFunctions.CAM.Suspend(ov9712->dcmi) != HAL_OK)
 8009ab8:	4b07      	ldr	r3, [pc, #28]	; (8009ad8 <OV9712_Pause+0x28>)
 8009aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6892      	ldr	r2, [r2, #8]
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <OV9712_Pause+0x1e>
	{
		Error_Handler();
 8009aca:	f7f7 fcdb 	bl	8001484 <Error_Handler>
	}
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20000024 	.word	0x20000024

08009adc <OV9712_Enable>:

void OV9712_Enable(OV9712_t *ov9712)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	if (ov9712->pins == NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01a      	beq.n	8009b22 <OV9712_Enable+0x46>
		return;
	PlatformFunctions.GPIO.Write( &ov9712->pins->RESET, GPIO_PIN_SET );
 8009aec:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <OV9712_Enable+0x50>)
 8009aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	68d2      	ldr	r2, [r2, #12]
 8009af4:	2101      	movs	r1, #1
 8009af6:	4610      	mov	r0, r2
 8009af8:	4798      	blx	r3
	PlatformFunctions.GPIO.Write( &ov9712->pins->LOW_VOLTAGE, GPIO_PIN_SET );
 8009afa:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <OV9712_Enable+0x50>)
 8009afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	68d2      	ldr	r2, [r2, #12]
 8009b02:	3208      	adds	r2, #8
 8009b04:	2101      	movs	r1, #1
 8009b06:	4610      	mov	r0, r2
 8009b08:	4798      	blx	r3
	HAL_Delay(OV9712_T2_PWR_ON_DLY_MS);
 8009b0a:	2005      	movs	r0, #5
 8009b0c:	f7f8 f84a 	bl	8001ba4 <HAL_Delay>
	PlatformFunctions.GPIO.Write( &ov9712->pins->POWER_DOWN, GPIO_PIN_RESET );
 8009b10:	4b06      	ldr	r3, [pc, #24]	; (8009b2c <OV9712_Enable+0x50>)
 8009b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	68d2      	ldr	r2, [r2, #12]
 8009b18:	3210      	adds	r2, #16
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	e000      	b.n	8009b24 <OV9712_Enable+0x48>
		return;
 8009b22:	bf00      	nop
}
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000024 	.word	0x20000024

08009b30 <OV9712_Disable>:

void OV9712_Disable(OV9712_t *ov9712)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	if (ov9712->pins == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d018      	beq.n	8009b72 <OV9712_Disable+0x42>
		return;
	PlatformFunctions.GPIO.Write(&ov9712->pins->LOW_VOLTAGE, GPIO_PIN_RESET);
 8009b40:	4b0e      	ldr	r3, [pc, #56]	; (8009b7c <OV9712_Disable+0x4c>)
 8009b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	68d2      	ldr	r2, [r2, #12]
 8009b48:	3208      	adds	r2, #8
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
	PlatformFunctions.GPIO.Write(&ov9712->pins->POWER_DOWN, GPIO_PIN_SET);
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <OV9712_Disable+0x4c>)
 8009b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	68d2      	ldr	r2, [r2, #12]
 8009b58:	3210      	adds	r2, #16
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4798      	blx	r3
	PlatformFunctions.GPIO.SetPortMode(&ov9712->pins->MASTER_CLOCK, GPIO_MODE_INPUT);
 8009b60:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <OV9712_Disable+0x4c>)
 8009b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	68d2      	ldr	r2, [r2, #12]
 8009b68:	3218      	adds	r2, #24
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	4798      	blx	r3
 8009b70:	e000      	b.n	8009b74 <OV9712_Disable+0x44>
		return;
 8009b72:	bf00      	nop
}
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000024 	.word	0x20000024

08009b80 <OV9712_Reset>:

void OV9712_Reset(OV9712_t *ov9712, bool software)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
	if( software )
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d006      	beq.n	8009ba0 <OV9712_Reset+0x20>
		OV9712Functions.Write( ov9712, COM7, 0x80 );
 8009b92:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <OV9712_Reset+0x60>)
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	2280      	movs	r2, #128	; 0x80
 8009b98:	2112      	movs	r1, #18
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	4798      	blx	r3
 8009b9e:	e006      	b.n	8009bae <OV9712_Reset+0x2e>
	else
		PlatformFunctions.GPIO.Write(&ov9712->pins->RESET, GPIO_PIN_RESET);
 8009ba0:	4b10      	ldr	r3, [pc, #64]	; (8009be4 <OV9712_Reset+0x64>)
 8009ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68d2      	ldr	r2, [r2, #12]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4610      	mov	r0, r2
 8009bac:	4798      	blx	r3
	HAL_Delay(OV9712_OP_DLY_MS);
 8009bae:	2032      	movs	r0, #50	; 0x32
 8009bb0:	f7f7 fff8 	bl	8001ba4 <HAL_Delay>
	if( software )
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d004      	beq.n	8009bc4 <OV9712_Reset+0x44>
		OV9712Functions.Config( ov9712 );
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <OV9712_Reset+0x60>)
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	4798      	blx	r3
 8009bc2:	e006      	b.n	8009bd2 <OV9712_Reset+0x52>
	else
		PlatformFunctions.GPIO.Write(&ov9712->pins->RESET, GPIO_PIN_SET);
 8009bc4:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <OV9712_Reset+0x64>)
 8009bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	68d2      	ldr	r2, [r2, #12]
 8009bcc:	2101      	movs	r1, #1
 8009bce:	4610      	mov	r0, r2
 8009bd0:	4798      	blx	r3
	HAL_Delay(OV9712_OP_DLY_MS);
 8009bd2:	2032      	movs	r0, #50	; 0x32
 8009bd4:	f7f7 ffe6 	bl	8001ba4 <HAL_Delay>
}
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200000a8 	.word	0x200000a8
 8009be4:	20000024 	.word	0x20000024

08009be8 <InitializePlatform>:
/***************************************************************************************/
/*                                  Core Routines                                      */
/***************************************************************************************/
/* INITIALIZING State Routine */
void InitializePlatform( void )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
//    SpoofDensityMap( y, CAPTURE_HEIGHT );
//    DrawDensityMap( x, CAPTURE_WIDTH );
//    DrawDensityMap( y, CAPTURE_HEIGHT );
//    PrintDensityMaps( x, CAPTURE_WIDTH, y, CAPTURE_HEIGHT );

    PlatformFunctions.Init( &Platform, HOST_COMM_PROTOCOL, (generic_handle_t)Master.IOs->HOST_DEFAULT_CHANNEL );
 8009bec:	4b04      	ldr	r3, [pc, #16]	; (8009c00 <InitializePlatform+0x18>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a04      	ldr	r2, [pc, #16]	; (8009c04 <InitializePlatform+0x1c>)
 8009bf2:	6812      	ldr	r2, [r2, #0]
 8009bf4:	6852      	ldr	r2, [r2, #4]
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	4803      	ldr	r0, [pc, #12]	; (8009c08 <InitializePlatform+0x20>)
 8009bfa:	4798      	blx	r3
}
 8009bfc:	bf00      	nop
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	200000d0 	.word	0x200000d0
 8009c04:	200083bc 	.word	0x200083bc
 8009c08:	200083b4 	.word	0x200083b4

08009c0c <ConnectToHost>:

/* CONNECTING_TO_HOST State Routine */
void ConnectToHost( void )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
  while( PlatformFunctions.Host.Command( PING_HOST, NEEDED ) != OK )
  {
    PlatformFunctions.Wait( HOST_COMMAND_WAIT_TIME );
  }
#endif
}
 8009c10:	bf00      	nop
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
	...

08009c1c <ConfigureApplication>:

/* CONFIGURING State Routine */
void ConfigureApplication( void )
{
 8009c1c:	b590      	push	{r4, r7, lr}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af02      	add	r7, sp, #8
#ifdef __OV9712__
  OV9712Functions.Init( &OV9712, &camera_params, Master.IOs->CAMERA_COMM_CHANNEL, Master.IOs->CAMERA_DATA_CHANNEL, &Default_OV9712_Pins );
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <ConfigureApplication+0x28>)
 8009c24:	681c      	ldr	r4, [r3, #0]
 8009c26:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <ConfigureApplication+0x2c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	4b06      	ldr	r3, [pc, #24]	; (8009c48 <ConfigureApplication+0x2c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	4906      	ldr	r1, [pc, #24]	; (8009c4c <ConfigureApplication+0x30>)
 8009c34:	9100      	str	r1, [sp, #0]
 8009c36:	4906      	ldr	r1, [pc, #24]	; (8009c50 <ConfigureApplication+0x34>)
 8009c38:	4806      	ldr	r0, [pc, #24]	; (8009c54 <ConfigureApplication+0x38>)
 8009c3a:	47a0      	blx	r4
#endif
#ifdef __RHO__
  RhoSystem.Functions.Perform.ConnectToInterface( &PlatformFunctions, &Platform.CameraFlags );
  RhoSystem.Functions.Perform.Initialize( CAMERA_PORT, UART_TX_PORT );
#endif
}
 8009c3c:	bf00      	nop
 8009c3e:	3704      	adds	r7, #4
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd90      	pop	{r4, r7, pc}
 8009c44:	200000a8 	.word	0x200000a8
 8009c48:	200083bc 	.word	0x200083bc
 8009c4c:	20000140 	.word	0x20000140
 8009c50:	20000180 	.word	0x20000180
 8009c54:	20000160 	.word	0x20000160

08009c58 <ExitInitialization>:

/* READY State Routine */
void ExitInitialization( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
#ifdef __RHO__
  RhoSystem.Functions.Perform.Activate();
#endif
	if( SystemFunctions.State.IsIn( &System, READY ) )
 8009c5c:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <ExitInitialization+0x28>)
 8009c5e:	695b      	ldr	r3, [r3, #20]
 8009c60:	2104      	movs	r1, #4
 8009c62:	4808      	ldr	r0, [pc, #32]	; (8009c84 <ExitInitialization+0x2c>)
 8009c64:	4798      	blx	r3
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d003      	beq.n	8009c74 <ExitInitialization+0x1c>
		MasterFunctions.Run();
 8009c6c:	4b06      	ldr	r3, [pc, #24]	; (8009c88 <ExitInitialization+0x30>)
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	4798      	blx	r3
	else
		PlatformFunctions.Wait(250);
}
 8009c72:	e003      	b.n	8009c7c <ExitInitialization+0x24>
		PlatformFunctions.Wait(250);
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <ExitInitialization+0x34>)
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	20fa      	movs	r0, #250	; 0xfa
 8009c7a:	4798      	blx	r3
}
 8009c7c:	bf00      	nop
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20000198 	.word	0x20000198
 8009c84:	20000190 	.word	0x20000190
 8009c88:	200001b8 	.word	0x200001b8
 8009c8c:	200000d0 	.word	0x200000d0

08009c90 <ApplicationCore>:

/* ACTIVE State Routine */
inline void ApplicationCore( void )
{
 8009c90:	b480      	push	{r7}
 8009c92:	af00      	add	r7, sp, #0
#ifdef __RHO__
    RhoSystem.Functions.Perform.CoreProcess();
#else
#warning "No application core."
#endif
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
	...

08009ca0 <SystemError>:

/* SYS_ERROR State Routine */
void SystemError( void )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
    LOG( ALWAYS, "System error! Resetting in" );
 8009ca6:	2304      	movs	r3, #4
 8009ca8:	71fb      	strb	r3, [r7, #7]
 8009caa:	e005      	b.n	8009cb8 <SystemError+0x18>
 8009cac:	2009      	movs	r0, #9
 8009cae:	f001 f829 	bl	800ad04 <putchar>
 8009cb2:	79fb      	ldrb	r3, [r7, #7]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	71fb      	strb	r3, [r7, #7]
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d9f6      	bls.n	8009cac <SystemError+0xc>
 8009cbe:	480e      	ldr	r0, [pc, #56]	; (8009cf8 <SystemError+0x58>)
 8009cc0:	f001 f808 	bl	800acd4 <iprintf>
    for( uint8_t i = 3 ; i > 0; i-- )
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	71bb      	strb	r3, [r7, #6]
 8009cc8:	e00c      	b.n	8009ce4 <SystemError+0x44>
    {
        LOG_BARE( ALWAYS, " %d", i );
 8009cca:	79bb      	ldrb	r3, [r7, #6]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	480b      	ldr	r0, [pc, #44]	; (8009cfc <SystemError+0x5c>)
 8009cd0:	f001 f800 	bl	800acd4 <iprintf>
        PlatformFunctions.Wait(1000);
 8009cd4:	4b0a      	ldr	r3, [pc, #40]	; (8009d00 <SystemError+0x60>)
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009cdc:	4798      	blx	r3
    for( uint8_t i = 3 ; i > 0; i-- )
 8009cde:	79bb      	ldrb	r3, [r7, #6]
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	71bb      	strb	r3, [r7, #6]
 8009ce4:	79bb      	ldrb	r3, [r7, #6]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1ef      	bne.n	8009cca <SystemError+0x2a>
    }
    PlatformFunctions.Reset();
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <SystemError+0x60>)
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	4798      	blx	r3
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	0800d0e0 	.word	0x0800d0e0
 8009cfc:	0800d0fc 	.word	0x0800d0fc
 8009d00:	200000d0 	.word	0x200000d0

08009d04 <Master_Connect>:

/***************************************************************************************/
/*                                Master Initialize                                    */
/***************************************************************************************/
void Master_Connect( master_ios_t * ios )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	Master.IOs = ios;
 8009d0c:	4a07      	ldr	r2, [pc, #28]	; (8009d2c <Master_Connect+0x28>)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8009d12:	2201      	movs	r2, #1
 8009d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009d18:	4805      	ldr	r0, [pc, #20]	; (8009d30 <Master_Connect+0x2c>)
 8009d1a:	f7fa f8df 	bl	8003edc <HAL_GPIO_WritePin>
	MasterFunctions.Init();
 8009d1e:	4b05      	ldr	r3, [pc, #20]	; (8009d34 <Master_Connect+0x30>)
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	4798      	blx	r3
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	200083bc 	.word	0x200083bc
 8009d30:	42020400 	.word	0x42020400
 8009d34:	200001b8 	.word	0x200001b8

08009d38 <Master_Init>:

void Master_Init( void )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
	/* Initialize state manager */
	SystemFunctions.Init( &System, &global_states_list );
 8009d3c:	4b0d      	ldr	r3, [pc, #52]	; (8009d74 <Master_Init+0x3c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	490d      	ldr	r1, [pc, #52]	; (8009d78 <Master_Init+0x40>)
 8009d42:	480e      	ldr	r0, [pc, #56]	; (8009d7c <Master_Init+0x44>)
 8009d44:	4798      	blx	r3

	/* Initialize core platform */
	SystemFunctions.State.Enter( &System, INITIALIZING );
 8009d46:	4b0b      	ldr	r3, [pc, #44]	; (8009d74 <Master_Init+0x3c>)
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	480b      	ldr	r0, [pc, #44]	; (8009d7c <Master_Init+0x44>)
 8009d4e:	4798      	blx	r3

	/* Connect to host, this is critical for finishing initialization hence endless loop */
	SystemFunctions.State.Enter( &System, CONNECTING_TO_HOST );
 8009d50:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <Master_Init+0x3c>)
 8009d52:	691b      	ldr	r3, [r3, #16]
 8009d54:	2102      	movs	r1, #2
 8009d56:	4809      	ldr	r0, [pc, #36]	; (8009d7c <Master_Init+0x44>)
 8009d58:	4798      	blx	r3

	/* Configure application items */
	SystemFunctions.State.Enter( &System, CONFIGURING );
 8009d5a:	4b06      	ldr	r3, [pc, #24]	; (8009d74 <Master_Init+0x3c>)
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	2103      	movs	r1, #3
 8009d60:	4806      	ldr	r0, [pc, #24]	; (8009d7c <Master_Init+0x44>)
 8009d62:	4798      	blx	r3

	/* Exit initialization, enter run */
	SystemFunctions.State.Enter( &System, READY );
 8009d64:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <Master_Init+0x3c>)
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	2104      	movs	r1, #4
 8009d6a:	4804      	ldr	r0, [pc, #16]	; (8009d7c <Master_Init+0x44>)
 8009d6c:	4798      	blx	r3
}
 8009d6e:	bf00      	nop
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	20000198 	.word	0x20000198
 8009d78:	200001c4 	.word	0x200001c4
 8009d7c:	20000190 	.word	0x20000190

08009d80 <HAL_DCMI_FrameEventCallback>:
uint32_t vsync_events = 0;
uint32_t line_events = 0;
char c = '\0';

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
	frame_captured++;
 8009d88:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <HAL_DCMI_FrameEventCallback+0x20>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	4a04      	ldr	r2, [pc, #16]	; (8009da0 <HAL_DCMI_FrameEventCallback+0x20>)
 8009d90:	6013      	str	r3, [r2, #0]
}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	200083a8 	.word	0x200083a8

08009da4 <HAL_DCMI_ErrorCallback>:
//void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdmci)
//{
//	line_events++;
//}
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	c = 'e';
 8009dac:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <HAL_DCMI_ErrorCallback+0x28>)
 8009dae:	2265      	movs	r2, #101	; 0x65
 8009db0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit( Master.IOs->UART_Primary, (uint8_t *)&c, 1, 1000 );
 8009db2:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <HAL_DCMI_ErrorCallback+0x2c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6858      	ldr	r0, [r3, #4]
 8009db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	4903      	ldr	r1, [pc, #12]	; (8009dcc <HAL_DCMI_ErrorCallback+0x28>)
 8009dc0:	f7fe fe88 	bl	8008ad4 <HAL_UART_Transmit>
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	200083b0 	.word	0x200083b0
 8009dd0:	200083bc 	.word	0x200083bc

08009dd4 <Master_Run>:

/***************************************************************************************/
/*                                   Master Run                                        */
/***************************************************************************************/
void Master_Run( void )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	af00      	add	r7, sp, #0
	SystemFunctions.State.Set( &System, ACTIVE );
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	; (8009e10 <Master_Run+0x3c>)
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	2105      	movs	r1, #5
 8009dde:	480d      	ldr	r0, [pc, #52]	; (8009e14 <Master_Run+0x40>)
 8009de0:	4798      	blx	r3
	PlatformFunctions.CAM.Resume( OV9712.dcmi );
 8009de2:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <Master_Run+0x44>)
 8009de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009de6:	4a0d      	ldr	r2, [pc, #52]	; (8009e1c <Master_Run+0x48>)
 8009de8:	6892      	ldr	r2, [r2, #8]
 8009dea:	4610      	mov	r0, r2
 8009dec:	4798      	blx	r3
	while(1)
	{
		if( frame_captured != 0 )
 8009dee:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <Master_Run+0x4c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0fb      	beq.n	8009dee <Master_Run+0x1a>
////
//			uint8_t * img = (uint8_t *)OV9712.params.buffer;
//			uint32_t img_num_bytes = OV9712.params.width * OV9712.params.height * 2;
//			HAL_UART_Transmit( Master.IOs->UART_Primary, img, img_num_bytes, 100000);

			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8009df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009dfa:	480a      	ldr	r0, [pc, #40]	; (8009e24 <Master_Run+0x50>)
 8009dfc:	f7fa f886 	bl	8003f0c <HAL_GPIO_TogglePin>
			frame_captured = 0;
 8009e00:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <Master_Run+0x4c>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
//			HAL_Delay(1000);
			vsync_events = 0;
 8009e06:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <Master_Run+0x54>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
		if( frame_captured != 0 )
 8009e0c:	e7ef      	b.n	8009dee <Master_Run+0x1a>
 8009e0e:	bf00      	nop
 8009e10:	20000198 	.word	0x20000198
 8009e14:	20000190 	.word	0x20000190
 8009e18:	200000d0 	.word	0x200000d0
 8009e1c:	20000160 	.word	0x20000160
 8009e20:	200083a8 	.word	0x200083a8
 8009e24:	42020400 	.word	0x42020400
 8009e28:	200083ac 	.word	0x200083ac

08009e2c <InitPlatform>:

/************************************************************************
 *                      Local Function Definitions                      *
 ***********************************************************************/
void InitPlatform( platform_t * platform, protocol_t host_communication_protocol, generic_handle_t host_communication_handle )
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	460b      	mov	r3, r1
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	72fb      	strb	r3, [r7, #11]
  *platform = (platform_t){ host_communication_protocol, host_communication_handle };
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	7afa      	ldrb	r2, [r7, #11]
 8009e3e:	701a      	strb	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	605a      	str	r2, [r3, #4]
}
 8009e46:	bf00      	nop
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <WritePin>:

void WritePin( GPIO_t * gpio, uint16_t val )
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	807b      	strh	r3, [r7, #2]
  PLATFORM_SPECIFIC(WritePin)( gpio->port, gpio->pin, val );
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6818      	ldr	r0, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	889b      	ldrh	r3, [r3, #4]
 8009e66:	887a      	ldrh	r2, [r7, #2]
 8009e68:	b2d2      	uxtb	r2, r2
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f000 fa57 	bl	800a31e <STM_WritePin>
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <SetPortMode>:

void SetPortMode(GPIO_t * gpio, uint16_t val )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	807b      	strh	r3, [r7, #2]
  PLATFORM_SPECIFIC(SetPortMode)( gpio->port, gpio->pin, val );
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6818      	ldr	r0, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	889b      	ldrh	r3, [r3, #4]
 8009e8c:	887a      	ldrh	r2, [r7, #2]
 8009e8e:	b2d2      	uxtb	r2, r2
 8009e90:	4619      	mov	r1, r3
 8009e92:	f000 fa19 	bl	800a2c8 <STM_SetPortMode>
}
 8009e96:	bf00      	nop
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
	...

08009ea0 <PerformHostCommand>:

platform_status_enum PerformHostCommand(
  host_command_type_enum command,
  platform_wait_priority_level_enum priority )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	460a      	mov	r2, r1
 8009eaa:	71fb      	strb	r3, [r7, #7]
 8009eac:	4613      	mov	r3, r2
 8009eae:	71bb      	strb	r3, [r7, #6]
  platform_status_enum status = NO_STATUS;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	73fb      	strb	r3, [r7, #15]
  uint16_t return_data = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	81bb      	strh	r3, [r7, #12]
  host_command_t packet = { HOST_ADDRESS, THIS_ID, priority, command };
 8009eb8:	2301      	movs	r3, #1
 8009eba:	723b      	strb	r3, [r7, #8]
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	727b      	strb	r3, [r7, #9]
 8009ec0:	79bb      	ldrb	r3, [r7, #6]
 8009ec2:	72bb      	strb	r3, [r7, #10]
 8009ec4:	79fb      	ldrb	r3, [r7, #7]
 8009ec6:	72fb      	strb	r3, [r7, #11]
  for( uint8_t i = 0;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73bb      	strb	r3, [r7, #14]
 8009ecc:	e025      	b.n	8009f1a <PerformHostCommand+0x7a>
    i < HOST_COMM_RETRIES
    && status != OK;
    i++ )
  {
    switch( command )
 8009ece:	79fb      	ldrb	r3, [r7, #7]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d117      	bne.n	8009f04 <PerformHostCommand+0x64>
    {
      case PING_HOST:
        return_data = PlatformFunctions.Host.Transmit( (uint8_t *)&packet, sizeof(host_command_t) );
 8009ed4:	4b16      	ldr	r3, [pc, #88]	; (8009f30 <PerformHostCommand+0x90>)
 8009ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed8:	f107 0208 	add.w	r2, r7, #8
 8009edc:	2104      	movs	r1, #4
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4798      	blx	r3
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	81bb      	strh	r3, [r7, #12]
        if( return_data == 0 )
 8009ee6:	89bb      	ldrh	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d102      	bne.n	8009ef2 <PerformHostCommand+0x52>
        {
          status = FAILURE;
 8009eec:	2302      	movs	r3, #2
 8009eee:	73fb      	strb	r3, [r7, #15]
          continue;
 8009ef0:	e010      	b.n	8009f14 <PerformHostCommand+0x74>
        }
//        return_data = PlatformFunctions.Host.Receive( /* Enter correct buffer */ );
        if( return_data == 0 )
 8009ef2:	89bb      	ldrh	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d102      	bne.n	8009efe <PerformHostCommand+0x5e>
        {
          status = INVALID_OUTPUT;
 8009ef8:	2304      	movs	r3, #4
 8009efa:	73fb      	strb	r3, [r7, #15]
          continue;
 8009efc:	e00a      	b.n	8009f14 <PerformHostCommand+0x74>
        }
        status = OK;
 8009efe:	2301      	movs	r3, #1
 8009f00:	73fb      	strb	r3, [r7, #15]
        break;
 8009f02:	e002      	b.n	8009f0a <PerformHostCommand+0x6a>
      default:
        status = INVALID_INPUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	73fb      	strb	r3, [r7, #15]
        break;
 8009f08:	bf00      	nop
    }
    PlatformFunctions.Wait( HOST_COMMAND_RETRY_TIME );
 8009f0a:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <PerformHostCommand+0x90>)
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009f12:	4798      	blx	r3
    i++ )
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	3301      	adds	r3, #1
 8009f18:	73bb      	strb	r3, [r7, #14]
  for( uint8_t i = 0;
 8009f1a:	7bbb      	ldrb	r3, [r7, #14]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d802      	bhi.n	8009f26 <PerformHostCommand+0x86>
    && status != OK;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d1d3      	bne.n	8009ece <PerformHostCommand+0x2e>
  }
  return status;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20000204 	.word	0x20000204

08009f34 <TransmitToHost>:

uint8_t TransmitToHost( uint8_t * buffer, uint16_t length )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	807b      	strh	r3, [r7, #2]
#if HOST_COMMUNICATION_PROTOCOL == USART
  return PlatformFunctions.USART.Transmit( (UART_Handle_t *)Platform.HostHandle, buffer, length );
 8009f40:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <TransmitToHost+0x24>)
 8009f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f44:	4a05      	ldr	r2, [pc, #20]	; (8009f5c <TransmitToHost+0x28>)
 8009f46:	6850      	ldr	r0, [r2, #4]
 8009f48:	887a      	ldrh	r2, [r7, #2]
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	4798      	blx	r3
 8009f4e:	4603      	mov	r3, r0
#elif HOST_COMMUNICATION_PROTOCOL == USB
  return CDC_Transmit_FS(buffer, length);
#else
#error "Invalid host communication protocol!"
#endif
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000204 	.word	0x20000204
 8009f5c:	200083b4 	.word	0x200083b4

08009f60 <ReceiveFromHost>:
uint16_t ReceiveFromHost( uint8_t * buffer )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  #if HOST_COMMUNICATION_PROTOCOL == USART
    return PlatformFunctions.USART.Receive( (UART_Handle_t *)Platform.HostHandle, buffer );
 8009f68:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <ReceiveFromHost+0x20>)
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6c:	4a05      	ldr	r2, [pc, #20]	; (8009f84 <ReceiveFromHost+0x24>)
 8009f6e:	6852      	ldr	r2, [r2, #4]
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4610      	mov	r0, r2
 8009f74:	4798      	blx	r3
 8009f76:	4603      	mov	r3, r0
    PlatformFunctions.I2C.Receive( (I2C_Handle_t *)Platform.HostHandle, HOST_ADDRESS, data, len );
    return 1;
  #else
  #error "Invalid host communication protocol!"
  #endif
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	20000204 	.word	0x20000204
 8009f84:	200083b4 	.word	0x200083b4

08009f88 <InitSystem>:
#include "system.h"

void InitSystem(
  system_t * system,
  system_states_list_t * state_list )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  system->state_list = state_list;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	605a      	str	r2, [r3, #4]
  SystemFunctions.State.Set( system, system->state );
 8009f98:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <InitSystem+0x28>)
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	7852      	ldrb	r2, [r2, #1]
 8009fa0:	4611      	mov	r1, r2
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	4798      	blx	r3
}
 8009fa6:	bf00      	nop
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000290 	.word	0x20000290

08009fb4 <NextStateSystem>:

void NextStateSystem( system_t * system )
{
 8009fb4:	b590      	push	{r4, r7, lr}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  SystemFunctions.State.Enter( system, SystemFunctions.State.Get(system)->next );
 8009fbc:	4b07      	ldr	r3, [pc, #28]	; (8009fdc <NextStateSystem+0x28>)
 8009fbe:	691c      	ldr	r4, [r3, #16]
 8009fc0:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <NextStateSystem+0x28>)
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	4798      	blx	r3
 8009fc8:	4603      	mov	r3, r0
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	47a0      	blx	r4
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd90      	pop	{r4, r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000290 	.word	0x20000290

08009fe0 <GetStateSystem>:

system_state_t * GetStateSystem( system_t * system )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  return SystemFunctions.State.GetFromList( system, system->state );
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <GetStateSystem+0x20>)
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	7852      	ldrb	r2, [r2, #1]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
 8009ff6:	4603      	mov	r3, r0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000290 	.word	0x20000290

0800a004 <SetStateSystem>:

void SetStateSystem( system_t * system, system_state_enum new_state )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
	if( new_state >= NUM_SYSTEM_STATES )
 800a010:	78fb      	ldrb	r3, [r7, #3]
 800a012:	2b07      	cmp	r3, #7
 800a014:	d81c      	bhi.n	800a050 <SetStateSystem+0x4c>
		return;
  if( system->state != new_state )
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	785b      	ldrb	r3, [r3, #1]
 800a01a:	78fa      	ldrb	r2, [r7, #3]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d013      	beq.n	800a048 <SetStateSystem+0x44>
  {
	  LOG(STATE_DEBUG, "Entering %s\r\n", system_state_enum_strings[new_state]);
 800a020:	2303      	movs	r3, #3
 800a022:	73fb      	strb	r3, [r7, #15]
 800a024:	e005      	b.n	800a032 <SetStateSystem+0x2e>
 800a026:	2009      	movs	r0, #9
 800a028:	f000 fe6c 	bl	800ad04 <putchar>
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	3301      	adds	r3, #1
 800a030:	73fb      	strb	r3, [r7, #15]
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	2b03      	cmp	r3, #3
 800a036:	d9f6      	bls.n	800a026 <SetStateSystem+0x22>
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	4a07      	ldr	r2, [pc, #28]	; (800a058 <SetStateSystem+0x54>)
 800a03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a040:	4619      	mov	r1, r3
 800a042:	4806      	ldr	r0, [pc, #24]	; (800a05c <SetStateSystem+0x58>)
 800a044:	f000 fe46 	bl	800acd4 <iprintf>
  }
  system->state = new_state;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	78fa      	ldrb	r2, [r7, #3]
 800a04c:	705a      	strb	r2, [r3, #1]
 800a04e:	e000      	b.n	800a052 <SetStateSystem+0x4e>
		return;
 800a050:	bf00      	nop
}
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	20000274 	.word	0x20000274
 800a05c:	0800d154 	.word	0x0800d154

0800a060 <PerformStateSystem>:

void PerformStateSystem( system_t * system )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  void (*routine)(void) = SystemFunctions.State.Get(system)->routine;
 800a068:	4b07      	ldr	r3, [pc, #28]	; (800a088 <PerformStateSystem+0x28>)
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	4798      	blx	r3
 800a070:	4603      	mov	r3, r0
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	60fb      	str	r3, [r7, #12]
  if( routine != NULL ) routine();
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <PerformStateSystem+0x20>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4798      	blx	r3
}
 800a080:	bf00      	nop
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20000290 	.word	0x20000290

0800a08c <EnterStateSystem>:

void EnterStateSystem( system_t * system, system_state_enum new_state )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  SystemFunctions.State.Set( system, new_state );
 800a098:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <EnterStateSystem+0x28>)
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	78fa      	ldrb	r2, [r7, #3]
 800a09e:	4611      	mov	r1, r2
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	4798      	blx	r3
  SystemFunctions.State.Perform( system );
 800a0a4:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <EnterStateSystem+0x28>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	4798      	blx	r3
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	20000290 	.word	0x20000290

0800a0b8 <IsInStateSystem>:

bool IsInStateSystem( system_t * system, system_state_enum check_state )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  return ( SystemFunctions.State.Get( system )->state == check_state );
 800a0c4:	4b07      	ldr	r3, [pc, #28]	; (800a0e4 <IsInStateSystem+0x2c>)
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	bf0c      	ite	eq
 800a0d6:	2301      	moveq	r3, #1
 800a0d8:	2300      	movne	r3, #0
 800a0da:	b2db      	uxtb	r3, r3
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000290 	.word	0x20000290

0800a0e8 <GetStateFromListSystem>:

system_state_t * GetStateFromListSystem( system_t * system, system_state_enum state )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
    system_state_t * state_type;
    /* Cycle state list to find specified state.
        If not found, return is ERROR_STATE */
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	72fb      	strb	r3, [r7, #11]
 800a0f8:	e00d      	b.n	800a116 <GetStateFromListSystem+0x2e>
    {
        state_type = &(*system->state_list)[i];
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	7afb      	ldrb	r3, [r7, #11]
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	4413      	add	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]
        if( state_type->state == state ) break;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d006      	beq.n	800a11e <GetStateFromListSystem+0x36>
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 800a110:	7afb      	ldrb	r3, [r7, #11]
 800a112:	3301      	adds	r3, #1
 800a114:	72fb      	strb	r3, [r7, #11]
 800a116:	7afb      	ldrb	r3, [r7, #11]
 800a118:	2b06      	cmp	r3, #6
 800a11a:	d9ee      	bls.n	800a0fa <GetStateFromListSystem+0x12>
 800a11c:	e000      	b.n	800a120 <GetStateFromListSystem+0x38>
        if( state_type->state == state ) break;
 800a11e:	bf00      	nop
    }
    return state_type;
 800a120:	68fb      	ldr	r3, [r7, #12]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
	...

0800a130 <__NVIC_SystemReset>:
{
 800a130:	b480      	push	{r7}
 800a132:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a134:	f3bf 8f4f 	dsb	sy
}
 800a138:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a13a:	4b06      	ldr	r3, [pc, #24]	; (800a154 <__NVIC_SystemReset+0x24>)
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a142:	4904      	ldr	r1, [pc, #16]	; (800a154 <__NVIC_SystemReset+0x24>)
 800a144:	4b04      	ldr	r3, [pc, #16]	; (800a158 <__NVIC_SystemReset+0x28>)
 800a146:	4313      	orrs	r3, r2
 800a148:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a14a:	f3bf 8f4f 	dsb	sy
}
 800a14e:	bf00      	nop
    __NOP();
 800a150:	bf00      	nop
 800a152:	e7fd      	b.n	800a150 <__NVIC_SystemReset+0x20>
 800a154:	e000ed00 	.word	0xe000ed00
 800a158:	05fa0004 	.word	0x05fa0004

0800a15c <HAL_GPIO_EXTI_Callback>:
/************************************************************************
 *                           Interrupt Handlers                         *
 ***********************************************************************/
//static int hrefs = 0;
inline void STM_InterruptHandler( uint16_t GPIO_Pin )
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	80fb      	strh	r3, [r7, #6]
    STM_InitDMA( (uint32_t)&CAMERA_PORT, _dma_destination, _dma_size, true );
//    LOG(ALWAYS, "0x%08x", Master.Utilities.Timer_Primary->hdma[RHO_TIM_DMA_ID]->Instance->CNDTR );
//    LOG(ALWAYS, ENDL);
  }
#endif
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <STM_InterruptEnable>:
void STM_InterruptEnable( void )
{
 800a172:	b580      	push	{r7, lr}
 800a174:	af00      	add	r7, sp, #0
//  STM_ResumeDMA();
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800a176:	200b      	movs	r0, #11
 800a178:	f7f7 fe51 	bl	8001e1e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800a17c:	200f      	movs	r0, #15
 800a17e:	f7f7 fe4e 	bl	8001e1e <HAL_NVIC_EnableIRQ>
}
 800a182:	bf00      	nop
 800a184:	bd80      	pop	{r7, pc}

0800a186 <STM_InterruptDisable>:
void STM_InterruptDisable( void )
{
 800a186:	b580      	push	{r7, lr}
 800a188:	af00      	add	r7, sp, #0
//  STM_PauseDMA();
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800a18a:	200b      	movs	r0, #11
 800a18c:	f7f7 fe55 	bl	8001e3a <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800a190:	200f      	movs	r0, #15
 800a192:	f7f7 fe52 	bl	8001e3a <HAL_NVIC_DisableIRQ>
}
 800a196:	bf00      	nop
 800a198:	bd80      	pop	{r7, pc}

0800a19a <STM_DCMIStart_DMA>:

///************************************************************************
// *                             DCMI Handlers                            *
// ***********************************************************************/
uint8_t	STM_DCMIStart_DMA( DCMI_HandleTypeDef * hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length )
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b086      	sub	sp, #24
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	60b9      	str	r1, [r7, #8]
 800a1a4:	607a      	str	r2, [r7, #4]
 800a1a6:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret = HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	75fb      	strb	r3, [r7, #23]
	ret = HAL_DCMI_Start_DMA( hdcmi, DCMI_Mode, pData, Length );
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	68b9      	ldr	r1, [r7, #8]
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7f7 fed6 	bl	8001f64 <HAL_DCMI_Start_DMA>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	75fb      	strb	r3, [r7, #23]
	return (uint8_t)ret;
 800a1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <STM_DCMIStop>:
uint8_t STM_DCMIStop( DCMI_HandleTypeDef * hdcmi )
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]
	ret = HAL_DCMI_Stop( hdcmi );
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7f8 f868 	bl	80022a8 <HAL_DCMI_Stop>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)ret;
 800a1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <STM_DCMISuspend>:
uint8_t STM_DCMISuspend( DCMI_HandleTypeDef * hdcmi )
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]
	ret = HAL_DCMI_Suspend( hdcmi );
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f7f8 f8b8 	bl	8002368 <HAL_DCMI_Suspend>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)ret;
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <STM_DCMIResume>:
uint8_t STM_DCMIResume( DCMI_HandleTypeDef * hdcmi )
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]
	ret = HAL_DCMI_Resume( hdcmi );
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7f8 f900 	bl	8002418 <HAL_DCMI_Resume>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)ret;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
	...

0800a228 <STM_UartTxDMA>:

/************************************************************************
 *                             UART Handlers                            *
 ***********************************************************************/
inline uint8_t STM_UartTxDMA( UART_Handle_t * huart, uint8_t * buffer, uint16_t length )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	4613      	mov	r3, r2
 800a234:	80fb      	strh	r3, [r7, #6]
  return HAL_UART_Transmit_DMA( Master.IOs->UART_Primary, buffer, length );//, UART_TIMEOUT ); //HAL_UART_Transmit_DMA
 800a236:	4b06      	ldr	r3, [pc, #24]	; (800a250 <STM_UartTxDMA+0x28>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	88fa      	ldrh	r2, [r7, #6]
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe fced 	bl	8008c20 <HAL_UART_Transmit_DMA>
 800a246:	4603      	mov	r3, r0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	200083bc 	.word	0x200083bc

0800a254 <STM_UartRxDMA>:

inline uint16_t STM_UartRxDMA( UART_Handle_t * huart, uint8_t * buffer )
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  ///TODO: Actually implement
  return 1;
 800a25e:	2301      	movs	r3, #1
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <STM_I2CMasterTx>:

/************************************************************************
 *                              I2C Handlers                            *
 ***********************************************************************/
inline void STM_I2CMasterTx( I2C_Handle_t * hi2c, uint16_t addr, uint8_t * buffer, uint16_t length, uint32_t timeout )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af02      	add	r7, sp, #8
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	607a      	str	r2, [r7, #4]
 800a276:	461a      	mov	r2, r3
 800a278:	460b      	mov	r3, r1
 800a27a:	817b      	strh	r3, [r7, #10]
 800a27c:	4613      	mov	r3, r2
 800a27e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit( hi2c, addr, buffer, length, timeout);
 800a280:	893a      	ldrh	r2, [r7, #8]
 800a282:	8979      	ldrh	r1, [r7, #10]
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	4613      	mov	r3, r2
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f7f9 fee7 	bl	8004060 <HAL_I2C_Master_Transmit>
}
 800a292:	bf00      	nop
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <STM_I2CMasterRx>:

inline void STM_I2CMasterRx( I2C_Handle_t * hi2c, uint16_t addr, uint8_t * buffer, uint16_t length, uint32_t timeout )
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b086      	sub	sp, #24
 800a29e:	af02      	add	r7, sp, #8
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	817b      	strh	r3, [r7, #10]
 800a2aa:	4613      	mov	r3, r2
 800a2ac:	813b      	strh	r3, [r7, #8]
	HAL_I2C_Master_Receive( hi2c, addr, buffer, length, timeout);
 800a2ae:	893a      	ldrh	r2, [r7, #8]
 800a2b0:	8979      	ldrh	r1, [r7, #10]
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f7f9 ffc4 	bl	8004248 <HAL_I2C_Master_Receive>
}
 800a2c0:	bf00      	nop
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <STM_SetPortMode>:

/************************************************************************
 *                             GPIO Handlers                            *
 ***********************************************************************/
inline void STM_SetPortMode( GPIO_TypeDef * port, uint16_t pin, uint8_t mode )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b088      	sub	sp, #32
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	807b      	strh	r3, [r7, #2]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	707b      	strb	r3, [r7, #1]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2d8:	f107 030c 	add.w	r3, r7, #12
 800a2dc:	2200      	movs	r2, #0
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	605a      	str	r2, [r3, #4]
 800a2e2:	609a      	str	r2, [r3, #8]
 800a2e4:	60da      	str	r2, [r3, #12]
 800a2e6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = pin;
 800a2e8:	887b      	ldrh	r3, [r7, #2]
 800a2ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = mode;
 800a2ec:	787b      	ldrb	r3, [r7, #1]
 800a2ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init( (GPIO_TypeDef *)port, &GPIO_InitStruct );
 800a2f0:	f107 030c 	add.w	r3, r7, #12
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f7f9 fc18 	bl	8003b2c <HAL_GPIO_Init>
}
 800a2fc:	bf00      	nop
 800a2fe:	3720      	adds	r7, #32
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <STM_ReadPort>:
inline uint8_t STM_ReadPort( GPIO_TypeDef * port )
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
    return port->IDR;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	b2db      	uxtb	r3, r3
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <STM_WritePin>:
inline void STM_WritePin( GPIO_TypeDef * port, uint16_t pin, uint8_t state )
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	460b      	mov	r3, r1
 800a328:	807b      	strh	r3, [r7, #2]
 800a32a:	4613      	mov	r3, r2
 800a32c:	707b      	strb	r3, [r7, #1]
  HAL_GPIO_WritePin( port, pin, (GPIO_PinState)state);
 800a32e:	787a      	ldrb	r2, [r7, #1]
 800a330:	887b      	ldrh	r3, [r7, #2]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7f9 fdd1 	bl	8003edc <HAL_GPIO_WritePin>
}
 800a33a:	bf00      	nop
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <STM_Timestamp>:

/************************************************************************
 *                             Time Handlers                            *
 ***********************************************************************/
inline uint32_t STM_Timestamp(void)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a346:	f7f7 fc21 	bl	8001b8c <HAL_GetTick>
 800a34a:	4603      	mov	r3, r0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <STM_Wait>:
inline void STM_Wait( uint32_t nTime )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  HAL_Delay( nTime );
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7f7 fc23 	bl	8001ba4 <HAL_Delay>
}
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <STM_SysClockFreq>:
inline uint32_t STM_SysClockFreq(void)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	af00      	add	r7, sp, #0
  return HAL_RCC_GetSysClockFreq();
 800a36a:	f7fb fd35 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 800a36e:	4603      	mov	r3, r0
}
 800a370:	4618      	mov	r0, r3
 800a372:	bd80      	pop	{r7, pc}

0800a374 <STM_Reset>:

/************************************************************************
 *                            System Handlers                           *
 ***********************************************************************/
void STM_Reset( void )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 800a378:	f7ff feda 	bl	800a130 <__NVIC_SystemReset>

0800a37c <__errno>:
 800a37c:	4b01      	ldr	r3, [pc, #4]	; (800a384 <__errno+0x8>)
 800a37e:	6818      	ldr	r0, [r3, #0]
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	200002b0 	.word	0x200002b0

0800a388 <__libc_init_array>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	4d0d      	ldr	r5, [pc, #52]	; (800a3c0 <__libc_init_array+0x38>)
 800a38c:	2600      	movs	r6, #0
 800a38e:	4c0d      	ldr	r4, [pc, #52]	; (800a3c4 <__libc_init_array+0x3c>)
 800a390:	1b64      	subs	r4, r4, r5
 800a392:	10a4      	asrs	r4, r4, #2
 800a394:	42a6      	cmp	r6, r4
 800a396:	d109      	bne.n	800a3ac <__libc_init_array+0x24>
 800a398:	4d0b      	ldr	r5, [pc, #44]	; (800a3c8 <__libc_init_array+0x40>)
 800a39a:	2600      	movs	r6, #0
 800a39c:	4c0b      	ldr	r4, [pc, #44]	; (800a3cc <__libc_init_array+0x44>)
 800a39e:	f002 fe37 	bl	800d010 <_init>
 800a3a2:	1b64      	subs	r4, r4, r5
 800a3a4:	10a4      	asrs	r4, r4, #2
 800a3a6:	42a6      	cmp	r6, r4
 800a3a8:	d105      	bne.n	800a3b6 <__libc_init_array+0x2e>
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}
 800a3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b0:	3601      	adds	r6, #1
 800a3b2:	4798      	blx	r3
 800a3b4:	e7ee      	b.n	800a394 <__libc_init_array+0xc>
 800a3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ba:	3601      	adds	r6, #1
 800a3bc:	4798      	blx	r3
 800a3be:	e7f2      	b.n	800a3a6 <__libc_init_array+0x1e>
 800a3c0:	0800d644 	.word	0x0800d644
 800a3c4:	0800d644 	.word	0x0800d644
 800a3c8:	0800d644 	.word	0x0800d644
 800a3cc:	0800d648 	.word	0x0800d648

0800a3d0 <memcpy>:
 800a3d0:	440a      	add	r2, r1
 800a3d2:	1e43      	subs	r3, r0, #1
 800a3d4:	4291      	cmp	r1, r2
 800a3d6:	d100      	bne.n	800a3da <memcpy+0xa>
 800a3d8:	4770      	bx	lr
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3e0:	4291      	cmp	r1, r2
 800a3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3e6:	d1f9      	bne.n	800a3dc <memcpy+0xc>
 800a3e8:	bd10      	pop	{r4, pc}

0800a3ea <memset>:
 800a3ea:	4402      	add	r2, r0
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d100      	bne.n	800a3f4 <memset+0xa>
 800a3f2:	4770      	bx	lr
 800a3f4:	f803 1b01 	strb.w	r1, [r3], #1
 800a3f8:	e7f9      	b.n	800a3ee <memset+0x4>

0800a3fa <__cvt>:
 800a3fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fe:	ec55 4b10 	vmov	r4, r5, d0
 800a402:	2d00      	cmp	r5, #0
 800a404:	460e      	mov	r6, r1
 800a406:	4619      	mov	r1, r3
 800a408:	462b      	mov	r3, r5
 800a40a:	bfb4      	ite	lt
 800a40c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a410:	2300      	movge	r3, #0
 800a412:	4691      	mov	r9, r2
 800a414:	bfbf      	itttt	lt
 800a416:	4622      	movlt	r2, r4
 800a418:	461d      	movlt	r5, r3
 800a41a:	232d      	movlt	r3, #45	; 0x2d
 800a41c:	4614      	movlt	r4, r2
 800a41e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a422:	700b      	strb	r3, [r1, #0]
 800a424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a426:	f023 0820 	bic.w	r8, r3, #32
 800a42a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a42e:	d005      	beq.n	800a43c <__cvt+0x42>
 800a430:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a434:	d100      	bne.n	800a438 <__cvt+0x3e>
 800a436:	3601      	adds	r6, #1
 800a438:	2102      	movs	r1, #2
 800a43a:	e000      	b.n	800a43e <__cvt+0x44>
 800a43c:	2103      	movs	r1, #3
 800a43e:	ab03      	add	r3, sp, #12
 800a440:	4632      	mov	r2, r6
 800a442:	9301      	str	r3, [sp, #4]
 800a444:	ab02      	add	r3, sp, #8
 800a446:	ec45 4b10 	vmov	d0, r4, r5
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	4653      	mov	r3, sl
 800a44e:	f000 fe37 	bl	800b0c0 <_dtoa_r>
 800a452:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a456:	4607      	mov	r7, r0
 800a458:	d102      	bne.n	800a460 <__cvt+0x66>
 800a45a:	f019 0f01 	tst.w	r9, #1
 800a45e:	d022      	beq.n	800a4a6 <__cvt+0xac>
 800a460:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a464:	eb07 0906 	add.w	r9, r7, r6
 800a468:	d110      	bne.n	800a48c <__cvt+0x92>
 800a46a:	783b      	ldrb	r3, [r7, #0]
 800a46c:	2b30      	cmp	r3, #48	; 0x30
 800a46e:	d10a      	bne.n	800a486 <__cvt+0x8c>
 800a470:	2200      	movs	r2, #0
 800a472:	2300      	movs	r3, #0
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f6 fb2a 	bl	8000ad0 <__aeabi_dcmpeq>
 800a47c:	b918      	cbnz	r0, 800a486 <__cvt+0x8c>
 800a47e:	f1c6 0601 	rsb	r6, r6, #1
 800a482:	f8ca 6000 	str.w	r6, [sl]
 800a486:	f8da 3000 	ldr.w	r3, [sl]
 800a48a:	4499      	add	r9, r3
 800a48c:	2200      	movs	r2, #0
 800a48e:	2300      	movs	r3, #0
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f6 fb1c 	bl	8000ad0 <__aeabi_dcmpeq>
 800a498:	b108      	cbz	r0, 800a49e <__cvt+0xa4>
 800a49a:	f8cd 900c 	str.w	r9, [sp, #12]
 800a49e:	2230      	movs	r2, #48	; 0x30
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	454b      	cmp	r3, r9
 800a4a4:	d307      	bcc.n	800a4b6 <__cvt+0xbc>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4ac:	1bdb      	subs	r3, r3, r7
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	b004      	add	sp, #16
 800a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b6:	1c59      	adds	r1, r3, #1
 800a4b8:	9103      	str	r1, [sp, #12]
 800a4ba:	701a      	strb	r2, [r3, #0]
 800a4bc:	e7f0      	b.n	800a4a0 <__cvt+0xa6>

0800a4be <__exponent>:
 800a4be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4c0:	2900      	cmp	r1, #0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	bfb8      	it	lt
 800a4c6:	4249      	neglt	r1, r1
 800a4c8:	f803 2b02 	strb.w	r2, [r3], #2
 800a4cc:	bfb4      	ite	lt
 800a4ce:	222d      	movlt	r2, #45	; 0x2d
 800a4d0:	222b      	movge	r2, #43	; 0x2b
 800a4d2:	2909      	cmp	r1, #9
 800a4d4:	7042      	strb	r2, [r0, #1]
 800a4d6:	dd2a      	ble.n	800a52e <__exponent+0x70>
 800a4d8:	f10d 0407 	add.w	r4, sp, #7
 800a4dc:	270a      	movs	r7, #10
 800a4de:	46a4      	mov	ip, r4
 800a4e0:	460a      	mov	r2, r1
 800a4e2:	46a6      	mov	lr, r4
 800a4e4:	3c01      	subs	r4, #1
 800a4e6:	2a63      	cmp	r2, #99	; 0x63
 800a4e8:	fb91 f6f7 	sdiv	r6, r1, r7
 800a4ec:	fb07 1516 	mls	r5, r7, r6, r1
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800a4f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a4fa:	dcf1      	bgt.n	800a4e0 <__exponent+0x22>
 800a4fc:	3130      	adds	r1, #48	; 0x30
 800a4fe:	f1ae 0502 	sub.w	r5, lr, #2
 800a502:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a506:	1c44      	adds	r4, r0, #1
 800a508:	4629      	mov	r1, r5
 800a50a:	4561      	cmp	r1, ip
 800a50c:	d30a      	bcc.n	800a524 <__exponent+0x66>
 800a50e:	f10d 0209 	add.w	r2, sp, #9
 800a512:	eba2 020e 	sub.w	r2, r2, lr
 800a516:	4565      	cmp	r5, ip
 800a518:	bf88      	it	hi
 800a51a:	2200      	movhi	r2, #0
 800a51c:	4413      	add	r3, r2
 800a51e:	1a18      	subs	r0, r3, r0
 800a520:	b003      	add	sp, #12
 800a522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a524:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a528:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a52c:	e7ed      	b.n	800a50a <__exponent+0x4c>
 800a52e:	2330      	movs	r3, #48	; 0x30
 800a530:	3130      	adds	r1, #48	; 0x30
 800a532:	7083      	strb	r3, [r0, #2]
 800a534:	1d03      	adds	r3, r0, #4
 800a536:	70c1      	strb	r1, [r0, #3]
 800a538:	e7f1      	b.n	800a51e <__exponent+0x60>
	...

0800a53c <_printf_float>:
 800a53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a540:	ed2d 8b02 	vpush	{d8}
 800a544:	b08d      	sub	sp, #52	; 0x34
 800a546:	460c      	mov	r4, r1
 800a548:	4616      	mov	r6, r2
 800a54a:	461f      	mov	r7, r3
 800a54c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a550:	4605      	mov	r5, r0
 800a552:	f001 fd57 	bl	800c004 <_localeconv_r>
 800a556:	f8d0 a000 	ldr.w	sl, [r0]
 800a55a:	4650      	mov	r0, sl
 800a55c:	f7f5 fe8c 	bl	8000278 <strlen>
 800a560:	2300      	movs	r3, #0
 800a562:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a566:	ee08 0a10 	vmov	s16, r0
 800a56a:	930a      	str	r3, [sp, #40]	; 0x28
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	9305      	str	r3, [sp, #20]
 800a570:	f8d8 3000 	ldr.w	r3, [r8]
 800a574:	3307      	adds	r3, #7
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	f103 0208 	add.w	r2, r3, #8
 800a57e:	f8c8 2000 	str.w	r2, [r8]
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a58a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a58e:	f04f 32ff 	mov.w	r2, #4294967295
 800a592:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a596:	f8cd 8018 	str.w	r8, [sp, #24]
 800a59a:	9307      	str	r3, [sp, #28]
 800a59c:	4b9e      	ldr	r3, [pc, #632]	; (800a818 <_printf_float+0x2dc>)
 800a59e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5a2:	f7f6 fac7 	bl	8000b34 <__aeabi_dcmpun>
 800a5a6:	bb88      	cbnz	r0, 800a60c <_printf_float+0xd0>
 800a5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ac:	4b9a      	ldr	r3, [pc, #616]	; (800a818 <_printf_float+0x2dc>)
 800a5ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5b2:	f7f6 faa1 	bl	8000af8 <__aeabi_dcmple>
 800a5b6:	bb48      	cbnz	r0, 800a60c <_printf_float+0xd0>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4640      	mov	r0, r8
 800a5be:	4649      	mov	r1, r9
 800a5c0:	f7f6 fa90 	bl	8000ae4 <__aeabi_dcmplt>
 800a5c4:	b110      	cbz	r0, 800a5cc <_printf_float+0x90>
 800a5c6:	232d      	movs	r3, #45	; 0x2d
 800a5c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5cc:	4b93      	ldr	r3, [pc, #588]	; (800a81c <_printf_float+0x2e0>)
 800a5ce:	4894      	ldr	r0, [pc, #592]	; (800a820 <_printf_float+0x2e4>)
 800a5d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5d4:	bf94      	ite	ls
 800a5d6:	4698      	movls	r8, r3
 800a5d8:	4680      	movhi	r8, r0
 800a5da:	2303      	movs	r3, #3
 800a5dc:	f04f 0900 	mov.w	r9, #0
 800a5e0:	6123      	str	r3, [r4, #16]
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	f023 0204 	bic.w	r2, r3, #4
 800a5e8:	6022      	str	r2, [r4, #0]
 800a5ea:	4633      	mov	r3, r6
 800a5ec:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	9700      	str	r7, [sp, #0]
 800a5f4:	f000 f9d8 	bl	800a9a8 <_printf_common>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	f040 8090 	bne.w	800a71e <_printf_float+0x1e2>
 800a5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a602:	b00d      	add	sp, #52	; 0x34
 800a604:	ecbd 8b02 	vpop	{d8}
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	4642      	mov	r2, r8
 800a60e:	464b      	mov	r3, r9
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f6 fa8e 	bl	8000b34 <__aeabi_dcmpun>
 800a618:	b140      	cbz	r0, 800a62c <_printf_float+0xf0>
 800a61a:	464b      	mov	r3, r9
 800a61c:	4881      	ldr	r0, [pc, #516]	; (800a824 <_printf_float+0x2e8>)
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bfbc      	itt	lt
 800a622:	232d      	movlt	r3, #45	; 0x2d
 800a624:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a628:	4b7f      	ldr	r3, [pc, #508]	; (800a828 <_printf_float+0x2ec>)
 800a62a:	e7d1      	b.n	800a5d0 <_printf_float+0x94>
 800a62c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a630:	6863      	ldr	r3, [r4, #4]
 800a632:	9206      	str	r2, [sp, #24]
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	d13f      	bne.n	800a6b8 <_printf_float+0x17c>
 800a638:	2306      	movs	r3, #6
 800a63a:	6063      	str	r3, [r4, #4]
 800a63c:	9b05      	ldr	r3, [sp, #20]
 800a63e:	4628      	mov	r0, r5
 800a640:	6861      	ldr	r1, [r4, #4]
 800a642:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a646:	2300      	movs	r3, #0
 800a648:	9303      	str	r3, [sp, #12]
 800a64a:	ab0a      	add	r3, sp, #40	; 0x28
 800a64c:	6022      	str	r2, [r4, #0]
 800a64e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a652:	ab09      	add	r3, sp, #36	; 0x24
 800a654:	ec49 8b10 	vmov	d0, r8, r9
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a65e:	f7ff fecc 	bl	800a3fa <__cvt>
 800a662:	9b06      	ldr	r3, [sp, #24]
 800a664:	4680      	mov	r8, r0
 800a666:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a668:	2b47      	cmp	r3, #71	; 0x47
 800a66a:	d108      	bne.n	800a67e <_printf_float+0x142>
 800a66c:	1cc8      	adds	r0, r1, #3
 800a66e:	db02      	blt.n	800a676 <_printf_float+0x13a>
 800a670:	6863      	ldr	r3, [r4, #4]
 800a672:	4299      	cmp	r1, r3
 800a674:	dd41      	ble.n	800a6fa <_printf_float+0x1be>
 800a676:	f1ab 0b02 	sub.w	fp, fp, #2
 800a67a:	fa5f fb8b 	uxtb.w	fp, fp
 800a67e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a682:	d820      	bhi.n	800a6c6 <_printf_float+0x18a>
 800a684:	3901      	subs	r1, #1
 800a686:	465a      	mov	r2, fp
 800a688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a68c:	9109      	str	r1, [sp, #36]	; 0x24
 800a68e:	f7ff ff16 	bl	800a4be <__exponent>
 800a692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a694:	4681      	mov	r9, r0
 800a696:	1813      	adds	r3, r2, r0
 800a698:	2a01      	cmp	r2, #1
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	dc02      	bgt.n	800a6a4 <_printf_float+0x168>
 800a69e:	6822      	ldr	r2, [r4, #0]
 800a6a0:	07d2      	lsls	r2, r2, #31
 800a6a2:	d501      	bpl.n	800a6a8 <_printf_float+0x16c>
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	6123      	str	r3, [r4, #16]
 800a6a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d09c      	beq.n	800a5ea <_printf_float+0xae>
 800a6b0:	232d      	movs	r3, #45	; 0x2d
 800a6b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6b6:	e798      	b.n	800a5ea <_printf_float+0xae>
 800a6b8:	9a06      	ldr	r2, [sp, #24]
 800a6ba:	2a47      	cmp	r2, #71	; 0x47
 800a6bc:	d1be      	bne.n	800a63c <_printf_float+0x100>
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1bc      	bne.n	800a63c <_printf_float+0x100>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e7b9      	b.n	800a63a <_printf_float+0xfe>
 800a6c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a6ca:	d118      	bne.n	800a6fe <_printf_float+0x1c2>
 800a6cc:	2900      	cmp	r1, #0
 800a6ce:	6863      	ldr	r3, [r4, #4]
 800a6d0:	dd0b      	ble.n	800a6ea <_printf_float+0x1ae>
 800a6d2:	6121      	str	r1, [r4, #16]
 800a6d4:	b913      	cbnz	r3, 800a6dc <_printf_float+0x1a0>
 800a6d6:	6822      	ldr	r2, [r4, #0]
 800a6d8:	07d0      	lsls	r0, r2, #31
 800a6da:	d502      	bpl.n	800a6e2 <_printf_float+0x1a6>
 800a6dc:	3301      	adds	r3, #1
 800a6de:	440b      	add	r3, r1
 800a6e0:	6123      	str	r3, [r4, #16]
 800a6e2:	f04f 0900 	mov.w	r9, #0
 800a6e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6e8:	e7de      	b.n	800a6a8 <_printf_float+0x16c>
 800a6ea:	b913      	cbnz	r3, 800a6f2 <_printf_float+0x1b6>
 800a6ec:	6822      	ldr	r2, [r4, #0]
 800a6ee:	07d2      	lsls	r2, r2, #31
 800a6f0:	d501      	bpl.n	800a6f6 <_printf_float+0x1ba>
 800a6f2:	3302      	adds	r3, #2
 800a6f4:	e7f4      	b.n	800a6e0 <_printf_float+0x1a4>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7f2      	b.n	800a6e0 <_printf_float+0x1a4>
 800a6fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a6fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a700:	4299      	cmp	r1, r3
 800a702:	db05      	blt.n	800a710 <_printf_float+0x1d4>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	6121      	str	r1, [r4, #16]
 800a708:	07d8      	lsls	r0, r3, #31
 800a70a:	d5ea      	bpl.n	800a6e2 <_printf_float+0x1a6>
 800a70c:	1c4b      	adds	r3, r1, #1
 800a70e:	e7e7      	b.n	800a6e0 <_printf_float+0x1a4>
 800a710:	2900      	cmp	r1, #0
 800a712:	bfd4      	ite	le
 800a714:	f1c1 0202 	rsble	r2, r1, #2
 800a718:	2201      	movgt	r2, #1
 800a71a:	4413      	add	r3, r2
 800a71c:	e7e0      	b.n	800a6e0 <_printf_float+0x1a4>
 800a71e:	6823      	ldr	r3, [r4, #0]
 800a720:	055a      	lsls	r2, r3, #21
 800a722:	d407      	bmi.n	800a734 <_printf_float+0x1f8>
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	4642      	mov	r2, r8
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	d12c      	bne.n	800a78c <_printf_float+0x250>
 800a732:	e764      	b.n	800a5fe <_printf_float+0xc2>
 800a734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a738:	f240 80e0 	bls.w	800a8fc <_printf_float+0x3c0>
 800a73c:	2200      	movs	r2, #0
 800a73e:	2300      	movs	r3, #0
 800a740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a744:	f7f6 f9c4 	bl	8000ad0 <__aeabi_dcmpeq>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d034      	beq.n	800a7b6 <_printf_float+0x27a>
 800a74c:	2301      	movs	r3, #1
 800a74e:	4a37      	ldr	r2, [pc, #220]	; (800a82c <_printf_float+0x2f0>)
 800a750:	4631      	mov	r1, r6
 800a752:	4628      	mov	r0, r5
 800a754:	47b8      	blx	r7
 800a756:	3001      	adds	r0, #1
 800a758:	f43f af51 	beq.w	800a5fe <_printf_float+0xc2>
 800a75c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a760:	429a      	cmp	r2, r3
 800a762:	db02      	blt.n	800a76a <_printf_float+0x22e>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	07d8      	lsls	r0, r3, #31
 800a768:	d510      	bpl.n	800a78c <_printf_float+0x250>
 800a76a:	ee18 3a10 	vmov	r3, s16
 800a76e:	4652      	mov	r2, sl
 800a770:	4631      	mov	r1, r6
 800a772:	4628      	mov	r0, r5
 800a774:	47b8      	blx	r7
 800a776:	3001      	adds	r0, #1
 800a778:	f43f af41 	beq.w	800a5fe <_printf_float+0xc2>
 800a77c:	f04f 0800 	mov.w	r8, #0
 800a780:	f104 091a 	add.w	r9, r4, #26
 800a784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a786:	3b01      	subs	r3, #1
 800a788:	4543      	cmp	r3, r8
 800a78a:	dc09      	bgt.n	800a7a0 <_printf_float+0x264>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	079b      	lsls	r3, r3, #30
 800a790:	f100 8105 	bmi.w	800a99e <_printf_float+0x462>
 800a794:	68e0      	ldr	r0, [r4, #12]
 800a796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a798:	4298      	cmp	r0, r3
 800a79a:	bfb8      	it	lt
 800a79c:	4618      	movlt	r0, r3
 800a79e:	e730      	b.n	800a602 <_printf_float+0xc6>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	464a      	mov	r2, r9
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	47b8      	blx	r7
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	f43f af27 	beq.w	800a5fe <_printf_float+0xc2>
 800a7b0:	f108 0801 	add.w	r8, r8, #1
 800a7b4:	e7e6      	b.n	800a784 <_printf_float+0x248>
 800a7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dc39      	bgt.n	800a830 <_printf_float+0x2f4>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	4a1b      	ldr	r2, [pc, #108]	; (800a82c <_printf_float+0x2f0>)
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	47b8      	blx	r7
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	f43f af19 	beq.w	800a5fe <_printf_float+0xc2>
 800a7cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	d102      	bne.n	800a7da <_printf_float+0x29e>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	07d9      	lsls	r1, r3, #31
 800a7d8:	d5d8      	bpl.n	800a78c <_printf_float+0x250>
 800a7da:	ee18 3a10 	vmov	r3, s16
 800a7de:	4652      	mov	r2, sl
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	47b8      	blx	r7
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f43f af09 	beq.w	800a5fe <_printf_float+0xc2>
 800a7ec:	f04f 0900 	mov.w	r9, #0
 800a7f0:	f104 0a1a 	add.w	sl, r4, #26
 800a7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f6:	425b      	negs	r3, r3
 800a7f8:	454b      	cmp	r3, r9
 800a7fa:	dc01      	bgt.n	800a800 <_printf_float+0x2c4>
 800a7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fe:	e792      	b.n	800a726 <_printf_float+0x1ea>
 800a800:	2301      	movs	r3, #1
 800a802:	4652      	mov	r2, sl
 800a804:	4631      	mov	r1, r6
 800a806:	4628      	mov	r0, r5
 800a808:	47b8      	blx	r7
 800a80a:	3001      	adds	r0, #1
 800a80c:	f43f aef7 	beq.w	800a5fe <_printf_float+0xc2>
 800a810:	f109 0901 	add.w	r9, r9, #1
 800a814:	e7ee      	b.n	800a7f4 <_printf_float+0x2b8>
 800a816:	bf00      	nop
 800a818:	7fefffff 	.word	0x7fefffff
 800a81c:	0800d268 	.word	0x0800d268
 800a820:	0800d26c 	.word	0x0800d26c
 800a824:	0800d274 	.word	0x0800d274
 800a828:	0800d270 	.word	0x0800d270
 800a82c:	0800d278 	.word	0x0800d278
 800a830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a834:	429a      	cmp	r2, r3
 800a836:	bfa8      	it	ge
 800a838:	461a      	movge	r2, r3
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	4691      	mov	r9, r2
 800a83e:	dc37      	bgt.n	800a8b0 <_printf_float+0x374>
 800a840:	f04f 0b00 	mov.w	fp, #0
 800a844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a848:	f104 021a 	add.w	r2, r4, #26
 800a84c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	eba3 0309 	sub.w	r3, r3, r9
 800a854:	455b      	cmp	r3, fp
 800a856:	dc33      	bgt.n	800a8c0 <_printf_float+0x384>
 800a858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a85c:	429a      	cmp	r2, r3
 800a85e:	db3b      	blt.n	800a8d8 <_printf_float+0x39c>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	07da      	lsls	r2, r3, #31
 800a864:	d438      	bmi.n	800a8d8 <_printf_float+0x39c>
 800a866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a868:	9a05      	ldr	r2, [sp, #20]
 800a86a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a86c:	1a9a      	subs	r2, r3, r2
 800a86e:	eba3 0901 	sub.w	r9, r3, r1
 800a872:	4591      	cmp	r9, r2
 800a874:	bfa8      	it	ge
 800a876:	4691      	movge	r9, r2
 800a878:	f1b9 0f00 	cmp.w	r9, #0
 800a87c:	dc35      	bgt.n	800a8ea <_printf_float+0x3ae>
 800a87e:	f04f 0800 	mov.w	r8, #0
 800a882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a886:	f104 0a1a 	add.w	sl, r4, #26
 800a88a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	eba3 0309 	sub.w	r3, r3, r9
 800a894:	4543      	cmp	r3, r8
 800a896:	f77f af79 	ble.w	800a78c <_printf_float+0x250>
 800a89a:	2301      	movs	r3, #1
 800a89c:	4652      	mov	r2, sl
 800a89e:	4631      	mov	r1, r6
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	47b8      	blx	r7
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	f43f aeaa 	beq.w	800a5fe <_printf_float+0xc2>
 800a8aa:	f108 0801 	add.w	r8, r8, #1
 800a8ae:	e7ec      	b.n	800a88a <_printf_float+0x34e>
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4642      	mov	r2, r8
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	47b8      	blx	r7
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	d1c0      	bne.n	800a840 <_printf_float+0x304>
 800a8be:	e69e      	b.n	800a5fe <_printf_float+0xc2>
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	9205      	str	r2, [sp, #20]
 800a8c8:	47b8      	blx	r7
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	f43f ae97 	beq.w	800a5fe <_printf_float+0xc2>
 800a8d0:	f10b 0b01 	add.w	fp, fp, #1
 800a8d4:	9a05      	ldr	r2, [sp, #20]
 800a8d6:	e7b9      	b.n	800a84c <_printf_float+0x310>
 800a8d8:	ee18 3a10 	vmov	r3, s16
 800a8dc:	4652      	mov	r2, sl
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d1be      	bne.n	800a866 <_printf_float+0x32a>
 800a8e8:	e689      	b.n	800a5fe <_printf_float+0xc2>
 800a8ea:	9a05      	ldr	r2, [sp, #20]
 800a8ec:	464b      	mov	r3, r9
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	4442      	add	r2, r8
 800a8f4:	47b8      	blx	r7
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	d1c1      	bne.n	800a87e <_printf_float+0x342>
 800a8fa:	e680      	b.n	800a5fe <_printf_float+0xc2>
 800a8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8fe:	2a01      	cmp	r2, #1
 800a900:	dc01      	bgt.n	800a906 <_printf_float+0x3ca>
 800a902:	07db      	lsls	r3, r3, #31
 800a904:	d538      	bpl.n	800a978 <_printf_float+0x43c>
 800a906:	2301      	movs	r3, #1
 800a908:	4642      	mov	r2, r8
 800a90a:	4631      	mov	r1, r6
 800a90c:	4628      	mov	r0, r5
 800a90e:	47b8      	blx	r7
 800a910:	3001      	adds	r0, #1
 800a912:	f43f ae74 	beq.w	800a5fe <_printf_float+0xc2>
 800a916:	ee18 3a10 	vmov	r3, s16
 800a91a:	4652      	mov	r2, sl
 800a91c:	4631      	mov	r1, r6
 800a91e:	4628      	mov	r0, r5
 800a920:	47b8      	blx	r7
 800a922:	3001      	adds	r0, #1
 800a924:	f43f ae6b 	beq.w	800a5fe <_printf_float+0xc2>
 800a928:	2200      	movs	r2, #0
 800a92a:	2300      	movs	r3, #0
 800a92c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a930:	f7f6 f8ce 	bl	8000ad0 <__aeabi_dcmpeq>
 800a934:	b9d8      	cbnz	r0, 800a96e <_printf_float+0x432>
 800a936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a938:	f108 0201 	add.w	r2, r8, #1
 800a93c:	3b01      	subs	r3, #1
 800a93e:	4631      	mov	r1, r6
 800a940:	4628      	mov	r0, r5
 800a942:	47b8      	blx	r7
 800a944:	3001      	adds	r0, #1
 800a946:	d10e      	bne.n	800a966 <_printf_float+0x42a>
 800a948:	e659      	b.n	800a5fe <_printf_float+0xc2>
 800a94a:	2301      	movs	r3, #1
 800a94c:	4652      	mov	r2, sl
 800a94e:	4631      	mov	r1, r6
 800a950:	4628      	mov	r0, r5
 800a952:	47b8      	blx	r7
 800a954:	3001      	adds	r0, #1
 800a956:	f43f ae52 	beq.w	800a5fe <_printf_float+0xc2>
 800a95a:	f108 0801 	add.w	r8, r8, #1
 800a95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a960:	3b01      	subs	r3, #1
 800a962:	4543      	cmp	r3, r8
 800a964:	dcf1      	bgt.n	800a94a <_printf_float+0x40e>
 800a966:	464b      	mov	r3, r9
 800a968:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a96c:	e6dc      	b.n	800a728 <_printf_float+0x1ec>
 800a96e:	f04f 0800 	mov.w	r8, #0
 800a972:	f104 0a1a 	add.w	sl, r4, #26
 800a976:	e7f2      	b.n	800a95e <_printf_float+0x422>
 800a978:	2301      	movs	r3, #1
 800a97a:	4642      	mov	r2, r8
 800a97c:	e7df      	b.n	800a93e <_printf_float+0x402>
 800a97e:	2301      	movs	r3, #1
 800a980:	464a      	mov	r2, r9
 800a982:	4631      	mov	r1, r6
 800a984:	4628      	mov	r0, r5
 800a986:	47b8      	blx	r7
 800a988:	3001      	adds	r0, #1
 800a98a:	f43f ae38 	beq.w	800a5fe <_printf_float+0xc2>
 800a98e:	f108 0801 	add.w	r8, r8, #1
 800a992:	68e3      	ldr	r3, [r4, #12]
 800a994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a996:	1a5b      	subs	r3, r3, r1
 800a998:	4543      	cmp	r3, r8
 800a99a:	dcf0      	bgt.n	800a97e <_printf_float+0x442>
 800a99c:	e6fa      	b.n	800a794 <_printf_float+0x258>
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	f104 0919 	add.w	r9, r4, #25
 800a9a6:	e7f4      	b.n	800a992 <_printf_float+0x456>

0800a9a8 <_printf_common>:
 800a9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ac:	4616      	mov	r6, r2
 800a9ae:	4699      	mov	r9, r3
 800a9b0:	688a      	ldr	r2, [r1, #8]
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	690b      	ldr	r3, [r1, #16]
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	bfb8      	it	lt
 800a9c0:	4613      	movlt	r3, r2
 800a9c2:	6033      	str	r3, [r6, #0]
 800a9c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9c8:	b10a      	cbz	r2, 800a9ce <_printf_common+0x26>
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	6033      	str	r3, [r6, #0]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	0699      	lsls	r1, r3, #26
 800a9d2:	bf42      	ittt	mi
 800a9d4:	6833      	ldrmi	r3, [r6, #0]
 800a9d6:	3302      	addmi	r3, #2
 800a9d8:	6033      	strmi	r3, [r6, #0]
 800a9da:	6825      	ldr	r5, [r4, #0]
 800a9dc:	f015 0506 	ands.w	r5, r5, #6
 800a9e0:	d106      	bne.n	800a9f0 <_printf_common+0x48>
 800a9e2:	f104 0a19 	add.w	sl, r4, #25
 800a9e6:	68e3      	ldr	r3, [r4, #12]
 800a9e8:	6832      	ldr	r2, [r6, #0]
 800a9ea:	1a9b      	subs	r3, r3, r2
 800a9ec:	42ab      	cmp	r3, r5
 800a9ee:	dc29      	bgt.n	800aa44 <_printf_common+0x9c>
 800a9f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9f4:	1e13      	subs	r3, r2, #0
 800a9f6:	6822      	ldr	r2, [r4, #0]
 800a9f8:	bf18      	it	ne
 800a9fa:	2301      	movne	r3, #1
 800a9fc:	0692      	lsls	r2, r2, #26
 800a9fe:	d42e      	bmi.n	800aa5e <_printf_common+0xb6>
 800aa00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa04:	4649      	mov	r1, r9
 800aa06:	4638      	mov	r0, r7
 800aa08:	47c0      	blx	r8
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	d021      	beq.n	800aa52 <_printf_common+0xaa>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	341a      	adds	r4, #26
 800aa12:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800aa16:	f003 0306 	and.w	r3, r3, #6
 800aa1a:	6832      	ldr	r2, [r6, #0]
 800aa1c:	2600      	movs	r6, #0
 800aa1e:	2b04      	cmp	r3, #4
 800aa20:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa24:	bf08      	it	eq
 800aa26:	1aad      	subeq	r5, r5, r2
 800aa28:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800aa2c:	bf14      	ite	ne
 800aa2e:	2500      	movne	r5, #0
 800aa30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa34:	4293      	cmp	r3, r2
 800aa36:	bfc4      	itt	gt
 800aa38:	1a9b      	subgt	r3, r3, r2
 800aa3a:	18ed      	addgt	r5, r5, r3
 800aa3c:	42b5      	cmp	r5, r6
 800aa3e:	d11a      	bne.n	800aa76 <_printf_common+0xce>
 800aa40:	2000      	movs	r0, #0
 800aa42:	e008      	b.n	800aa56 <_printf_common+0xae>
 800aa44:	2301      	movs	r3, #1
 800aa46:	4652      	mov	r2, sl
 800aa48:	4649      	mov	r1, r9
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	47c0      	blx	r8
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d103      	bne.n	800aa5a <_printf_common+0xb2>
 800aa52:	f04f 30ff 	mov.w	r0, #4294967295
 800aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5a:	3501      	adds	r5, #1
 800aa5c:	e7c3      	b.n	800a9e6 <_printf_common+0x3e>
 800aa5e:	18e1      	adds	r1, r4, r3
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	2030      	movs	r0, #48	; 0x30
 800aa64:	3302      	adds	r3, #2
 800aa66:	4422      	add	r2, r4
 800aa68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa74:	e7c4      	b.n	800aa00 <_printf_common+0x58>
 800aa76:	2301      	movs	r3, #1
 800aa78:	4622      	mov	r2, r4
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	47c0      	blx	r8
 800aa80:	3001      	adds	r0, #1
 800aa82:	d0e6      	beq.n	800aa52 <_printf_common+0xaa>
 800aa84:	3601      	adds	r6, #1
 800aa86:	e7d9      	b.n	800aa3c <_printf_common+0x94>

0800aa88 <_printf_i>:
 800aa88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8c:	7e0f      	ldrb	r7, [r1, #24]
 800aa8e:	4691      	mov	r9, r2
 800aa90:	4680      	mov	r8, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	2f78      	cmp	r7, #120	; 0x78
 800aa96:	469a      	mov	sl, r3
 800aa98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa9e:	d807      	bhi.n	800aab0 <_printf_i+0x28>
 800aaa0:	2f62      	cmp	r7, #98	; 0x62
 800aaa2:	d80a      	bhi.n	800aaba <_printf_i+0x32>
 800aaa4:	2f00      	cmp	r7, #0
 800aaa6:	f000 80d8 	beq.w	800ac5a <_printf_i+0x1d2>
 800aaaa:	2f58      	cmp	r7, #88	; 0x58
 800aaac:	f000 80a3 	beq.w	800abf6 <_printf_i+0x16e>
 800aab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aab8:	e03a      	b.n	800ab30 <_printf_i+0xa8>
 800aaba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aabe:	2b15      	cmp	r3, #21
 800aac0:	d8f6      	bhi.n	800aab0 <_printf_i+0x28>
 800aac2:	a101      	add	r1, pc, #4	; (adr r1, 800aac8 <_printf_i+0x40>)
 800aac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aac8:	0800ab21 	.word	0x0800ab21
 800aacc:	0800ab35 	.word	0x0800ab35
 800aad0:	0800aab1 	.word	0x0800aab1
 800aad4:	0800aab1 	.word	0x0800aab1
 800aad8:	0800aab1 	.word	0x0800aab1
 800aadc:	0800aab1 	.word	0x0800aab1
 800aae0:	0800ab35 	.word	0x0800ab35
 800aae4:	0800aab1 	.word	0x0800aab1
 800aae8:	0800aab1 	.word	0x0800aab1
 800aaec:	0800aab1 	.word	0x0800aab1
 800aaf0:	0800aab1 	.word	0x0800aab1
 800aaf4:	0800ac41 	.word	0x0800ac41
 800aaf8:	0800ab65 	.word	0x0800ab65
 800aafc:	0800ac23 	.word	0x0800ac23
 800ab00:	0800aab1 	.word	0x0800aab1
 800ab04:	0800aab1 	.word	0x0800aab1
 800ab08:	0800ac63 	.word	0x0800ac63
 800ab0c:	0800aab1 	.word	0x0800aab1
 800ab10:	0800ab65 	.word	0x0800ab65
 800ab14:	0800aab1 	.word	0x0800aab1
 800ab18:	0800aab1 	.word	0x0800aab1
 800ab1c:	0800ac2b 	.word	0x0800ac2b
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	1d1a      	adds	r2, r3, #4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	602a      	str	r2, [r5, #0]
 800ab28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab30:	2301      	movs	r3, #1
 800ab32:	e0a3      	b.n	800ac7c <_printf_i+0x1f4>
 800ab34:	6820      	ldr	r0, [r4, #0]
 800ab36:	6829      	ldr	r1, [r5, #0]
 800ab38:	0606      	lsls	r6, r0, #24
 800ab3a:	f101 0304 	add.w	r3, r1, #4
 800ab3e:	d50a      	bpl.n	800ab56 <_printf_i+0xce>
 800ab40:	680e      	ldr	r6, [r1, #0]
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	2e00      	cmp	r6, #0
 800ab46:	da03      	bge.n	800ab50 <_printf_i+0xc8>
 800ab48:	232d      	movs	r3, #45	; 0x2d
 800ab4a:	4276      	negs	r6, r6
 800ab4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab50:	485e      	ldr	r0, [pc, #376]	; (800accc <_printf_i+0x244>)
 800ab52:	230a      	movs	r3, #10
 800ab54:	e019      	b.n	800ab8a <_printf_i+0x102>
 800ab56:	680e      	ldr	r6, [r1, #0]
 800ab58:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	bf18      	it	ne
 800ab60:	b236      	sxthne	r6, r6
 800ab62:	e7ef      	b.n	800ab44 <_printf_i+0xbc>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	6820      	ldr	r0, [r4, #0]
 800ab68:	1d19      	adds	r1, r3, #4
 800ab6a:	6029      	str	r1, [r5, #0]
 800ab6c:	0601      	lsls	r1, r0, #24
 800ab6e:	d501      	bpl.n	800ab74 <_printf_i+0xec>
 800ab70:	681e      	ldr	r6, [r3, #0]
 800ab72:	e002      	b.n	800ab7a <_printf_i+0xf2>
 800ab74:	0646      	lsls	r6, r0, #25
 800ab76:	d5fb      	bpl.n	800ab70 <_printf_i+0xe8>
 800ab78:	881e      	ldrh	r6, [r3, #0]
 800ab7a:	2f6f      	cmp	r7, #111	; 0x6f
 800ab7c:	4853      	ldr	r0, [pc, #332]	; (800accc <_printf_i+0x244>)
 800ab7e:	bf0c      	ite	eq
 800ab80:	2308      	moveq	r3, #8
 800ab82:	230a      	movne	r3, #10
 800ab84:	2100      	movs	r1, #0
 800ab86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab8a:	6865      	ldr	r5, [r4, #4]
 800ab8c:	2d00      	cmp	r5, #0
 800ab8e:	60a5      	str	r5, [r4, #8]
 800ab90:	bfa2      	ittt	ge
 800ab92:	6821      	ldrge	r1, [r4, #0]
 800ab94:	f021 0104 	bicge.w	r1, r1, #4
 800ab98:	6021      	strge	r1, [r4, #0]
 800ab9a:	b90e      	cbnz	r6, 800aba0 <_printf_i+0x118>
 800ab9c:	2d00      	cmp	r5, #0
 800ab9e:	d04d      	beq.n	800ac3c <_printf_i+0x1b4>
 800aba0:	4615      	mov	r5, r2
 800aba2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aba6:	fb03 6711 	mls	r7, r3, r1, r6
 800abaa:	5dc7      	ldrb	r7, [r0, r7]
 800abac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abb0:	4637      	mov	r7, r6
 800abb2:	460e      	mov	r6, r1
 800abb4:	42bb      	cmp	r3, r7
 800abb6:	d9f4      	bls.n	800aba2 <_printf_i+0x11a>
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d10b      	bne.n	800abd4 <_printf_i+0x14c>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	07de      	lsls	r6, r3, #31
 800abc0:	d508      	bpl.n	800abd4 <_printf_i+0x14c>
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	6861      	ldr	r1, [r4, #4]
 800abc6:	4299      	cmp	r1, r3
 800abc8:	bfde      	ittt	le
 800abca:	2330      	movle	r3, #48	; 0x30
 800abcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abd4:	1b52      	subs	r2, r2, r5
 800abd6:	6122      	str	r2, [r4, #16]
 800abd8:	464b      	mov	r3, r9
 800abda:	aa03      	add	r2, sp, #12
 800abdc:	4621      	mov	r1, r4
 800abde:	4640      	mov	r0, r8
 800abe0:	f8cd a000 	str.w	sl, [sp]
 800abe4:	f7ff fee0 	bl	800a9a8 <_printf_common>
 800abe8:	3001      	adds	r0, #1
 800abea:	d14c      	bne.n	800ac86 <_printf_i+0x1fe>
 800abec:	f04f 30ff 	mov.w	r0, #4294967295
 800abf0:	b004      	add	sp, #16
 800abf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf6:	4835      	ldr	r0, [pc, #212]	; (800accc <_printf_i+0x244>)
 800abf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800abfc:	6829      	ldr	r1, [r5, #0]
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac04:	6029      	str	r1, [r5, #0]
 800ac06:	061d      	lsls	r5, r3, #24
 800ac08:	d514      	bpl.n	800ac34 <_printf_i+0x1ac>
 800ac0a:	07df      	lsls	r7, r3, #31
 800ac0c:	bf44      	itt	mi
 800ac0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac12:	6023      	strmi	r3, [r4, #0]
 800ac14:	b91e      	cbnz	r6, 800ac1e <_printf_i+0x196>
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	f023 0320 	bic.w	r3, r3, #32
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	2310      	movs	r3, #16
 800ac20:	e7b0      	b.n	800ab84 <_printf_i+0xfc>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	f043 0320 	orr.w	r3, r3, #32
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	2378      	movs	r3, #120	; 0x78
 800ac2c:	4828      	ldr	r0, [pc, #160]	; (800acd0 <_printf_i+0x248>)
 800ac2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac32:	e7e3      	b.n	800abfc <_printf_i+0x174>
 800ac34:	0659      	lsls	r1, r3, #25
 800ac36:	bf48      	it	mi
 800ac38:	b2b6      	uxthmi	r6, r6
 800ac3a:	e7e6      	b.n	800ac0a <_printf_i+0x182>
 800ac3c:	4615      	mov	r5, r2
 800ac3e:	e7bb      	b.n	800abb8 <_printf_i+0x130>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	6826      	ldr	r6, [r4, #0]
 800ac44:	1d18      	adds	r0, r3, #4
 800ac46:	6961      	ldr	r1, [r4, #20]
 800ac48:	6028      	str	r0, [r5, #0]
 800ac4a:	0635      	lsls	r5, r6, #24
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	d501      	bpl.n	800ac54 <_printf_i+0x1cc>
 800ac50:	6019      	str	r1, [r3, #0]
 800ac52:	e002      	b.n	800ac5a <_printf_i+0x1d2>
 800ac54:	0670      	lsls	r0, r6, #25
 800ac56:	d5fb      	bpl.n	800ac50 <_printf_i+0x1c8>
 800ac58:	8019      	strh	r1, [r3, #0]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4615      	mov	r5, r2
 800ac5e:	6123      	str	r3, [r4, #16]
 800ac60:	e7ba      	b.n	800abd8 <_printf_i+0x150>
 800ac62:	682b      	ldr	r3, [r5, #0]
 800ac64:	2100      	movs	r1, #0
 800ac66:	1d1a      	adds	r2, r3, #4
 800ac68:	602a      	str	r2, [r5, #0]
 800ac6a:	681d      	ldr	r5, [r3, #0]
 800ac6c:	6862      	ldr	r2, [r4, #4]
 800ac6e:	4628      	mov	r0, r5
 800ac70:	f001 fa3c 	bl	800c0ec <memchr>
 800ac74:	b108      	cbz	r0, 800ac7a <_printf_i+0x1f2>
 800ac76:	1b40      	subs	r0, r0, r5
 800ac78:	6060      	str	r0, [r4, #4]
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac84:	e7a8      	b.n	800abd8 <_printf_i+0x150>
 800ac86:	6923      	ldr	r3, [r4, #16]
 800ac88:	462a      	mov	r2, r5
 800ac8a:	4649      	mov	r1, r9
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	47d0      	blx	sl
 800ac90:	3001      	adds	r0, #1
 800ac92:	d0ab      	beq.n	800abec <_printf_i+0x164>
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	079b      	lsls	r3, r3, #30
 800ac98:	d413      	bmi.n	800acc2 <_printf_i+0x23a>
 800ac9a:	68e0      	ldr	r0, [r4, #12]
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	4298      	cmp	r0, r3
 800aca0:	bfb8      	it	lt
 800aca2:	4618      	movlt	r0, r3
 800aca4:	e7a4      	b.n	800abf0 <_printf_i+0x168>
 800aca6:	2301      	movs	r3, #1
 800aca8:	4632      	mov	r2, r6
 800acaa:	4649      	mov	r1, r9
 800acac:	4640      	mov	r0, r8
 800acae:	47d0      	blx	sl
 800acb0:	3001      	adds	r0, #1
 800acb2:	d09b      	beq.n	800abec <_printf_i+0x164>
 800acb4:	3501      	adds	r5, #1
 800acb6:	68e3      	ldr	r3, [r4, #12]
 800acb8:	9903      	ldr	r1, [sp, #12]
 800acba:	1a5b      	subs	r3, r3, r1
 800acbc:	42ab      	cmp	r3, r5
 800acbe:	dcf2      	bgt.n	800aca6 <_printf_i+0x21e>
 800acc0:	e7eb      	b.n	800ac9a <_printf_i+0x212>
 800acc2:	2500      	movs	r5, #0
 800acc4:	f104 0619 	add.w	r6, r4, #25
 800acc8:	e7f5      	b.n	800acb6 <_printf_i+0x22e>
 800acca:	bf00      	nop
 800accc:	0800d27a 	.word	0x0800d27a
 800acd0:	0800d28b 	.word	0x0800d28b

0800acd4 <iprintf>:
 800acd4:	b40f      	push	{r0, r1, r2, r3}
 800acd6:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <iprintf+0x2c>)
 800acd8:	b513      	push	{r0, r1, r4, lr}
 800acda:	681c      	ldr	r4, [r3, #0]
 800acdc:	b124      	cbz	r4, 800ace8 <iprintf+0x14>
 800acde:	69a3      	ldr	r3, [r4, #24]
 800ace0:	b913      	cbnz	r3, 800ace8 <iprintf+0x14>
 800ace2:	4620      	mov	r0, r4
 800ace4:	f001 f8f0 	bl	800bec8 <__sinit>
 800ace8:	ab05      	add	r3, sp, #20
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	68a1      	ldr	r1, [r4, #8]
 800acee:	4620      	mov	r0, r4
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	f001 feb3 	bl	800ca5c <_vfiprintf_r>
 800acf6:	b002      	add	sp, #8
 800acf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acfc:	b004      	add	sp, #16
 800acfe:	4770      	bx	lr
 800ad00:	200002b0 	.word	0x200002b0

0800ad04 <putchar>:
 800ad04:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <putchar+0x28>)
 800ad06:	b513      	push	{r0, r1, r4, lr}
 800ad08:	681c      	ldr	r4, [r3, #0]
 800ad0a:	4601      	mov	r1, r0
 800ad0c:	b134      	cbz	r4, 800ad1c <putchar+0x18>
 800ad0e:	69a3      	ldr	r3, [r4, #24]
 800ad10:	b923      	cbnz	r3, 800ad1c <putchar+0x18>
 800ad12:	9001      	str	r0, [sp, #4]
 800ad14:	4620      	mov	r0, r4
 800ad16:	f001 f8d7 	bl	800bec8 <__sinit>
 800ad1a:	9901      	ldr	r1, [sp, #4]
 800ad1c:	68a2      	ldr	r2, [r4, #8]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	b002      	add	sp, #8
 800ad22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad26:	f001 bfc9 	b.w	800ccbc <_putc_r>
 800ad2a:	bf00      	nop
 800ad2c:	200002b0 	.word	0x200002b0

0800ad30 <_puts_r>:
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	460e      	mov	r6, r1
 800ad34:	4605      	mov	r5, r0
 800ad36:	b118      	cbz	r0, 800ad40 <_puts_r+0x10>
 800ad38:	6983      	ldr	r3, [r0, #24]
 800ad3a:	b90b      	cbnz	r3, 800ad40 <_puts_r+0x10>
 800ad3c:	f001 f8c4 	bl	800bec8 <__sinit>
 800ad40:	69ab      	ldr	r3, [r5, #24]
 800ad42:	68ac      	ldr	r4, [r5, #8]
 800ad44:	b913      	cbnz	r3, 800ad4c <_puts_r+0x1c>
 800ad46:	4628      	mov	r0, r5
 800ad48:	f001 f8be 	bl	800bec8 <__sinit>
 800ad4c:	4b2c      	ldr	r3, [pc, #176]	; (800ae00 <_puts_r+0xd0>)
 800ad4e:	429c      	cmp	r4, r3
 800ad50:	d120      	bne.n	800ad94 <_puts_r+0x64>
 800ad52:	686c      	ldr	r4, [r5, #4]
 800ad54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad56:	07db      	lsls	r3, r3, #31
 800ad58:	d405      	bmi.n	800ad66 <_puts_r+0x36>
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	0598      	lsls	r0, r3, #22
 800ad5e:	d402      	bmi.n	800ad66 <_puts_r+0x36>
 800ad60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad62:	f001 f954 	bl	800c00e <__retarget_lock_acquire_recursive>
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	0719      	lsls	r1, r3, #28
 800ad6a:	d51d      	bpl.n	800ada8 <_puts_r+0x78>
 800ad6c:	6923      	ldr	r3, [r4, #16]
 800ad6e:	b1db      	cbz	r3, 800ada8 <_puts_r+0x78>
 800ad70:	3e01      	subs	r6, #1
 800ad72:	68a3      	ldr	r3, [r4, #8]
 800ad74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	60a3      	str	r3, [r4, #8]
 800ad7c:	bb39      	cbnz	r1, 800adce <_puts_r+0x9e>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	da38      	bge.n	800adf4 <_puts_r+0xc4>
 800ad82:	4622      	mov	r2, r4
 800ad84:	210a      	movs	r1, #10
 800ad86:	4628      	mov	r0, r5
 800ad88:	f000 f848 	bl	800ae1c <__swbuf_r>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d011      	beq.n	800adb4 <_puts_r+0x84>
 800ad90:	250a      	movs	r5, #10
 800ad92:	e011      	b.n	800adb8 <_puts_r+0x88>
 800ad94:	4b1b      	ldr	r3, [pc, #108]	; (800ae04 <_puts_r+0xd4>)
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d101      	bne.n	800ad9e <_puts_r+0x6e>
 800ad9a:	68ac      	ldr	r4, [r5, #8]
 800ad9c:	e7da      	b.n	800ad54 <_puts_r+0x24>
 800ad9e:	4b1a      	ldr	r3, [pc, #104]	; (800ae08 <_puts_r+0xd8>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	bf08      	it	eq
 800ada4:	68ec      	ldreq	r4, [r5, #12]
 800ada6:	e7d5      	b.n	800ad54 <_puts_r+0x24>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f888 	bl	800aec0 <__swsetup_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0dd      	beq.n	800ad70 <_puts_r+0x40>
 800adb4:	f04f 35ff 	mov.w	r5, #4294967295
 800adb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adba:	07da      	lsls	r2, r3, #31
 800adbc:	d405      	bmi.n	800adca <_puts_r+0x9a>
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	059b      	lsls	r3, r3, #22
 800adc2:	d402      	bmi.n	800adca <_puts_r+0x9a>
 800adc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc6:	f001 f923 	bl	800c010 <__retarget_lock_release_recursive>
 800adca:	4628      	mov	r0, r5
 800adcc:	bd70      	pop	{r4, r5, r6, pc}
 800adce:	2b00      	cmp	r3, #0
 800add0:	da04      	bge.n	800addc <_puts_r+0xac>
 800add2:	69a2      	ldr	r2, [r4, #24]
 800add4:	429a      	cmp	r2, r3
 800add6:	dc06      	bgt.n	800ade6 <_puts_r+0xb6>
 800add8:	290a      	cmp	r1, #10
 800adda:	d004      	beq.n	800ade6 <_puts_r+0xb6>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	6022      	str	r2, [r4, #0]
 800ade2:	7019      	strb	r1, [r3, #0]
 800ade4:	e7c5      	b.n	800ad72 <_puts_r+0x42>
 800ade6:	4622      	mov	r2, r4
 800ade8:	4628      	mov	r0, r5
 800adea:	f000 f817 	bl	800ae1c <__swbuf_r>
 800adee:	3001      	adds	r0, #1
 800adf0:	d1bf      	bne.n	800ad72 <_puts_r+0x42>
 800adf2:	e7df      	b.n	800adb4 <_puts_r+0x84>
 800adf4:	6823      	ldr	r3, [r4, #0]
 800adf6:	250a      	movs	r5, #10
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	6022      	str	r2, [r4, #0]
 800adfc:	701d      	strb	r5, [r3, #0]
 800adfe:	e7db      	b.n	800adb8 <_puts_r+0x88>
 800ae00:	0800d34c 	.word	0x0800d34c
 800ae04:	0800d36c 	.word	0x0800d36c
 800ae08:	0800d32c 	.word	0x0800d32c

0800ae0c <puts>:
 800ae0c:	4b02      	ldr	r3, [pc, #8]	; (800ae18 <puts+0xc>)
 800ae0e:	4601      	mov	r1, r0
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	f7ff bf8d 	b.w	800ad30 <_puts_r>
 800ae16:	bf00      	nop
 800ae18:	200002b0 	.word	0x200002b0

0800ae1c <__swbuf_r>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	460e      	mov	r6, r1
 800ae20:	4614      	mov	r4, r2
 800ae22:	4605      	mov	r5, r0
 800ae24:	b118      	cbz	r0, 800ae2e <__swbuf_r+0x12>
 800ae26:	6983      	ldr	r3, [r0, #24]
 800ae28:	b90b      	cbnz	r3, 800ae2e <__swbuf_r+0x12>
 800ae2a:	f001 f84d 	bl	800bec8 <__sinit>
 800ae2e:	4b21      	ldr	r3, [pc, #132]	; (800aeb4 <__swbuf_r+0x98>)
 800ae30:	429c      	cmp	r4, r3
 800ae32:	d12b      	bne.n	800ae8c <__swbuf_r+0x70>
 800ae34:	686c      	ldr	r4, [r5, #4]
 800ae36:	69a3      	ldr	r3, [r4, #24]
 800ae38:	60a3      	str	r3, [r4, #8]
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	071a      	lsls	r2, r3, #28
 800ae3e:	d52f      	bpl.n	800aea0 <__swbuf_r+0x84>
 800ae40:	6923      	ldr	r3, [r4, #16]
 800ae42:	b36b      	cbz	r3, 800aea0 <__swbuf_r+0x84>
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	b2f6      	uxtb	r6, r6
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	4637      	mov	r7, r6
 800ae4c:	1ac0      	subs	r0, r0, r3
 800ae4e:	6963      	ldr	r3, [r4, #20]
 800ae50:	4283      	cmp	r3, r0
 800ae52:	dc04      	bgt.n	800ae5e <__swbuf_r+0x42>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 ffa2 	bl	800bda0 <_fflush_r>
 800ae5c:	bb30      	cbnz	r0, 800aeac <__swbuf_r+0x90>
 800ae5e:	68a3      	ldr	r3, [r4, #8]
 800ae60:	3001      	adds	r0, #1
 800ae62:	3b01      	subs	r3, #1
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	6022      	str	r2, [r4, #0]
 800ae6c:	701e      	strb	r6, [r3, #0]
 800ae6e:	6963      	ldr	r3, [r4, #20]
 800ae70:	4283      	cmp	r3, r0
 800ae72:	d004      	beq.n	800ae7e <__swbuf_r+0x62>
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	07db      	lsls	r3, r3, #31
 800ae78:	d506      	bpl.n	800ae88 <__swbuf_r+0x6c>
 800ae7a:	2e0a      	cmp	r6, #10
 800ae7c:	d104      	bne.n	800ae88 <__swbuf_r+0x6c>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	4628      	mov	r0, r5
 800ae82:	f000 ff8d 	bl	800bda0 <_fflush_r>
 800ae86:	b988      	cbnz	r0, 800aeac <__swbuf_r+0x90>
 800ae88:	4638      	mov	r0, r7
 800ae8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae8c:	4b0a      	ldr	r3, [pc, #40]	; (800aeb8 <__swbuf_r+0x9c>)
 800ae8e:	429c      	cmp	r4, r3
 800ae90:	d101      	bne.n	800ae96 <__swbuf_r+0x7a>
 800ae92:	68ac      	ldr	r4, [r5, #8]
 800ae94:	e7cf      	b.n	800ae36 <__swbuf_r+0x1a>
 800ae96:	4b09      	ldr	r3, [pc, #36]	; (800aebc <__swbuf_r+0xa0>)
 800ae98:	429c      	cmp	r4, r3
 800ae9a:	bf08      	it	eq
 800ae9c:	68ec      	ldreq	r4, [r5, #12]
 800ae9e:	e7ca      	b.n	800ae36 <__swbuf_r+0x1a>
 800aea0:	4621      	mov	r1, r4
 800aea2:	4628      	mov	r0, r5
 800aea4:	f000 f80c 	bl	800aec0 <__swsetup_r>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d0cb      	beq.n	800ae44 <__swbuf_r+0x28>
 800aeac:	f04f 37ff 	mov.w	r7, #4294967295
 800aeb0:	e7ea      	b.n	800ae88 <__swbuf_r+0x6c>
 800aeb2:	bf00      	nop
 800aeb4:	0800d34c 	.word	0x0800d34c
 800aeb8:	0800d36c 	.word	0x0800d36c
 800aebc:	0800d32c 	.word	0x0800d32c

0800aec0 <__swsetup_r>:
 800aec0:	4b32      	ldr	r3, [pc, #200]	; (800af8c <__swsetup_r+0xcc>)
 800aec2:	b570      	push	{r4, r5, r6, lr}
 800aec4:	681d      	ldr	r5, [r3, #0]
 800aec6:	4606      	mov	r6, r0
 800aec8:	460c      	mov	r4, r1
 800aeca:	b125      	cbz	r5, 800aed6 <__swsetup_r+0x16>
 800aecc:	69ab      	ldr	r3, [r5, #24]
 800aece:	b913      	cbnz	r3, 800aed6 <__swsetup_r+0x16>
 800aed0:	4628      	mov	r0, r5
 800aed2:	f000 fff9 	bl	800bec8 <__sinit>
 800aed6:	4b2e      	ldr	r3, [pc, #184]	; (800af90 <__swsetup_r+0xd0>)
 800aed8:	429c      	cmp	r4, r3
 800aeda:	d10f      	bne.n	800aefc <__swsetup_r+0x3c>
 800aedc:	686c      	ldr	r4, [r5, #4]
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aee4:	0719      	lsls	r1, r3, #28
 800aee6:	d42c      	bmi.n	800af42 <__swsetup_r+0x82>
 800aee8:	06dd      	lsls	r5, r3, #27
 800aeea:	d411      	bmi.n	800af10 <__swsetup_r+0x50>
 800aeec:	2309      	movs	r3, #9
 800aeee:	6033      	str	r3, [r6, #0]
 800aef0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aef4:	f04f 30ff 	mov.w	r0, #4294967295
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	e03e      	b.n	800af7a <__swsetup_r+0xba>
 800aefc:	4b25      	ldr	r3, [pc, #148]	; (800af94 <__swsetup_r+0xd4>)
 800aefe:	429c      	cmp	r4, r3
 800af00:	d101      	bne.n	800af06 <__swsetup_r+0x46>
 800af02:	68ac      	ldr	r4, [r5, #8]
 800af04:	e7eb      	b.n	800aede <__swsetup_r+0x1e>
 800af06:	4b24      	ldr	r3, [pc, #144]	; (800af98 <__swsetup_r+0xd8>)
 800af08:	429c      	cmp	r4, r3
 800af0a:	bf08      	it	eq
 800af0c:	68ec      	ldreq	r4, [r5, #12]
 800af0e:	e7e6      	b.n	800aede <__swsetup_r+0x1e>
 800af10:	0758      	lsls	r0, r3, #29
 800af12:	d512      	bpl.n	800af3a <__swsetup_r+0x7a>
 800af14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af16:	b141      	cbz	r1, 800af2a <__swsetup_r+0x6a>
 800af18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af1c:	4299      	cmp	r1, r3
 800af1e:	d002      	beq.n	800af26 <__swsetup_r+0x66>
 800af20:	4630      	mov	r0, r6
 800af22:	f001 fc91 	bl	800c848 <_free_r>
 800af26:	2300      	movs	r3, #0
 800af28:	6363      	str	r3, [r4, #52]	; 0x34
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	2300      	movs	r3, #0
 800af34:	6063      	str	r3, [r4, #4]
 800af36:	6923      	ldr	r3, [r4, #16]
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	f043 0308 	orr.w	r3, r3, #8
 800af40:	81a3      	strh	r3, [r4, #12]
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	b94b      	cbnz	r3, 800af5a <__swsetup_r+0x9a>
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af50:	d003      	beq.n	800af5a <__swsetup_r+0x9a>
 800af52:	4621      	mov	r1, r4
 800af54:	4630      	mov	r0, r6
 800af56:	f001 f881 	bl	800c05c <__smakebuf_r>
 800af5a:	89a0      	ldrh	r0, [r4, #12]
 800af5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af60:	f010 0301 	ands.w	r3, r0, #1
 800af64:	d00a      	beq.n	800af7c <__swsetup_r+0xbc>
 800af66:	2300      	movs	r3, #0
 800af68:	60a3      	str	r3, [r4, #8]
 800af6a:	6963      	ldr	r3, [r4, #20]
 800af6c:	425b      	negs	r3, r3
 800af6e:	61a3      	str	r3, [r4, #24]
 800af70:	6923      	ldr	r3, [r4, #16]
 800af72:	b943      	cbnz	r3, 800af86 <__swsetup_r+0xc6>
 800af74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af78:	d1ba      	bne.n	800aef0 <__swsetup_r+0x30>
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	0781      	lsls	r1, r0, #30
 800af7e:	bf58      	it	pl
 800af80:	6963      	ldrpl	r3, [r4, #20]
 800af82:	60a3      	str	r3, [r4, #8]
 800af84:	e7f4      	b.n	800af70 <__swsetup_r+0xb0>
 800af86:	2000      	movs	r0, #0
 800af88:	e7f7      	b.n	800af7a <__swsetup_r+0xba>
 800af8a:	bf00      	nop
 800af8c:	200002b0 	.word	0x200002b0
 800af90:	0800d34c 	.word	0x0800d34c
 800af94:	0800d36c 	.word	0x0800d36c
 800af98:	0800d32c 	.word	0x0800d32c

0800af9c <quorem>:
 800af9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	6903      	ldr	r3, [r0, #16]
 800afa2:	4607      	mov	r7, r0
 800afa4:	690c      	ldr	r4, [r1, #16]
 800afa6:	42a3      	cmp	r3, r4
 800afa8:	f2c0 8087 	blt.w	800b0ba <quorem+0x11e>
 800afac:	3c01      	subs	r4, #1
 800afae:	f100 0514 	add.w	r5, r0, #20
 800afb2:	f101 0814 	add.w	r8, r1, #20
 800afb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afbe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800afc2:	9301      	str	r3, [sp, #4]
 800afc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afcc:	3301      	adds	r3, #1
 800afce:	429a      	cmp	r2, r3
 800afd0:	fbb2 f6f3 	udiv	r6, r2, r3
 800afd4:	d335      	bcc.n	800b042 <quorem+0xa6>
 800afd6:	f04f 0e00 	mov.w	lr, #0
 800afda:	4640      	mov	r0, r8
 800afdc:	46ac      	mov	ip, r5
 800afde:	46f2      	mov	sl, lr
 800afe0:	f850 2b04 	ldr.w	r2, [r0], #4
 800afe4:	b293      	uxth	r3, r2
 800afe6:	4581      	cmp	r9, r0
 800afe8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800afec:	fb06 e303 	mla	r3, r6, r3, lr
 800aff0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	fb06 e202 	mla	r2, r6, r2, lr
 800affa:	ebaa 0303 	sub.w	r3, sl, r3
 800affe:	f8dc a000 	ldr.w	sl, [ip]
 800b002:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b006:	fa1f fa8a 	uxth.w	sl, sl
 800b00a:	b292      	uxth	r2, r2
 800b00c:	4453      	add	r3, sl
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	f8dc 3000 	ldr.w	r3, [ip]
 800b014:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 800b018:	9b00      	ldr	r3, [sp, #0]
 800b01a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b01e:	f8bd 3000 	ldrh.w	r3, [sp]
 800b022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b026:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b02a:	f84c 3b04 	str.w	r3, [ip], #4
 800b02e:	d2d7      	bcs.n	800afe0 <quorem+0x44>
 800b030:	f855 300b 	ldr.w	r3, [r5, fp]
 800b034:	b92b      	cbnz	r3, 800b042 <quorem+0xa6>
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	3b04      	subs	r3, #4
 800b03a:	429d      	cmp	r5, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	d330      	bcc.n	800b0a2 <quorem+0x106>
 800b040:	613c      	str	r4, [r7, #16]
 800b042:	4638      	mov	r0, r7
 800b044:	f001 fae2 	bl	800c60c <__mcmp>
 800b048:	2800      	cmp	r0, #0
 800b04a:	db26      	blt.n	800b09a <quorem+0xfe>
 800b04c:	3601      	adds	r6, #1
 800b04e:	4628      	mov	r0, r5
 800b050:	f04f 0c00 	mov.w	ip, #0
 800b054:	f858 1b04 	ldr.w	r1, [r8], #4
 800b058:	f8d0 e000 	ldr.w	lr, [r0]
 800b05c:	b28b      	uxth	r3, r1
 800b05e:	45c1      	cmp	r9, r8
 800b060:	fa1f f28e 	uxth.w	r2, lr
 800b064:	ebac 0303 	sub.w	r3, ip, r3
 800b068:	4413      	add	r3, r2
 800b06a:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800b06e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b072:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b076:	b29b      	uxth	r3, r3
 800b078:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b07c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b080:	f840 3b04 	str.w	r3, [r0], #4
 800b084:	d2e6      	bcs.n	800b054 <quorem+0xb8>
 800b086:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b08a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b08e:	b922      	cbnz	r2, 800b09a <quorem+0xfe>
 800b090:	3b04      	subs	r3, #4
 800b092:	429d      	cmp	r5, r3
 800b094:	461a      	mov	r2, r3
 800b096:	d30a      	bcc.n	800b0ae <quorem+0x112>
 800b098:	613c      	str	r4, [r7, #16]
 800b09a:	4630      	mov	r0, r6
 800b09c:	b003      	add	sp, #12
 800b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a2:	6812      	ldr	r2, [r2, #0]
 800b0a4:	3b04      	subs	r3, #4
 800b0a6:	2a00      	cmp	r2, #0
 800b0a8:	d1ca      	bne.n	800b040 <quorem+0xa4>
 800b0aa:	3c01      	subs	r4, #1
 800b0ac:	e7c5      	b.n	800b03a <quorem+0x9e>
 800b0ae:	6812      	ldr	r2, [r2, #0]
 800b0b0:	3b04      	subs	r3, #4
 800b0b2:	2a00      	cmp	r2, #0
 800b0b4:	d1f0      	bne.n	800b098 <quorem+0xfc>
 800b0b6:	3c01      	subs	r4, #1
 800b0b8:	e7eb      	b.n	800b092 <quorem+0xf6>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	e7ee      	b.n	800b09c <quorem+0x100>
	...

0800b0c0 <_dtoa_r>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	ee10 aa10 	vmov	sl, s0
 800b0cc:	ed2d 8b04 	vpush	{d8-d9}
 800b0d0:	b093      	sub	sp, #76	; 0x4c
 800b0d2:	ec57 6b10 	vmov	r6, r7, d0
 800b0d6:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b0da:	46bb      	mov	fp, r7
 800b0dc:	9106      	str	r1, [sp, #24]
 800b0de:	9209      	str	r2, [sp, #36]	; 0x24
 800b0e0:	930c      	str	r3, [sp, #48]	; 0x30
 800b0e2:	b975      	cbnz	r5, 800b102 <_dtoa_r+0x42>
 800b0e4:	2010      	movs	r0, #16
 800b0e6:	f000 fff9 	bl	800c0dc <malloc>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	6260      	str	r0, [r4, #36]	; 0x24
 800b0ee:	b920      	cbnz	r0, 800b0fa <_dtoa_r+0x3a>
 800b0f0:	4ba7      	ldr	r3, [pc, #668]	; (800b390 <_dtoa_r+0x2d0>)
 800b0f2:	21ea      	movs	r1, #234	; 0xea
 800b0f4:	48a7      	ldr	r0, [pc, #668]	; (800b394 <_dtoa_r+0x2d4>)
 800b0f6:	f001 fe8f 	bl	800ce18 <__assert_func>
 800b0fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0fe:	6005      	str	r5, [r0, #0]
 800b100:	60c5      	str	r5, [r0, #12]
 800b102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b104:	6819      	ldr	r1, [r3, #0]
 800b106:	b151      	cbz	r1, 800b11e <_dtoa_r+0x5e>
 800b108:	685a      	ldr	r2, [r3, #4]
 800b10a:	2301      	movs	r3, #1
 800b10c:	4620      	mov	r0, r4
 800b10e:	4093      	lsls	r3, r2
 800b110:	604a      	str	r2, [r1, #4]
 800b112:	608b      	str	r3, [r1, #8]
 800b114:	f001 f838 	bl	800c188 <_Bfree>
 800b118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	1e3b      	subs	r3, r7, #0
 800b120:	bfad      	iteet	ge
 800b122:	2300      	movge	r3, #0
 800b124:	2201      	movlt	r2, #1
 800b126:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b12a:	f8c8 3000 	strge.w	r3, [r8]
 800b12e:	4b9a      	ldr	r3, [pc, #616]	; (800b398 <_dtoa_r+0x2d8>)
 800b130:	bfb8      	it	lt
 800b132:	f8c8 2000 	strlt.w	r2, [r8]
 800b136:	ea33 030b 	bics.w	r3, r3, fp
 800b13a:	d11b      	bne.n	800b174 <_dtoa_r+0xb4>
 800b13c:	f242 730f 	movw	r3, #9999	; 0x270f
 800b140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b142:	6013      	str	r3, [r2, #0]
 800b144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b148:	4333      	orrs	r3, r6
 800b14a:	f000 858f 	beq.w	800bc6c <_dtoa_r+0xbac>
 800b14e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b150:	b963      	cbnz	r3, 800b16c <_dtoa_r+0xac>
 800b152:	4b92      	ldr	r3, [pc, #584]	; (800b39c <_dtoa_r+0x2dc>)
 800b154:	e022      	b.n	800b19c <_dtoa_r+0xdc>
 800b156:	4b92      	ldr	r3, [pc, #584]	; (800b3a0 <_dtoa_r+0x2e0>)
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	3308      	adds	r3, #8
 800b15c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	9801      	ldr	r0, [sp, #4]
 800b162:	b013      	add	sp, #76	; 0x4c
 800b164:	ecbd 8b04 	vpop	{d8-d9}
 800b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16c:	4b8b      	ldr	r3, [pc, #556]	; (800b39c <_dtoa_r+0x2dc>)
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	3303      	adds	r3, #3
 800b172:	e7f3      	b.n	800b15c <_dtoa_r+0x9c>
 800b174:	2200      	movs	r2, #0
 800b176:	2300      	movs	r3, #0
 800b178:	4650      	mov	r0, sl
 800b17a:	4659      	mov	r1, fp
 800b17c:	f7f5 fca8 	bl	8000ad0 <__aeabi_dcmpeq>
 800b180:	4680      	mov	r8, r0
 800b182:	ec4b ab19 	vmov	d9, sl, fp
 800b186:	b158      	cbz	r0, 800b1a0 <_dtoa_r+0xe0>
 800b188:	2301      	movs	r3, #1
 800b18a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 8568 	beq.w	800bc66 <_dtoa_r+0xba6>
 800b196:	4883      	ldr	r0, [pc, #524]	; (800b3a4 <_dtoa_r+0x2e4>)
 800b198:	6018      	str	r0, [r3, #0]
 800b19a:	1e43      	subs	r3, r0, #1
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	e7df      	b.n	800b160 <_dtoa_r+0xa0>
 800b1a0:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b1a4:	aa10      	add	r2, sp, #64	; 0x40
 800b1a6:	a911      	add	r1, sp, #68	; 0x44
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	ec4b ab10 	vmov	d0, sl, fp
 800b1ae:	f001 fad9 	bl	800c764 <__d2b>
 800b1b2:	ee08 0a10 	vmov	s16, r0
 800b1b6:	2d00      	cmp	r5, #0
 800b1b8:	f000 8082 	beq.w	800b2c0 <_dtoa_r+0x200>
 800b1bc:	ee19 3a90 	vmov	r3, s19
 800b1c0:	4656      	mov	r6, sl
 800b1c2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b1c6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b1ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b1d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	4b73      	ldr	r3, [pc, #460]	; (800b3a8 <_dtoa_r+0x2e8>)
 800b1da:	4630      	mov	r0, r6
 800b1dc:	4639      	mov	r1, r7
 800b1de:	f7f5 f857 	bl	8000290 <__aeabi_dsub>
 800b1e2:	a365      	add	r3, pc, #404	; (adr r3, 800b378 <_dtoa_r+0x2b8>)
 800b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e8:	f7f5 fa0a 	bl	8000600 <__aeabi_dmul>
 800b1ec:	a364      	add	r3, pc, #400	; (adr r3, 800b380 <_dtoa_r+0x2c0>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	f7f5 f84f 	bl	8000294 <__adddf3>
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	460f      	mov	r7, r1
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f7f5 f996 	bl	800052c <__aeabi_i2d>
 800b200:	a361      	add	r3, pc, #388	; (adr r3, 800b388 <_dtoa_r+0x2c8>)
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	f7f5 f9fb 	bl	8000600 <__aeabi_dmul>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	4630      	mov	r0, r6
 800b210:	4639      	mov	r1, r7
 800b212:	f7f5 f83f 	bl	8000294 <__adddf3>
 800b216:	4606      	mov	r6, r0
 800b218:	460f      	mov	r7, r1
 800b21a:	f7f5 fca1 	bl	8000b60 <__aeabi_d2iz>
 800b21e:	2200      	movs	r2, #0
 800b220:	9000      	str	r0, [sp, #0]
 800b222:	2300      	movs	r3, #0
 800b224:	4630      	mov	r0, r6
 800b226:	4639      	mov	r1, r7
 800b228:	f7f5 fc5c 	bl	8000ae4 <__aeabi_dcmplt>
 800b22c:	b150      	cbz	r0, 800b244 <_dtoa_r+0x184>
 800b22e:	9800      	ldr	r0, [sp, #0]
 800b230:	f7f5 f97c 	bl	800052c <__aeabi_i2d>
 800b234:	4632      	mov	r2, r6
 800b236:	463b      	mov	r3, r7
 800b238:	f7f5 fc4a 	bl	8000ad0 <__aeabi_dcmpeq>
 800b23c:	b910      	cbnz	r0, 800b244 <_dtoa_r+0x184>
 800b23e:	9b00      	ldr	r3, [sp, #0]
 800b240:	3b01      	subs	r3, #1
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	9b00      	ldr	r3, [sp, #0]
 800b246:	2b16      	cmp	r3, #22
 800b248:	d859      	bhi.n	800b2fe <_dtoa_r+0x23e>
 800b24a:	9a00      	ldr	r2, [sp, #0]
 800b24c:	4b57      	ldr	r3, [pc, #348]	; (800b3ac <_dtoa_r+0x2ec>)
 800b24e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b252:	ec51 0b19 	vmov	r0, r1, d9
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 fc43 	bl	8000ae4 <__aeabi_dcmplt>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d04f      	beq.n	800b302 <_dtoa_r+0x242>
 800b262:	9b00      	ldr	r3, [sp, #0]
 800b264:	3b01      	subs	r3, #1
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	2300      	movs	r3, #0
 800b26a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b26c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b26e:	1b5d      	subs	r5, r3, r5
 800b270:	1e6b      	subs	r3, r5, #1
 800b272:	9305      	str	r3, [sp, #20]
 800b274:	bf49      	itett	mi
 800b276:	f1c5 0301 	rsbmi	r3, r5, #1
 800b27a:	2300      	movpl	r3, #0
 800b27c:	9304      	strmi	r3, [sp, #16]
 800b27e:	2300      	movmi	r3, #0
 800b280:	bf54      	ite	pl
 800b282:	9304      	strpl	r3, [sp, #16]
 800b284:	9305      	strmi	r3, [sp, #20]
 800b286:	9b00      	ldr	r3, [sp, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	db3c      	blt.n	800b306 <_dtoa_r+0x246>
 800b28c:	9b05      	ldr	r3, [sp, #20]
 800b28e:	9a00      	ldr	r2, [sp, #0]
 800b290:	4413      	add	r3, r2
 800b292:	920a      	str	r2, [sp, #40]	; 0x28
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	2300      	movs	r3, #0
 800b298:	9307      	str	r3, [sp, #28]
 800b29a:	9b06      	ldr	r3, [sp, #24]
 800b29c:	2b09      	cmp	r3, #9
 800b29e:	f200 8089 	bhi.w	800b3b4 <_dtoa_r+0x2f4>
 800b2a2:	2b05      	cmp	r3, #5
 800b2a4:	bfc5      	ittet	gt
 800b2a6:	3b04      	subgt	r3, #4
 800b2a8:	2500      	movgt	r5, #0
 800b2aa:	2501      	movle	r5, #1
 800b2ac:	9306      	strgt	r3, [sp, #24]
 800b2ae:	9b06      	ldr	r3, [sp, #24]
 800b2b0:	3b02      	subs	r3, #2
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	f200 8089 	bhi.w	800b3ca <_dtoa_r+0x30a>
 800b2b8:	e8df f003 	tbb	[pc, r3]
 800b2bc:	5a393b2e 	.word	0x5a393b2e
 800b2c0:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b2c4:	441d      	add	r5, r3
 800b2c6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b2ca:	2b20      	cmp	r3, #32
 800b2cc:	bfc6      	itte	gt
 800b2ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b2d2:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b2d6:	f1c3 0320 	rsble	r3, r3, #32
 800b2da:	f105 35ff 	add.w	r5, r5, #4294967295
 800b2de:	bfc5      	ittet	gt
 800b2e0:	fa0b f303 	lslgt.w	r3, fp, r3
 800b2e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b2e8:	fa06 f003 	lslle.w	r0, r6, r3
 800b2ec:	4318      	orrgt	r0, r3
 800b2ee:	f7f5 f90d 	bl	800050c <__aeabi_ui2d>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	4606      	mov	r6, r0
 800b2f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b2fa:	930e      	str	r3, [sp, #56]	; 0x38
 800b2fc:	e76b      	b.n	800b1d6 <_dtoa_r+0x116>
 800b2fe:	2301      	movs	r3, #1
 800b300:	e7b3      	b.n	800b26a <_dtoa_r+0x1aa>
 800b302:	900b      	str	r0, [sp, #44]	; 0x2c
 800b304:	e7b2      	b.n	800b26c <_dtoa_r+0x1ac>
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	9a00      	ldr	r2, [sp, #0]
 800b30a:	1a9b      	subs	r3, r3, r2
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	4253      	negs	r3, r2
 800b310:	9307      	str	r3, [sp, #28]
 800b312:	2300      	movs	r3, #0
 800b314:	930a      	str	r3, [sp, #40]	; 0x28
 800b316:	e7c0      	b.n	800b29a <_dtoa_r+0x1da>
 800b318:	2300      	movs	r3, #0
 800b31a:	9308      	str	r3, [sp, #32]
 800b31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dc56      	bgt.n	800b3d0 <_dtoa_r+0x310>
 800b322:	2301      	movs	r3, #1
 800b324:	461a      	mov	r2, r3
 800b326:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b32a:	9209      	str	r2, [sp, #36]	; 0x24
 800b32c:	e00c      	b.n	800b348 <_dtoa_r+0x288>
 800b32e:	2301      	movs	r3, #1
 800b330:	e7f3      	b.n	800b31a <_dtoa_r+0x25a>
 800b332:	2300      	movs	r3, #0
 800b334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b336:	9308      	str	r3, [sp, #32]
 800b338:	9b00      	ldr	r3, [sp, #0]
 800b33a:	4413      	add	r3, r2
 800b33c:	9302      	str	r3, [sp, #8]
 800b33e:	3301      	adds	r3, #1
 800b340:	2b01      	cmp	r3, #1
 800b342:	9303      	str	r3, [sp, #12]
 800b344:	bfb8      	it	lt
 800b346:	2301      	movlt	r3, #1
 800b348:	2200      	movs	r2, #0
 800b34a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b34c:	6042      	str	r2, [r0, #4]
 800b34e:	2204      	movs	r2, #4
 800b350:	f102 0614 	add.w	r6, r2, #20
 800b354:	6841      	ldr	r1, [r0, #4]
 800b356:	429e      	cmp	r6, r3
 800b358:	d93e      	bls.n	800b3d8 <_dtoa_r+0x318>
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fed4 	bl	800c108 <_Balloc>
 800b360:	9001      	str	r0, [sp, #4]
 800b362:	2800      	cmp	r0, #0
 800b364:	d13c      	bne.n	800b3e0 <_dtoa_r+0x320>
 800b366:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <_dtoa_r+0x2f0>)
 800b368:	4602      	mov	r2, r0
 800b36a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b36e:	e6c1      	b.n	800b0f4 <_dtoa_r+0x34>
 800b370:	2301      	movs	r3, #1
 800b372:	e7df      	b.n	800b334 <_dtoa_r+0x274>
 800b374:	f3af 8000 	nop.w
 800b378:	636f4361 	.word	0x636f4361
 800b37c:	3fd287a7 	.word	0x3fd287a7
 800b380:	8b60c8b3 	.word	0x8b60c8b3
 800b384:	3fc68a28 	.word	0x3fc68a28
 800b388:	509f79fb 	.word	0x509f79fb
 800b38c:	3fd34413 	.word	0x3fd34413
 800b390:	0800d2a9 	.word	0x0800d2a9
 800b394:	0800d2c0 	.word	0x0800d2c0
 800b398:	7ff00000 	.word	0x7ff00000
 800b39c:	0800d2a5 	.word	0x0800d2a5
 800b3a0:	0800d29c 	.word	0x0800d29c
 800b3a4:	0800d279 	.word	0x0800d279
 800b3a8:	3ff80000 	.word	0x3ff80000
 800b3ac:	0800d410 	.word	0x0800d410
 800b3b0:	0800d31b 	.word	0x0800d31b
 800b3b4:	2501      	movs	r5, #1
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	9508      	str	r5, [sp, #32]
 800b3ba:	9306      	str	r3, [sp, #24]
 800b3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3c6:	2312      	movs	r3, #18
 800b3c8:	e7af      	b.n	800b32a <_dtoa_r+0x26a>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	9308      	str	r3, [sp, #32]
 800b3ce:	e7f5      	b.n	800b3bc <_dtoa_r+0x2fc>
 800b3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3d6:	e7b7      	b.n	800b348 <_dtoa_r+0x288>
 800b3d8:	3101      	adds	r1, #1
 800b3da:	0052      	lsls	r2, r2, #1
 800b3dc:	6041      	str	r1, [r0, #4]
 800b3de:	e7b7      	b.n	800b350 <_dtoa_r+0x290>
 800b3e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3e2:	9a01      	ldr	r2, [sp, #4]
 800b3e4:	601a      	str	r2, [r3, #0]
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	2b0e      	cmp	r3, #14
 800b3ea:	f200 809d 	bhi.w	800b528 <_dtoa_r+0x468>
 800b3ee:	2d00      	cmp	r5, #0
 800b3f0:	f000 809a 	beq.w	800b528 <_dtoa_r+0x468>
 800b3f4:	9b00      	ldr	r3, [sp, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	dd32      	ble.n	800b460 <_dtoa_r+0x3a0>
 800b3fa:	f003 030f 	and.w	r3, r3, #15
 800b3fe:	4ab6      	ldr	r2, [pc, #728]	; (800b6d8 <_dtoa_r+0x618>)
 800b400:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b404:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b408:	9b00      	ldr	r3, [sp, #0]
 800b40a:	05d8      	lsls	r0, r3, #23
 800b40c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b410:	d516      	bpl.n	800b440 <_dtoa_r+0x380>
 800b412:	4bb2      	ldr	r3, [pc, #712]	; (800b6dc <_dtoa_r+0x61c>)
 800b414:	f007 070f 	and.w	r7, r7, #15
 800b418:	2503      	movs	r5, #3
 800b41a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b41e:	ec51 0b19 	vmov	r0, r1, d9
 800b422:	f7f5 fa17 	bl	8000854 <__aeabi_ddiv>
 800b426:	4682      	mov	sl, r0
 800b428:	468b      	mov	fp, r1
 800b42a:	4eac      	ldr	r6, [pc, #688]	; (800b6dc <_dtoa_r+0x61c>)
 800b42c:	b957      	cbnz	r7, 800b444 <_dtoa_r+0x384>
 800b42e:	4642      	mov	r2, r8
 800b430:	464b      	mov	r3, r9
 800b432:	4650      	mov	r0, sl
 800b434:	4659      	mov	r1, fp
 800b436:	f7f5 fa0d 	bl	8000854 <__aeabi_ddiv>
 800b43a:	4682      	mov	sl, r0
 800b43c:	468b      	mov	fp, r1
 800b43e:	e028      	b.n	800b492 <_dtoa_r+0x3d2>
 800b440:	2502      	movs	r5, #2
 800b442:	e7f2      	b.n	800b42a <_dtoa_r+0x36a>
 800b444:	07f9      	lsls	r1, r7, #31
 800b446:	d508      	bpl.n	800b45a <_dtoa_r+0x39a>
 800b448:	4640      	mov	r0, r8
 800b44a:	4649      	mov	r1, r9
 800b44c:	3501      	adds	r5, #1
 800b44e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b452:	f7f5 f8d5 	bl	8000600 <__aeabi_dmul>
 800b456:	4680      	mov	r8, r0
 800b458:	4689      	mov	r9, r1
 800b45a:	107f      	asrs	r7, r7, #1
 800b45c:	3608      	adds	r6, #8
 800b45e:	e7e5      	b.n	800b42c <_dtoa_r+0x36c>
 800b460:	f000 809b 	beq.w	800b59a <_dtoa_r+0x4da>
 800b464:	9b00      	ldr	r3, [sp, #0]
 800b466:	2502      	movs	r5, #2
 800b468:	4f9c      	ldr	r7, [pc, #624]	; (800b6dc <_dtoa_r+0x61c>)
 800b46a:	425e      	negs	r6, r3
 800b46c:	4b9a      	ldr	r3, [pc, #616]	; (800b6d8 <_dtoa_r+0x618>)
 800b46e:	f006 020f 	and.w	r2, r6, #15
 800b472:	1136      	asrs	r6, r6, #4
 800b474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b478:	ec51 0b19 	vmov	r0, r1, d9
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f7f5 f8be 	bl	8000600 <__aeabi_dmul>
 800b484:	2300      	movs	r3, #0
 800b486:	4682      	mov	sl, r0
 800b488:	468b      	mov	fp, r1
 800b48a:	2e00      	cmp	r6, #0
 800b48c:	d17a      	bne.n	800b584 <_dtoa_r+0x4c4>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1d3      	bne.n	800b43a <_dtoa_r+0x37a>
 800b492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 8082 	beq.w	800b59e <_dtoa_r+0x4de>
 800b49a:	2200      	movs	r2, #0
 800b49c:	4b90      	ldr	r3, [pc, #576]	; (800b6e0 <_dtoa_r+0x620>)
 800b49e:	4650      	mov	r0, sl
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	f7f5 fb1f 	bl	8000ae4 <__aeabi_dcmplt>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d079      	beq.n	800b59e <_dtoa_r+0x4de>
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d076      	beq.n	800b59e <_dtoa_r+0x4de>
 800b4b0:	9b02      	ldr	r3, [sp, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	dd36      	ble.n	800b524 <_dtoa_r+0x464>
 800b4b6:	9b00      	ldr	r3, [sp, #0]
 800b4b8:	4650      	mov	r0, sl
 800b4ba:	4659      	mov	r1, fp
 800b4bc:	2200      	movs	r2, #0
 800b4be:	1e5f      	subs	r7, r3, #1
 800b4c0:	4b88      	ldr	r3, [pc, #544]	; (800b6e4 <_dtoa_r+0x624>)
 800b4c2:	f7f5 f89d 	bl	8000600 <__aeabi_dmul>
 800b4c6:	3501      	adds	r5, #1
 800b4c8:	4682      	mov	sl, r0
 800b4ca:	468b      	mov	fp, r1
 800b4cc:	9e02      	ldr	r6, [sp, #8]
 800b4ce:	4628      	mov	r0, r5
 800b4d0:	46d0      	mov	r8, sl
 800b4d2:	f7f5 f82b 	bl	800052c <__aeabi_i2d>
 800b4d6:	4652      	mov	r2, sl
 800b4d8:	465b      	mov	r3, fp
 800b4da:	46d9      	mov	r9, fp
 800b4dc:	f7f5 f890 	bl	8000600 <__aeabi_dmul>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4b81      	ldr	r3, [pc, #516]	; (800b6e8 <_dtoa_r+0x628>)
 800b4e4:	f7f4 fed6 	bl	8000294 <__adddf3>
 800b4e8:	4682      	mov	sl, r0
 800b4ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b4ee:	2e00      	cmp	r6, #0
 800b4f0:	d158      	bne.n	800b5a4 <_dtoa_r+0x4e4>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4b7d      	ldr	r3, [pc, #500]	; (800b6ec <_dtoa_r+0x62c>)
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	f7f4 fec9 	bl	8000290 <__aeabi_dsub>
 800b4fe:	4652      	mov	r2, sl
 800b500:	465b      	mov	r3, fp
 800b502:	4680      	mov	r8, r0
 800b504:	4689      	mov	r9, r1
 800b506:	f7f5 fb0b 	bl	8000b20 <__aeabi_dcmpgt>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	f040 8293 	bne.w	800ba36 <_dtoa_r+0x976>
 800b510:	4652      	mov	r2, sl
 800b512:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b516:	4640      	mov	r0, r8
 800b518:	4649      	mov	r1, r9
 800b51a:	f7f5 fae3 	bl	8000ae4 <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	f040 8287 	bne.w	800ba32 <_dtoa_r+0x972>
 800b524:	ec5b ab19 	vmov	sl, fp, d9
 800b528:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f2c0 8148 	blt.w	800b7c0 <_dtoa_r+0x700>
 800b530:	9a00      	ldr	r2, [sp, #0]
 800b532:	2a0e      	cmp	r2, #14
 800b534:	f300 8144 	bgt.w	800b7c0 <_dtoa_r+0x700>
 800b538:	4b67      	ldr	r3, [pc, #412]	; (800b6d8 <_dtoa_r+0x618>)
 800b53a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b53e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b544:	2b00      	cmp	r3, #0
 800b546:	f280 80d5 	bge.w	800b6f4 <_dtoa_r+0x634>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f300 80d1 	bgt.w	800b6f4 <_dtoa_r+0x634>
 800b552:	f040 826d 	bne.w	800ba30 <_dtoa_r+0x970>
 800b556:	2200      	movs	r2, #0
 800b558:	4b64      	ldr	r3, [pc, #400]	; (800b6ec <_dtoa_r+0x62c>)
 800b55a:	4640      	mov	r0, r8
 800b55c:	4649      	mov	r1, r9
 800b55e:	f7f5 f84f 	bl	8000600 <__aeabi_dmul>
 800b562:	4652      	mov	r2, sl
 800b564:	465b      	mov	r3, fp
 800b566:	f7f5 fad1 	bl	8000b0c <__aeabi_dcmpge>
 800b56a:	9e03      	ldr	r6, [sp, #12]
 800b56c:	4637      	mov	r7, r6
 800b56e:	2800      	cmp	r0, #0
 800b570:	f040 8243 	bne.w	800b9fa <_dtoa_r+0x93a>
 800b574:	2331      	movs	r3, #49	; 0x31
 800b576:	9d01      	ldr	r5, [sp, #4]
 800b578:	f805 3b01 	strb.w	r3, [r5], #1
 800b57c:	9b00      	ldr	r3, [sp, #0]
 800b57e:	3301      	adds	r3, #1
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	e23e      	b.n	800ba02 <_dtoa_r+0x942>
 800b584:	07f2      	lsls	r2, r6, #31
 800b586:	d505      	bpl.n	800b594 <_dtoa_r+0x4d4>
 800b588:	3501      	adds	r5, #1
 800b58a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b58e:	f7f5 f837 	bl	8000600 <__aeabi_dmul>
 800b592:	2301      	movs	r3, #1
 800b594:	1076      	asrs	r6, r6, #1
 800b596:	3708      	adds	r7, #8
 800b598:	e777      	b.n	800b48a <_dtoa_r+0x3ca>
 800b59a:	2502      	movs	r5, #2
 800b59c:	e779      	b.n	800b492 <_dtoa_r+0x3d2>
 800b59e:	9f00      	ldr	r7, [sp, #0]
 800b5a0:	9e03      	ldr	r6, [sp, #12]
 800b5a2:	e794      	b.n	800b4ce <_dtoa_r+0x40e>
 800b5a4:	9901      	ldr	r1, [sp, #4]
 800b5a6:	4b4c      	ldr	r3, [pc, #304]	; (800b6d8 <_dtoa_r+0x618>)
 800b5a8:	4431      	add	r1, r6
 800b5aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b5ae:	910d      	str	r1, [sp, #52]	; 0x34
 800b5b0:	9908      	ldr	r1, [sp, #32]
 800b5b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5b6:	2900      	cmp	r1, #0
 800b5b8:	d043      	beq.n	800b642 <_dtoa_r+0x582>
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	494c      	ldr	r1, [pc, #304]	; (800b6f0 <_dtoa_r+0x630>)
 800b5be:	f7f5 f949 	bl	8000854 <__aeabi_ddiv>
 800b5c2:	4652      	mov	r2, sl
 800b5c4:	465b      	mov	r3, fp
 800b5c6:	f7f4 fe63 	bl	8000290 <__aeabi_dsub>
 800b5ca:	9d01      	ldr	r5, [sp, #4]
 800b5cc:	4682      	mov	sl, r0
 800b5ce:	468b      	mov	fp, r1
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	f7f5 fac4 	bl	8000b60 <__aeabi_d2iz>
 800b5d8:	4606      	mov	r6, r0
 800b5da:	f7f4 ffa7 	bl	800052c <__aeabi_i2d>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	3630      	adds	r6, #48	; 0x30
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4640      	mov	r0, r8
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	f7f4 fe52 	bl	8000290 <__aeabi_dsub>
 800b5ec:	4652      	mov	r2, sl
 800b5ee:	465b      	mov	r3, fp
 800b5f0:	f805 6b01 	strb.w	r6, [r5], #1
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	4689      	mov	r9, r1
 800b5f8:	f7f5 fa74 	bl	8000ae4 <__aeabi_dcmplt>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d163      	bne.n	800b6c8 <_dtoa_r+0x608>
 800b600:	4642      	mov	r2, r8
 800b602:	464b      	mov	r3, r9
 800b604:	2000      	movs	r0, #0
 800b606:	4936      	ldr	r1, [pc, #216]	; (800b6e0 <_dtoa_r+0x620>)
 800b608:	f7f4 fe42 	bl	8000290 <__aeabi_dsub>
 800b60c:	4652      	mov	r2, sl
 800b60e:	465b      	mov	r3, fp
 800b610:	f7f5 fa68 	bl	8000ae4 <__aeabi_dcmplt>
 800b614:	2800      	cmp	r0, #0
 800b616:	f040 80b5 	bne.w	800b784 <_dtoa_r+0x6c4>
 800b61a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b61c:	429d      	cmp	r5, r3
 800b61e:	d081      	beq.n	800b524 <_dtoa_r+0x464>
 800b620:	2200      	movs	r2, #0
 800b622:	4b30      	ldr	r3, [pc, #192]	; (800b6e4 <_dtoa_r+0x624>)
 800b624:	4650      	mov	r0, sl
 800b626:	4659      	mov	r1, fp
 800b628:	f7f4 ffea 	bl	8000600 <__aeabi_dmul>
 800b62c:	2200      	movs	r2, #0
 800b62e:	4682      	mov	sl, r0
 800b630:	468b      	mov	fp, r1
 800b632:	4640      	mov	r0, r8
 800b634:	4649      	mov	r1, r9
 800b636:	4b2b      	ldr	r3, [pc, #172]	; (800b6e4 <_dtoa_r+0x624>)
 800b638:	f7f4 ffe2 	bl	8000600 <__aeabi_dmul>
 800b63c:	4680      	mov	r8, r0
 800b63e:	4689      	mov	r9, r1
 800b640:	e7c6      	b.n	800b5d0 <_dtoa_r+0x510>
 800b642:	4650      	mov	r0, sl
 800b644:	4659      	mov	r1, fp
 800b646:	f7f4 ffdb 	bl	8000600 <__aeabi_dmul>
 800b64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b64c:	4682      	mov	sl, r0
 800b64e:	468b      	mov	fp, r1
 800b650:	9d01      	ldr	r5, [sp, #4]
 800b652:	930f      	str	r3, [sp, #60]	; 0x3c
 800b654:	4649      	mov	r1, r9
 800b656:	4640      	mov	r0, r8
 800b658:	f7f5 fa82 	bl	8000b60 <__aeabi_d2iz>
 800b65c:	4606      	mov	r6, r0
 800b65e:	f7f4 ff65 	bl	800052c <__aeabi_i2d>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	4640      	mov	r0, r8
 800b668:	4649      	mov	r1, r9
 800b66a:	3630      	adds	r6, #48	; 0x30
 800b66c:	f7f4 fe10 	bl	8000290 <__aeabi_dsub>
 800b670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b672:	f805 6b01 	strb.w	r6, [r5], #1
 800b676:	4680      	mov	r8, r0
 800b678:	429d      	cmp	r5, r3
 800b67a:	4689      	mov	r9, r1
 800b67c:	f04f 0200 	mov.w	r2, #0
 800b680:	d124      	bne.n	800b6cc <_dtoa_r+0x60c>
 800b682:	4b1b      	ldr	r3, [pc, #108]	; (800b6f0 <_dtoa_r+0x630>)
 800b684:	4650      	mov	r0, sl
 800b686:	4659      	mov	r1, fp
 800b688:	f7f4 fe04 	bl	8000294 <__adddf3>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4640      	mov	r0, r8
 800b692:	4649      	mov	r1, r9
 800b694:	f7f5 fa44 	bl	8000b20 <__aeabi_dcmpgt>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d173      	bne.n	800b784 <_dtoa_r+0x6c4>
 800b69c:	4652      	mov	r2, sl
 800b69e:	465b      	mov	r3, fp
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	4913      	ldr	r1, [pc, #76]	; (800b6f0 <_dtoa_r+0x630>)
 800b6a4:	f7f4 fdf4 	bl	8000290 <__aeabi_dsub>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	f7f5 fa18 	bl	8000ae4 <__aeabi_dcmplt>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	f43f af35 	beq.w	800b524 <_dtoa_r+0x464>
 800b6ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b6bc:	1e6b      	subs	r3, r5, #1
 800b6be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b6c4:	2b30      	cmp	r3, #48	; 0x30
 800b6c6:	d0f8      	beq.n	800b6ba <_dtoa_r+0x5fa>
 800b6c8:	9700      	str	r7, [sp, #0]
 800b6ca:	e049      	b.n	800b760 <_dtoa_r+0x6a0>
 800b6cc:	4b05      	ldr	r3, [pc, #20]	; (800b6e4 <_dtoa_r+0x624>)
 800b6ce:	f7f4 ff97 	bl	8000600 <__aeabi_dmul>
 800b6d2:	4680      	mov	r8, r0
 800b6d4:	4689      	mov	r9, r1
 800b6d6:	e7bd      	b.n	800b654 <_dtoa_r+0x594>
 800b6d8:	0800d410 	.word	0x0800d410
 800b6dc:	0800d3e8 	.word	0x0800d3e8
 800b6e0:	3ff00000 	.word	0x3ff00000
 800b6e4:	40240000 	.word	0x40240000
 800b6e8:	401c0000 	.word	0x401c0000
 800b6ec:	40140000 	.word	0x40140000
 800b6f0:	3fe00000 	.word	0x3fe00000
 800b6f4:	4656      	mov	r6, sl
 800b6f6:	465f      	mov	r7, fp
 800b6f8:	9d01      	ldr	r5, [sp, #4]
 800b6fa:	4642      	mov	r2, r8
 800b6fc:	464b      	mov	r3, r9
 800b6fe:	4630      	mov	r0, r6
 800b700:	4639      	mov	r1, r7
 800b702:	f7f5 f8a7 	bl	8000854 <__aeabi_ddiv>
 800b706:	f7f5 fa2b 	bl	8000b60 <__aeabi_d2iz>
 800b70a:	4682      	mov	sl, r0
 800b70c:	f7f4 ff0e 	bl	800052c <__aeabi_i2d>
 800b710:	4642      	mov	r2, r8
 800b712:	464b      	mov	r3, r9
 800b714:	f7f4 ff74 	bl	8000600 <__aeabi_dmul>
 800b718:	4602      	mov	r2, r0
 800b71a:	4630      	mov	r0, r6
 800b71c:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b720:	460b      	mov	r3, r1
 800b722:	4639      	mov	r1, r7
 800b724:	f7f4 fdb4 	bl	8000290 <__aeabi_dsub>
 800b728:	f805 6b01 	strb.w	r6, [r5], #1
 800b72c:	9e01      	ldr	r6, [sp, #4]
 800b72e:	4602      	mov	r2, r0
 800b730:	9f03      	ldr	r7, [sp, #12]
 800b732:	460b      	mov	r3, r1
 800b734:	1bae      	subs	r6, r5, r6
 800b736:	42b7      	cmp	r7, r6
 800b738:	d135      	bne.n	800b7a6 <_dtoa_r+0x6e6>
 800b73a:	f7f4 fdab 	bl	8000294 <__adddf3>
 800b73e:	4642      	mov	r2, r8
 800b740:	464b      	mov	r3, r9
 800b742:	4606      	mov	r6, r0
 800b744:	460f      	mov	r7, r1
 800b746:	f7f5 f9eb 	bl	8000b20 <__aeabi_dcmpgt>
 800b74a:	b9d0      	cbnz	r0, 800b782 <_dtoa_r+0x6c2>
 800b74c:	4642      	mov	r2, r8
 800b74e:	464b      	mov	r3, r9
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f5 f9bc 	bl	8000ad0 <__aeabi_dcmpeq>
 800b758:	b110      	cbz	r0, 800b760 <_dtoa_r+0x6a0>
 800b75a:	f01a 0f01 	tst.w	sl, #1
 800b75e:	d110      	bne.n	800b782 <_dtoa_r+0x6c2>
 800b760:	4620      	mov	r0, r4
 800b762:	ee18 1a10 	vmov	r1, s16
 800b766:	f000 fd0f 	bl	800c188 <_Bfree>
 800b76a:	2300      	movs	r3, #0
 800b76c:	9800      	ldr	r0, [sp, #0]
 800b76e:	702b      	strb	r3, [r5, #0]
 800b770:	3001      	adds	r0, #1
 800b772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b774:	6018      	str	r0, [r3, #0]
 800b776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f43f acf1 	beq.w	800b160 <_dtoa_r+0xa0>
 800b77e:	601d      	str	r5, [r3, #0]
 800b780:	e4ee      	b.n	800b160 <_dtoa_r+0xa0>
 800b782:	9f00      	ldr	r7, [sp, #0]
 800b784:	462b      	mov	r3, r5
 800b786:	461d      	mov	r5, r3
 800b788:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b78c:	2a39      	cmp	r2, #57	; 0x39
 800b78e:	d106      	bne.n	800b79e <_dtoa_r+0x6de>
 800b790:	9a01      	ldr	r2, [sp, #4]
 800b792:	429a      	cmp	r2, r3
 800b794:	d1f7      	bne.n	800b786 <_dtoa_r+0x6c6>
 800b796:	2230      	movs	r2, #48	; 0x30
 800b798:	9901      	ldr	r1, [sp, #4]
 800b79a:	3701      	adds	r7, #1
 800b79c:	700a      	strb	r2, [r1, #0]
 800b79e:	781a      	ldrb	r2, [r3, #0]
 800b7a0:	3201      	adds	r2, #1
 800b7a2:	701a      	strb	r2, [r3, #0]
 800b7a4:	e790      	b.n	800b6c8 <_dtoa_r+0x608>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	4ba4      	ldr	r3, [pc, #656]	; (800ba3c <_dtoa_r+0x97c>)
 800b7aa:	f7f4 ff29 	bl	8000600 <__aeabi_dmul>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	f7f5 f98b 	bl	8000ad0 <__aeabi_dcmpeq>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d09d      	beq.n	800b6fa <_dtoa_r+0x63a>
 800b7be:	e7cf      	b.n	800b760 <_dtoa_r+0x6a0>
 800b7c0:	9a08      	ldr	r2, [sp, #32]
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	f000 80d5 	beq.w	800b972 <_dtoa_r+0x8b2>
 800b7c8:	9a06      	ldr	r2, [sp, #24]
 800b7ca:	2a01      	cmp	r2, #1
 800b7cc:	f300 80b9 	bgt.w	800b942 <_dtoa_r+0x882>
 800b7d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7d2:	2a00      	cmp	r2, #0
 800b7d4:	f000 80b1 	beq.w	800b93a <_dtoa_r+0x87a>
 800b7d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7dc:	9e07      	ldr	r6, [sp, #28]
 800b7de:	9d04      	ldr	r5, [sp, #16]
 800b7e0:	9a04      	ldr	r2, [sp, #16]
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	441a      	add	r2, r3
 800b7e8:	9204      	str	r2, [sp, #16]
 800b7ea:	9a05      	ldr	r2, [sp, #20]
 800b7ec:	441a      	add	r2, r3
 800b7ee:	9205      	str	r2, [sp, #20]
 800b7f0:	f000 fd84 	bl	800c2fc <__i2b>
 800b7f4:	4607      	mov	r7, r0
 800b7f6:	2d00      	cmp	r5, #0
 800b7f8:	dd0c      	ble.n	800b814 <_dtoa_r+0x754>
 800b7fa:	9b05      	ldr	r3, [sp, #20]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	dd09      	ble.n	800b814 <_dtoa_r+0x754>
 800b800:	42ab      	cmp	r3, r5
 800b802:	9a04      	ldr	r2, [sp, #16]
 800b804:	bfa8      	it	ge
 800b806:	462b      	movge	r3, r5
 800b808:	1ad2      	subs	r2, r2, r3
 800b80a:	1aed      	subs	r5, r5, r3
 800b80c:	9204      	str	r2, [sp, #16]
 800b80e:	9a05      	ldr	r2, [sp, #20]
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	9305      	str	r3, [sp, #20]
 800b814:	9b07      	ldr	r3, [sp, #28]
 800b816:	b31b      	cbz	r3, 800b860 <_dtoa_r+0x7a0>
 800b818:	9b08      	ldr	r3, [sp, #32]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 80ad 	beq.w	800b97a <_dtoa_r+0x8ba>
 800b820:	2e00      	cmp	r6, #0
 800b822:	dd13      	ble.n	800b84c <_dtoa_r+0x78c>
 800b824:	4639      	mov	r1, r7
 800b826:	4632      	mov	r2, r6
 800b828:	4620      	mov	r0, r4
 800b82a:	f000 fe25 	bl	800c478 <__pow5mult>
 800b82e:	ee18 2a10 	vmov	r2, s16
 800b832:	4601      	mov	r1, r0
 800b834:	4607      	mov	r7, r0
 800b836:	4620      	mov	r0, r4
 800b838:	f000 fd76 	bl	800c328 <__multiply>
 800b83c:	4680      	mov	r8, r0
 800b83e:	ee18 1a10 	vmov	r1, s16
 800b842:	4620      	mov	r0, r4
 800b844:	ee08 8a10 	vmov	s16, r8
 800b848:	f000 fc9e 	bl	800c188 <_Bfree>
 800b84c:	9b07      	ldr	r3, [sp, #28]
 800b84e:	1b9a      	subs	r2, r3, r6
 800b850:	d006      	beq.n	800b860 <_dtoa_r+0x7a0>
 800b852:	ee18 1a10 	vmov	r1, s16
 800b856:	4620      	mov	r0, r4
 800b858:	f000 fe0e 	bl	800c478 <__pow5mult>
 800b85c:	ee08 0a10 	vmov	s16, r0
 800b860:	2101      	movs	r1, #1
 800b862:	4620      	mov	r0, r4
 800b864:	f000 fd4a 	bl	800c2fc <__i2b>
 800b868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b86a:	4606      	mov	r6, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f340 8086 	ble.w	800b97e <_dtoa_r+0x8be>
 800b872:	461a      	mov	r2, r3
 800b874:	4601      	mov	r1, r0
 800b876:	4620      	mov	r0, r4
 800b878:	f000 fdfe 	bl	800c478 <__pow5mult>
 800b87c:	9b06      	ldr	r3, [sp, #24]
 800b87e:	4606      	mov	r6, r0
 800b880:	2b01      	cmp	r3, #1
 800b882:	dd7f      	ble.n	800b984 <_dtoa_r+0x8c4>
 800b884:	f04f 0800 	mov.w	r8, #0
 800b888:	6933      	ldr	r3, [r6, #16]
 800b88a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b88e:	6918      	ldr	r0, [r3, #16]
 800b890:	f000 fce4 	bl	800c25c <__hi0bits>
 800b894:	f1c0 0020 	rsb	r0, r0, #32
 800b898:	9b05      	ldr	r3, [sp, #20]
 800b89a:	4418      	add	r0, r3
 800b89c:	f010 001f 	ands.w	r0, r0, #31
 800b8a0:	f000 8091 	beq.w	800b9c6 <_dtoa_r+0x906>
 800b8a4:	f1c0 0320 	rsb	r3, r0, #32
 800b8a8:	2b04      	cmp	r3, #4
 800b8aa:	f340 8089 	ble.w	800b9c0 <_dtoa_r+0x900>
 800b8ae:	f1c0 001c 	rsb	r0, r0, #28
 800b8b2:	9b04      	ldr	r3, [sp, #16]
 800b8b4:	4405      	add	r5, r0
 800b8b6:	4403      	add	r3, r0
 800b8b8:	9304      	str	r3, [sp, #16]
 800b8ba:	9b05      	ldr	r3, [sp, #20]
 800b8bc:	4403      	add	r3, r0
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	9b04      	ldr	r3, [sp, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	dd07      	ble.n	800b8d6 <_dtoa_r+0x816>
 800b8c6:	ee18 1a10 	vmov	r1, s16
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f000 fe2d 	bl	800c52c <__lshift>
 800b8d2:	ee08 0a10 	vmov	s16, r0
 800b8d6:	9b05      	ldr	r3, [sp, #20]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	dd05      	ble.n	800b8e8 <_dtoa_r+0x828>
 800b8dc:	4631      	mov	r1, r6
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f000 fe23 	bl	800c52c <__lshift>
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d06d      	beq.n	800b9ca <_dtoa_r+0x90a>
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	ee18 0a10 	vmov	r0, s16
 800b8f4:	f000 fe8a 	bl	800c60c <__mcmp>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	da66      	bge.n	800b9ca <_dtoa_r+0x90a>
 800b8fc:	9b00      	ldr	r3, [sp, #0]
 800b8fe:	ee18 1a10 	vmov	r1, s16
 800b902:	220a      	movs	r2, #10
 800b904:	4620      	mov	r0, r4
 800b906:	3b01      	subs	r3, #1
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	2300      	movs	r3, #0
 800b90c:	f000 fc5e 	bl	800c1cc <__multadd>
 800b910:	9b08      	ldr	r3, [sp, #32]
 800b912:	ee08 0a10 	vmov	s16, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 81af 	beq.w	800bc7a <_dtoa_r+0xbba>
 800b91c:	2300      	movs	r3, #0
 800b91e:	4639      	mov	r1, r7
 800b920:	220a      	movs	r2, #10
 800b922:	4620      	mov	r0, r4
 800b924:	f000 fc52 	bl	800c1cc <__multadd>
 800b928:	9b02      	ldr	r3, [sp, #8]
 800b92a:	4607      	mov	r7, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f300 808d 	bgt.w	800ba4c <_dtoa_r+0x98c>
 800b932:	9b06      	ldr	r3, [sp, #24]
 800b934:	2b02      	cmp	r3, #2
 800b936:	dc50      	bgt.n	800b9da <_dtoa_r+0x91a>
 800b938:	e088      	b.n	800ba4c <_dtoa_r+0x98c>
 800b93a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b93c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b940:	e74c      	b.n	800b7dc <_dtoa_r+0x71c>
 800b942:	9b03      	ldr	r3, [sp, #12]
 800b944:	1e5e      	subs	r6, r3, #1
 800b946:	9b07      	ldr	r3, [sp, #28]
 800b948:	42b3      	cmp	r3, r6
 800b94a:	bfb7      	itett	lt
 800b94c:	9b07      	ldrlt	r3, [sp, #28]
 800b94e:	1b9e      	subge	r6, r3, r6
 800b950:	9607      	strlt	r6, [sp, #28]
 800b952:	1af2      	sublt	r2, r6, r3
 800b954:	bfbf      	itttt	lt
 800b956:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b958:	2600      	movlt	r6, #0
 800b95a:	189b      	addlt	r3, r3, r2
 800b95c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b95e:	9b03      	ldr	r3, [sp, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	bfb7      	itett	lt
 800b964:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b968:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b96c:	1a9d      	sublt	r5, r3, r2
 800b96e:	2300      	movlt	r3, #0
 800b970:	e736      	b.n	800b7e0 <_dtoa_r+0x720>
 800b972:	9e07      	ldr	r6, [sp, #28]
 800b974:	9d04      	ldr	r5, [sp, #16]
 800b976:	9f08      	ldr	r7, [sp, #32]
 800b978:	e73d      	b.n	800b7f6 <_dtoa_r+0x736>
 800b97a:	9a07      	ldr	r2, [sp, #28]
 800b97c:	e769      	b.n	800b852 <_dtoa_r+0x792>
 800b97e:	9b06      	ldr	r3, [sp, #24]
 800b980:	2b01      	cmp	r3, #1
 800b982:	dc18      	bgt.n	800b9b6 <_dtoa_r+0x8f6>
 800b984:	f1ba 0f00 	cmp.w	sl, #0
 800b988:	d115      	bne.n	800b9b6 <_dtoa_r+0x8f6>
 800b98a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b98e:	b993      	cbnz	r3, 800b9b6 <_dtoa_r+0x8f6>
 800b990:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b994:	0d1b      	lsrs	r3, r3, #20
 800b996:	051b      	lsls	r3, r3, #20
 800b998:	b183      	cbz	r3, 800b9bc <_dtoa_r+0x8fc>
 800b99a:	9b04      	ldr	r3, [sp, #16]
 800b99c:	f04f 0801 	mov.w	r8, #1
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	9b05      	ldr	r3, [sp, #20]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	9305      	str	r3, [sp, #20]
 800b9aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f47f af6b 	bne.w	800b888 <_dtoa_r+0x7c8>
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e770      	b.n	800b898 <_dtoa_r+0x7d8>
 800b9b6:	f04f 0800 	mov.w	r8, #0
 800b9ba:	e7f6      	b.n	800b9aa <_dtoa_r+0x8ea>
 800b9bc:	4698      	mov	r8, r3
 800b9be:	e7f4      	b.n	800b9aa <_dtoa_r+0x8ea>
 800b9c0:	f43f af7e 	beq.w	800b8c0 <_dtoa_r+0x800>
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	301c      	adds	r0, #28
 800b9c8:	e773      	b.n	800b8b2 <_dtoa_r+0x7f2>
 800b9ca:	9b03      	ldr	r3, [sp, #12]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	dc37      	bgt.n	800ba40 <_dtoa_r+0x980>
 800b9d0:	9b06      	ldr	r3, [sp, #24]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	dd34      	ble.n	800ba40 <_dtoa_r+0x980>
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	9302      	str	r3, [sp, #8]
 800b9da:	9b02      	ldr	r3, [sp, #8]
 800b9dc:	b96b      	cbnz	r3, 800b9fa <_dtoa_r+0x93a>
 800b9de:	4631      	mov	r1, r6
 800b9e0:	2205      	movs	r2, #5
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 fbf2 	bl	800c1cc <__multadd>
 800b9e8:	4601      	mov	r1, r0
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	ee18 0a10 	vmov	r0, s16
 800b9f0:	f000 fe0c 	bl	800c60c <__mcmp>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f73f adbd 	bgt.w	800b574 <_dtoa_r+0x4b4>
 800b9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9fc:	9d01      	ldr	r5, [sp, #4]
 800b9fe:	43db      	mvns	r3, r3
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	f04f 0800 	mov.w	r8, #0
 800ba06:	4631      	mov	r1, r6
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f000 fbbd 	bl	800c188 <_Bfree>
 800ba0e:	2f00      	cmp	r7, #0
 800ba10:	f43f aea6 	beq.w	800b760 <_dtoa_r+0x6a0>
 800ba14:	f1b8 0f00 	cmp.w	r8, #0
 800ba18:	d005      	beq.n	800ba26 <_dtoa_r+0x966>
 800ba1a:	45b8      	cmp	r8, r7
 800ba1c:	d003      	beq.n	800ba26 <_dtoa_r+0x966>
 800ba1e:	4641      	mov	r1, r8
 800ba20:	4620      	mov	r0, r4
 800ba22:	f000 fbb1 	bl	800c188 <_Bfree>
 800ba26:	4639      	mov	r1, r7
 800ba28:	4620      	mov	r0, r4
 800ba2a:	f000 fbad 	bl	800c188 <_Bfree>
 800ba2e:	e697      	b.n	800b760 <_dtoa_r+0x6a0>
 800ba30:	2600      	movs	r6, #0
 800ba32:	4637      	mov	r7, r6
 800ba34:	e7e1      	b.n	800b9fa <_dtoa_r+0x93a>
 800ba36:	9700      	str	r7, [sp, #0]
 800ba38:	4637      	mov	r7, r6
 800ba3a:	e59b      	b.n	800b574 <_dtoa_r+0x4b4>
 800ba3c:	40240000 	.word	0x40240000
 800ba40:	9b08      	ldr	r3, [sp, #32]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 80ca 	beq.w	800bbdc <_dtoa_r+0xb1c>
 800ba48:	9b03      	ldr	r3, [sp, #12]
 800ba4a:	9302      	str	r3, [sp, #8]
 800ba4c:	2d00      	cmp	r5, #0
 800ba4e:	dd05      	ble.n	800ba5c <_dtoa_r+0x99c>
 800ba50:	4639      	mov	r1, r7
 800ba52:	462a      	mov	r2, r5
 800ba54:	4620      	mov	r0, r4
 800ba56:	f000 fd69 	bl	800c52c <__lshift>
 800ba5a:	4607      	mov	r7, r0
 800ba5c:	f1b8 0f00 	cmp.w	r8, #0
 800ba60:	d05b      	beq.n	800bb1a <_dtoa_r+0xa5a>
 800ba62:	6879      	ldr	r1, [r7, #4]
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fb4f 	bl	800c108 <_Balloc>
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	b928      	cbnz	r0, 800ba7a <_dtoa_r+0x9ba>
 800ba6e:	4b87      	ldr	r3, [pc, #540]	; (800bc8c <_dtoa_r+0xbcc>)
 800ba70:	4602      	mov	r2, r0
 800ba72:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba76:	f7ff bb3d 	b.w	800b0f4 <_dtoa_r+0x34>
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	f107 010c 	add.w	r1, r7, #12
 800ba80:	300c      	adds	r0, #12
 800ba82:	3202      	adds	r2, #2
 800ba84:	0092      	lsls	r2, r2, #2
 800ba86:	f7fe fca3 	bl	800a3d0 <memcpy>
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 fd4c 	bl	800c52c <__lshift>
 800ba94:	9b01      	ldr	r3, [sp, #4]
 800ba96:	46b8      	mov	r8, r7
 800ba98:	4607      	mov	r7, r0
 800ba9a:	f103 0901 	add.w	r9, r3, #1
 800ba9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800baa2:	4413      	add	r3, r2
 800baa4:	9305      	str	r3, [sp, #20]
 800baa6:	f00a 0301 	and.w	r3, sl, #1
 800baaa:	9304      	str	r3, [sp, #16]
 800baac:	4631      	mov	r1, r6
 800baae:	ee18 0a10 	vmov	r0, s16
 800bab2:	f7ff fa73 	bl	800af9c <quorem>
 800bab6:	4641      	mov	r1, r8
 800bab8:	9002      	str	r0, [sp, #8]
 800baba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800babe:	ee18 0a10 	vmov	r0, s16
 800bac2:	f109 3bff 	add.w	fp, r9, #4294967295
 800bac6:	f000 fda1 	bl	800c60c <__mcmp>
 800baca:	463a      	mov	r2, r7
 800bacc:	9003      	str	r0, [sp, #12]
 800bace:	4631      	mov	r1, r6
 800bad0:	4620      	mov	r0, r4
 800bad2:	f000 fdb7 	bl	800c644 <__mdiff>
 800bad6:	68c2      	ldr	r2, [r0, #12]
 800bad8:	4605      	mov	r5, r0
 800bada:	bb02      	cbnz	r2, 800bb1e <_dtoa_r+0xa5e>
 800badc:	4601      	mov	r1, r0
 800bade:	ee18 0a10 	vmov	r0, s16
 800bae2:	f000 fd93 	bl	800c60c <__mcmp>
 800bae6:	4602      	mov	r2, r0
 800bae8:	4629      	mov	r1, r5
 800baea:	4620      	mov	r0, r4
 800baec:	9207      	str	r2, [sp, #28]
 800baee:	f000 fb4b 	bl	800c188 <_Bfree>
 800baf2:	464d      	mov	r5, r9
 800baf4:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800baf8:	ea43 0102 	orr.w	r1, r3, r2
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	430b      	orrs	r3, r1
 800bb00:	d10f      	bne.n	800bb22 <_dtoa_r+0xa62>
 800bb02:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb06:	d02a      	beq.n	800bb5e <_dtoa_r+0xa9e>
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	dd02      	ble.n	800bb14 <_dtoa_r+0xa54>
 800bb0e:	9b02      	ldr	r3, [sp, #8]
 800bb10:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bb14:	f88b a000 	strb.w	sl, [fp]
 800bb18:	e775      	b.n	800ba06 <_dtoa_r+0x946>
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	e7ba      	b.n	800ba94 <_dtoa_r+0x9d4>
 800bb1e:	2201      	movs	r2, #1
 800bb20:	e7e2      	b.n	800bae8 <_dtoa_r+0xa28>
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	db04      	blt.n	800bb32 <_dtoa_r+0xa72>
 800bb28:	9906      	ldr	r1, [sp, #24]
 800bb2a:	430b      	orrs	r3, r1
 800bb2c:	9904      	ldr	r1, [sp, #16]
 800bb2e:	430b      	orrs	r3, r1
 800bb30:	d122      	bne.n	800bb78 <_dtoa_r+0xab8>
 800bb32:	2a00      	cmp	r2, #0
 800bb34:	ddee      	ble.n	800bb14 <_dtoa_r+0xa54>
 800bb36:	ee18 1a10 	vmov	r1, s16
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f000 fcf5 	bl	800c52c <__lshift>
 800bb42:	4631      	mov	r1, r6
 800bb44:	ee08 0a10 	vmov	s16, r0
 800bb48:	f000 fd60 	bl	800c60c <__mcmp>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	dc03      	bgt.n	800bb58 <_dtoa_r+0xa98>
 800bb50:	d1e0      	bne.n	800bb14 <_dtoa_r+0xa54>
 800bb52:	f01a 0f01 	tst.w	sl, #1
 800bb56:	d0dd      	beq.n	800bb14 <_dtoa_r+0xa54>
 800bb58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb5c:	d1d7      	bne.n	800bb0e <_dtoa_r+0xa4e>
 800bb5e:	2339      	movs	r3, #57	; 0x39
 800bb60:	f88b 3000 	strb.w	r3, [fp]
 800bb64:	462b      	mov	r3, r5
 800bb66:	461d      	mov	r5, r3
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb6e:	2a39      	cmp	r2, #57	; 0x39
 800bb70:	d070      	beq.n	800bc54 <_dtoa_r+0xb94>
 800bb72:	3201      	adds	r2, #1
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	e746      	b.n	800ba06 <_dtoa_r+0x946>
 800bb78:	2a00      	cmp	r2, #0
 800bb7a:	dd07      	ble.n	800bb8c <_dtoa_r+0xacc>
 800bb7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb80:	d0ed      	beq.n	800bb5e <_dtoa_r+0xa9e>
 800bb82:	f10a 0301 	add.w	r3, sl, #1
 800bb86:	f88b 3000 	strb.w	r3, [fp]
 800bb8a:	e73c      	b.n	800ba06 <_dtoa_r+0x946>
 800bb8c:	9b05      	ldr	r3, [sp, #20]
 800bb8e:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb92:	4599      	cmp	r9, r3
 800bb94:	d046      	beq.n	800bc24 <_dtoa_r+0xb64>
 800bb96:	ee18 1a10 	vmov	r1, s16
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	220a      	movs	r2, #10
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 fb14 	bl	800c1cc <__multadd>
 800bba4:	45b8      	cmp	r8, r7
 800bba6:	ee08 0a10 	vmov	s16, r0
 800bbaa:	f04f 0300 	mov.w	r3, #0
 800bbae:	f04f 020a 	mov.w	r2, #10
 800bbb2:	4641      	mov	r1, r8
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	d106      	bne.n	800bbc6 <_dtoa_r+0xb06>
 800bbb8:	f000 fb08 	bl	800c1cc <__multadd>
 800bbbc:	4680      	mov	r8, r0
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	f109 0901 	add.w	r9, r9, #1
 800bbc4:	e772      	b.n	800baac <_dtoa_r+0x9ec>
 800bbc6:	f000 fb01 	bl	800c1cc <__multadd>
 800bbca:	4639      	mov	r1, r7
 800bbcc:	4680      	mov	r8, r0
 800bbce:	2300      	movs	r3, #0
 800bbd0:	220a      	movs	r2, #10
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 fafa 	bl	800c1cc <__multadd>
 800bbd8:	4607      	mov	r7, r0
 800bbda:	e7f1      	b.n	800bbc0 <_dtoa_r+0xb00>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	9302      	str	r3, [sp, #8]
 800bbe0:	9d01      	ldr	r5, [sp, #4]
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	ee18 0a10 	vmov	r0, s16
 800bbe8:	f7ff f9d8 	bl	800af9c <quorem>
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bbf2:	f805 ab01 	strb.w	sl, [r5], #1
 800bbf6:	1aea      	subs	r2, r5, r3
 800bbf8:	9b02      	ldr	r3, [sp, #8]
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	dd09      	ble.n	800bc12 <_dtoa_r+0xb52>
 800bbfe:	ee18 1a10 	vmov	r1, s16
 800bc02:	2300      	movs	r3, #0
 800bc04:	220a      	movs	r2, #10
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fae0 	bl	800c1cc <__multadd>
 800bc0c:	ee08 0a10 	vmov	s16, r0
 800bc10:	e7e7      	b.n	800bbe2 <_dtoa_r+0xb22>
 800bc12:	9b02      	ldr	r3, [sp, #8]
 800bc14:	f04f 0800 	mov.w	r8, #0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	bfcc      	ite	gt
 800bc1c:	461d      	movgt	r5, r3
 800bc1e:	2501      	movle	r5, #1
 800bc20:	9b01      	ldr	r3, [sp, #4]
 800bc22:	441d      	add	r5, r3
 800bc24:	ee18 1a10 	vmov	r1, s16
 800bc28:	2201      	movs	r2, #1
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 fc7e 	bl	800c52c <__lshift>
 800bc30:	4631      	mov	r1, r6
 800bc32:	ee08 0a10 	vmov	s16, r0
 800bc36:	f000 fce9 	bl	800c60c <__mcmp>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	dc92      	bgt.n	800bb64 <_dtoa_r+0xaa4>
 800bc3e:	d102      	bne.n	800bc46 <_dtoa_r+0xb86>
 800bc40:	f01a 0f01 	tst.w	sl, #1
 800bc44:	d18e      	bne.n	800bb64 <_dtoa_r+0xaa4>
 800bc46:	462b      	mov	r3, r5
 800bc48:	461d      	mov	r5, r3
 800bc4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc4e:	2a30      	cmp	r2, #48	; 0x30
 800bc50:	d0fa      	beq.n	800bc48 <_dtoa_r+0xb88>
 800bc52:	e6d8      	b.n	800ba06 <_dtoa_r+0x946>
 800bc54:	9a01      	ldr	r2, [sp, #4]
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d185      	bne.n	800bb66 <_dtoa_r+0xaa6>
 800bc5a:	9b00      	ldr	r3, [sp, #0]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	2331      	movs	r3, #49	; 0x31
 800bc62:	7013      	strb	r3, [r2, #0]
 800bc64:	e6cf      	b.n	800ba06 <_dtoa_r+0x946>
 800bc66:	4b0a      	ldr	r3, [pc, #40]	; (800bc90 <_dtoa_r+0xbd0>)
 800bc68:	f7ff ba98 	b.w	800b19c <_dtoa_r+0xdc>
 800bc6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f47f aa71 	bne.w	800b156 <_dtoa_r+0x96>
 800bc74:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <_dtoa_r+0xbd4>)
 800bc76:	f7ff ba91 	b.w	800b19c <_dtoa_r+0xdc>
 800bc7a:	9b02      	ldr	r3, [sp, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dcaf      	bgt.n	800bbe0 <_dtoa_r+0xb20>
 800bc80:	9b06      	ldr	r3, [sp, #24]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	f73f aea9 	bgt.w	800b9da <_dtoa_r+0x91a>
 800bc88:	e7aa      	b.n	800bbe0 <_dtoa_r+0xb20>
 800bc8a:	bf00      	nop
 800bc8c:	0800d31b 	.word	0x0800d31b
 800bc90:	0800d278 	.word	0x0800d278
 800bc94:	0800d29c 	.word	0x0800d29c

0800bc98 <__sflush_r>:
 800bc98:	898a      	ldrh	r2, [r1, #12]
 800bc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9e:	4605      	mov	r5, r0
 800bca0:	0710      	lsls	r0, r2, #28
 800bca2:	460c      	mov	r4, r1
 800bca4:	d458      	bmi.n	800bd58 <__sflush_r+0xc0>
 800bca6:	684b      	ldr	r3, [r1, #4]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	dc05      	bgt.n	800bcb8 <__sflush_r+0x20>
 800bcac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	dc02      	bgt.n	800bcb8 <__sflush_r+0x20>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcba:	2e00      	cmp	r6, #0
 800bcbc:	d0f9      	beq.n	800bcb2 <__sflush_r+0x1a>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcc4:	682f      	ldr	r7, [r5, #0]
 800bcc6:	602b      	str	r3, [r5, #0]
 800bcc8:	d032      	beq.n	800bd30 <__sflush_r+0x98>
 800bcca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bccc:	89a3      	ldrh	r3, [r4, #12]
 800bcce:	075a      	lsls	r2, r3, #29
 800bcd0:	d505      	bpl.n	800bcde <__sflush_r+0x46>
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	1ac0      	subs	r0, r0, r3
 800bcd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcd8:	b10b      	cbz	r3, 800bcde <__sflush_r+0x46>
 800bcda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcdc:	1ac0      	subs	r0, r0, r3
 800bcde:	2300      	movs	r3, #0
 800bce0:	4602      	mov	r2, r0
 800bce2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bce4:	4628      	mov	r0, r5
 800bce6:	6a21      	ldr	r1, [r4, #32]
 800bce8:	47b0      	blx	r6
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	d106      	bne.n	800bcfe <__sflush_r+0x66>
 800bcf0:	6829      	ldr	r1, [r5, #0]
 800bcf2:	291d      	cmp	r1, #29
 800bcf4:	d82c      	bhi.n	800bd50 <__sflush_r+0xb8>
 800bcf6:	4a29      	ldr	r2, [pc, #164]	; (800bd9c <__sflush_r+0x104>)
 800bcf8:	40ca      	lsrs	r2, r1
 800bcfa:	07d6      	lsls	r6, r2, #31
 800bcfc:	d528      	bpl.n	800bd50 <__sflush_r+0xb8>
 800bcfe:	2200      	movs	r2, #0
 800bd00:	04d9      	lsls	r1, r3, #19
 800bd02:	6062      	str	r2, [r4, #4]
 800bd04:	6922      	ldr	r2, [r4, #16]
 800bd06:	6022      	str	r2, [r4, #0]
 800bd08:	d504      	bpl.n	800bd14 <__sflush_r+0x7c>
 800bd0a:	1c42      	adds	r2, r0, #1
 800bd0c:	d101      	bne.n	800bd12 <__sflush_r+0x7a>
 800bd0e:	682b      	ldr	r3, [r5, #0]
 800bd10:	b903      	cbnz	r3, 800bd14 <__sflush_r+0x7c>
 800bd12:	6560      	str	r0, [r4, #84]	; 0x54
 800bd14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd16:	602f      	str	r7, [r5, #0]
 800bd18:	2900      	cmp	r1, #0
 800bd1a:	d0ca      	beq.n	800bcb2 <__sflush_r+0x1a>
 800bd1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd20:	4299      	cmp	r1, r3
 800bd22:	d002      	beq.n	800bd2a <__sflush_r+0x92>
 800bd24:	4628      	mov	r0, r5
 800bd26:	f000 fd8f 	bl	800c848 <_free_r>
 800bd2a:	2000      	movs	r0, #0
 800bd2c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd2e:	e7c1      	b.n	800bcb4 <__sflush_r+0x1c>
 800bd30:	6a21      	ldr	r1, [r4, #32]
 800bd32:	2301      	movs	r3, #1
 800bd34:	4628      	mov	r0, r5
 800bd36:	47b0      	blx	r6
 800bd38:	1c41      	adds	r1, r0, #1
 800bd3a:	d1c7      	bne.n	800bccc <__sflush_r+0x34>
 800bd3c:	682b      	ldr	r3, [r5, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0c4      	beq.n	800bccc <__sflush_r+0x34>
 800bd42:	2b1d      	cmp	r3, #29
 800bd44:	d001      	beq.n	800bd4a <__sflush_r+0xb2>
 800bd46:	2b16      	cmp	r3, #22
 800bd48:	d101      	bne.n	800bd4e <__sflush_r+0xb6>
 800bd4a:	602f      	str	r7, [r5, #0]
 800bd4c:	e7b1      	b.n	800bcb2 <__sflush_r+0x1a>
 800bd4e:	89a3      	ldrh	r3, [r4, #12]
 800bd50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd54:	81a3      	strh	r3, [r4, #12]
 800bd56:	e7ad      	b.n	800bcb4 <__sflush_r+0x1c>
 800bd58:	690f      	ldr	r7, [r1, #16]
 800bd5a:	2f00      	cmp	r7, #0
 800bd5c:	d0a9      	beq.n	800bcb2 <__sflush_r+0x1a>
 800bd5e:	0793      	lsls	r3, r2, #30
 800bd60:	680e      	ldr	r6, [r1, #0]
 800bd62:	600f      	str	r7, [r1, #0]
 800bd64:	bf0c      	ite	eq
 800bd66:	694b      	ldreq	r3, [r1, #20]
 800bd68:	2300      	movne	r3, #0
 800bd6a:	eba6 0807 	sub.w	r8, r6, r7
 800bd6e:	608b      	str	r3, [r1, #8]
 800bd70:	f1b8 0f00 	cmp.w	r8, #0
 800bd74:	dd9d      	ble.n	800bcb2 <__sflush_r+0x1a>
 800bd76:	4643      	mov	r3, r8
 800bd78:	463a      	mov	r2, r7
 800bd7a:	6a21      	ldr	r1, [r4, #32]
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd80:	47b0      	blx	r6
 800bd82:	2800      	cmp	r0, #0
 800bd84:	dc06      	bgt.n	800bd94 <__sflush_r+0xfc>
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd90:	81a3      	strh	r3, [r4, #12]
 800bd92:	e78f      	b.n	800bcb4 <__sflush_r+0x1c>
 800bd94:	4407      	add	r7, r0
 800bd96:	eba8 0800 	sub.w	r8, r8, r0
 800bd9a:	e7e9      	b.n	800bd70 <__sflush_r+0xd8>
 800bd9c:	20400001 	.word	0x20400001

0800bda0 <_fflush_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	690b      	ldr	r3, [r1, #16]
 800bda4:	4605      	mov	r5, r0
 800bda6:	460c      	mov	r4, r1
 800bda8:	b913      	cbnz	r3, 800bdb0 <_fflush_r+0x10>
 800bdaa:	2500      	movs	r5, #0
 800bdac:	4628      	mov	r0, r5
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	b118      	cbz	r0, 800bdba <_fflush_r+0x1a>
 800bdb2:	6983      	ldr	r3, [r0, #24]
 800bdb4:	b90b      	cbnz	r3, 800bdba <_fflush_r+0x1a>
 800bdb6:	f000 f887 	bl	800bec8 <__sinit>
 800bdba:	4b14      	ldr	r3, [pc, #80]	; (800be0c <_fflush_r+0x6c>)
 800bdbc:	429c      	cmp	r4, r3
 800bdbe:	d11b      	bne.n	800bdf8 <_fflush_r+0x58>
 800bdc0:	686c      	ldr	r4, [r5, #4]
 800bdc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0ef      	beq.n	800bdaa <_fflush_r+0xa>
 800bdca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdcc:	07d0      	lsls	r0, r2, #31
 800bdce:	d404      	bmi.n	800bdda <_fflush_r+0x3a>
 800bdd0:	0599      	lsls	r1, r3, #22
 800bdd2:	d402      	bmi.n	800bdda <_fflush_r+0x3a>
 800bdd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdd6:	f000 f91a 	bl	800c00e <__retarget_lock_acquire_recursive>
 800bdda:	4628      	mov	r0, r5
 800bddc:	4621      	mov	r1, r4
 800bdde:	f7ff ff5b 	bl	800bc98 <__sflush_r>
 800bde2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bde4:	4605      	mov	r5, r0
 800bde6:	07da      	lsls	r2, r3, #31
 800bde8:	d4e0      	bmi.n	800bdac <_fflush_r+0xc>
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	059b      	lsls	r3, r3, #22
 800bdee:	d4dd      	bmi.n	800bdac <_fflush_r+0xc>
 800bdf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdf2:	f000 f90d 	bl	800c010 <__retarget_lock_release_recursive>
 800bdf6:	e7d9      	b.n	800bdac <_fflush_r+0xc>
 800bdf8:	4b05      	ldr	r3, [pc, #20]	; (800be10 <_fflush_r+0x70>)
 800bdfa:	429c      	cmp	r4, r3
 800bdfc:	d101      	bne.n	800be02 <_fflush_r+0x62>
 800bdfe:	68ac      	ldr	r4, [r5, #8]
 800be00:	e7df      	b.n	800bdc2 <_fflush_r+0x22>
 800be02:	4b04      	ldr	r3, [pc, #16]	; (800be14 <_fflush_r+0x74>)
 800be04:	429c      	cmp	r4, r3
 800be06:	bf08      	it	eq
 800be08:	68ec      	ldreq	r4, [r5, #12]
 800be0a:	e7da      	b.n	800bdc2 <_fflush_r+0x22>
 800be0c:	0800d34c 	.word	0x0800d34c
 800be10:	0800d36c 	.word	0x0800d36c
 800be14:	0800d32c 	.word	0x0800d32c

0800be18 <std>:
 800be18:	2300      	movs	r3, #0
 800be1a:	b510      	push	{r4, lr}
 800be1c:	4604      	mov	r4, r0
 800be1e:	6083      	str	r3, [r0, #8]
 800be20:	8181      	strh	r1, [r0, #12]
 800be22:	4619      	mov	r1, r3
 800be24:	6643      	str	r3, [r0, #100]	; 0x64
 800be26:	81c2      	strh	r2, [r0, #14]
 800be28:	2208      	movs	r2, #8
 800be2a:	6183      	str	r3, [r0, #24]
 800be2c:	e9c0 3300 	strd	r3, r3, [r0]
 800be30:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be34:	305c      	adds	r0, #92	; 0x5c
 800be36:	f7fe fad8 	bl	800a3ea <memset>
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <std+0x38>)
 800be3c:	6224      	str	r4, [r4, #32]
 800be3e:	6263      	str	r3, [r4, #36]	; 0x24
 800be40:	4b04      	ldr	r3, [pc, #16]	; (800be54 <std+0x3c>)
 800be42:	62a3      	str	r3, [r4, #40]	; 0x28
 800be44:	4b04      	ldr	r3, [pc, #16]	; (800be58 <std+0x40>)
 800be46:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be48:	4b04      	ldr	r3, [pc, #16]	; (800be5c <std+0x44>)
 800be4a:	6323      	str	r3, [r4, #48]	; 0x30
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	bf00      	nop
 800be50:	0800cd6d 	.word	0x0800cd6d
 800be54:	0800cd8f 	.word	0x0800cd8f
 800be58:	0800cdc7 	.word	0x0800cdc7
 800be5c:	0800cdeb 	.word	0x0800cdeb

0800be60 <_cleanup_r>:
 800be60:	4901      	ldr	r1, [pc, #4]	; (800be68 <_cleanup_r+0x8>)
 800be62:	f000 b8af 	b.w	800bfc4 <_fwalk_reent>
 800be66:	bf00      	nop
 800be68:	0800bda1 	.word	0x0800bda1

0800be6c <__sfmoreglue>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	2268      	movs	r2, #104	; 0x68
 800be70:	1e4d      	subs	r5, r1, #1
 800be72:	460e      	mov	r6, r1
 800be74:	4355      	muls	r5, r2
 800be76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be7a:	f000 fd51 	bl	800c920 <_malloc_r>
 800be7e:	4604      	mov	r4, r0
 800be80:	b140      	cbz	r0, 800be94 <__sfmoreglue+0x28>
 800be82:	2100      	movs	r1, #0
 800be84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be88:	e9c0 1600 	strd	r1, r6, [r0]
 800be8c:	300c      	adds	r0, #12
 800be8e:	60a0      	str	r0, [r4, #8]
 800be90:	f7fe faab 	bl	800a3ea <memset>
 800be94:	4620      	mov	r0, r4
 800be96:	bd70      	pop	{r4, r5, r6, pc}

0800be98 <__sfp_lock_acquire>:
 800be98:	4801      	ldr	r0, [pc, #4]	; (800bea0 <__sfp_lock_acquire+0x8>)
 800be9a:	f000 b8b8 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800be9e:	bf00      	nop
 800bea0:	200083c1 	.word	0x200083c1

0800bea4 <__sfp_lock_release>:
 800bea4:	4801      	ldr	r0, [pc, #4]	; (800beac <__sfp_lock_release+0x8>)
 800bea6:	f000 b8b3 	b.w	800c010 <__retarget_lock_release_recursive>
 800beaa:	bf00      	nop
 800beac:	200083c1 	.word	0x200083c1

0800beb0 <__sinit_lock_acquire>:
 800beb0:	4801      	ldr	r0, [pc, #4]	; (800beb8 <__sinit_lock_acquire+0x8>)
 800beb2:	f000 b8ac 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800beb6:	bf00      	nop
 800beb8:	200083c2 	.word	0x200083c2

0800bebc <__sinit_lock_release>:
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <__sinit_lock_release+0x8>)
 800bebe:	f000 b8a7 	b.w	800c010 <__retarget_lock_release_recursive>
 800bec2:	bf00      	nop
 800bec4:	200083c2 	.word	0x200083c2

0800bec8 <__sinit>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	4604      	mov	r4, r0
 800becc:	f7ff fff0 	bl	800beb0 <__sinit_lock_acquire>
 800bed0:	69a3      	ldr	r3, [r4, #24]
 800bed2:	b11b      	cbz	r3, 800bedc <__sinit+0x14>
 800bed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed8:	f7ff bff0 	b.w	800bebc <__sinit_lock_release>
 800bedc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bee0:	6523      	str	r3, [r4, #80]	; 0x50
 800bee2:	4620      	mov	r0, r4
 800bee4:	4b12      	ldr	r3, [pc, #72]	; (800bf30 <__sinit+0x68>)
 800bee6:	4a13      	ldr	r2, [pc, #76]	; (800bf34 <__sinit+0x6c>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	62a2      	str	r2, [r4, #40]	; 0x28
 800beec:	42a3      	cmp	r3, r4
 800beee:	bf04      	itt	eq
 800bef0:	2301      	moveq	r3, #1
 800bef2:	61a3      	streq	r3, [r4, #24]
 800bef4:	f000 f820 	bl	800bf38 <__sfp>
 800bef8:	6060      	str	r0, [r4, #4]
 800befa:	4620      	mov	r0, r4
 800befc:	f000 f81c 	bl	800bf38 <__sfp>
 800bf00:	60a0      	str	r0, [r4, #8]
 800bf02:	4620      	mov	r0, r4
 800bf04:	f000 f818 	bl	800bf38 <__sfp>
 800bf08:	2200      	movs	r2, #0
 800bf0a:	2104      	movs	r1, #4
 800bf0c:	60e0      	str	r0, [r4, #12]
 800bf0e:	6860      	ldr	r0, [r4, #4]
 800bf10:	f7ff ff82 	bl	800be18 <std>
 800bf14:	2201      	movs	r2, #1
 800bf16:	2109      	movs	r1, #9
 800bf18:	68a0      	ldr	r0, [r4, #8]
 800bf1a:	f7ff ff7d 	bl	800be18 <std>
 800bf1e:	2202      	movs	r2, #2
 800bf20:	2112      	movs	r1, #18
 800bf22:	68e0      	ldr	r0, [r4, #12]
 800bf24:	f7ff ff78 	bl	800be18 <std>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	61a3      	str	r3, [r4, #24]
 800bf2c:	e7d2      	b.n	800bed4 <__sinit+0xc>
 800bf2e:	bf00      	nop
 800bf30:	0800d264 	.word	0x0800d264
 800bf34:	0800be61 	.word	0x0800be61

0800bf38 <__sfp>:
 800bf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf3a:	4607      	mov	r7, r0
 800bf3c:	f7ff ffac 	bl	800be98 <__sfp_lock_acquire>
 800bf40:	4b1e      	ldr	r3, [pc, #120]	; (800bfbc <__sfp+0x84>)
 800bf42:	681e      	ldr	r6, [r3, #0]
 800bf44:	69b3      	ldr	r3, [r6, #24]
 800bf46:	b913      	cbnz	r3, 800bf4e <__sfp+0x16>
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f7ff ffbd 	bl	800bec8 <__sinit>
 800bf4e:	3648      	adds	r6, #72	; 0x48
 800bf50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	d503      	bpl.n	800bf60 <__sfp+0x28>
 800bf58:	6833      	ldr	r3, [r6, #0]
 800bf5a:	b30b      	cbz	r3, 800bfa0 <__sfp+0x68>
 800bf5c:	6836      	ldr	r6, [r6, #0]
 800bf5e:	e7f7      	b.n	800bf50 <__sfp+0x18>
 800bf60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf64:	b9d5      	cbnz	r5, 800bf9c <__sfp+0x64>
 800bf66:	4b16      	ldr	r3, [pc, #88]	; (800bfc0 <__sfp+0x88>)
 800bf68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf6c:	6665      	str	r5, [r4, #100]	; 0x64
 800bf6e:	60e3      	str	r3, [r4, #12]
 800bf70:	f000 f84c 	bl	800c00c <__retarget_lock_init_recursive>
 800bf74:	f7ff ff96 	bl	800bea4 <__sfp_lock_release>
 800bf78:	2208      	movs	r2, #8
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf80:	6025      	str	r5, [r4, #0]
 800bf82:	61a5      	str	r5, [r4, #24]
 800bf84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf8c:	f7fe fa2d 	bl	800a3ea <memset>
 800bf90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf98:	4620      	mov	r0, r4
 800bf9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf9c:	3468      	adds	r4, #104	; 0x68
 800bf9e:	e7d9      	b.n	800bf54 <__sfp+0x1c>
 800bfa0:	2104      	movs	r1, #4
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	f7ff ff62 	bl	800be6c <__sfmoreglue>
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	6030      	str	r0, [r6, #0]
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d1d5      	bne.n	800bf5c <__sfp+0x24>
 800bfb0:	f7ff ff78 	bl	800bea4 <__sfp_lock_release>
 800bfb4:	230c      	movs	r3, #12
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	e7ee      	b.n	800bf98 <__sfp+0x60>
 800bfba:	bf00      	nop
 800bfbc:	0800d264 	.word	0x0800d264
 800bfc0:	ffff0001 	.word	0xffff0001

0800bfc4 <_fwalk_reent>:
 800bfc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc8:	4606      	mov	r6, r0
 800bfca:	4688      	mov	r8, r1
 800bfcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfd0:	2700      	movs	r7, #0
 800bfd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfd6:	f1b9 0901 	subs.w	r9, r9, #1
 800bfda:	d505      	bpl.n	800bfe8 <_fwalk_reent+0x24>
 800bfdc:	6824      	ldr	r4, [r4, #0]
 800bfde:	2c00      	cmp	r4, #0
 800bfe0:	d1f7      	bne.n	800bfd2 <_fwalk_reent+0xe>
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe8:	89ab      	ldrh	r3, [r5, #12]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d907      	bls.n	800bffe <_fwalk_reent+0x3a>
 800bfee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bff2:	3301      	adds	r3, #1
 800bff4:	d003      	beq.n	800bffe <_fwalk_reent+0x3a>
 800bff6:	4629      	mov	r1, r5
 800bff8:	4630      	mov	r0, r6
 800bffa:	47c0      	blx	r8
 800bffc:	4307      	orrs	r7, r0
 800bffe:	3568      	adds	r5, #104	; 0x68
 800c000:	e7e9      	b.n	800bfd6 <_fwalk_reent+0x12>
	...

0800c004 <_localeconv_r>:
 800c004:	4800      	ldr	r0, [pc, #0]	; (800c008 <_localeconv_r+0x4>)
 800c006:	4770      	bx	lr
 800c008:	20000404 	.word	0x20000404

0800c00c <__retarget_lock_init_recursive>:
 800c00c:	4770      	bx	lr

0800c00e <__retarget_lock_acquire_recursive>:
 800c00e:	4770      	bx	lr

0800c010 <__retarget_lock_release_recursive>:
 800c010:	4770      	bx	lr

0800c012 <__swhatbuf_r>:
 800c012:	b570      	push	{r4, r5, r6, lr}
 800c014:	460e      	mov	r6, r1
 800c016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01a:	b096      	sub	sp, #88	; 0x58
 800c01c:	4614      	mov	r4, r2
 800c01e:	2900      	cmp	r1, #0
 800c020:	461d      	mov	r5, r3
 800c022:	da08      	bge.n	800c036 <__swhatbuf_r+0x24>
 800c024:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	602a      	str	r2, [r5, #0]
 800c02c:	061a      	lsls	r2, r3, #24
 800c02e:	d410      	bmi.n	800c052 <__swhatbuf_r+0x40>
 800c030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c034:	e00e      	b.n	800c054 <__swhatbuf_r+0x42>
 800c036:	466a      	mov	r2, sp
 800c038:	f000 ff2e 	bl	800ce98 <_fstat_r>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	dbf1      	blt.n	800c024 <__swhatbuf_r+0x12>
 800c040:	9a01      	ldr	r2, [sp, #4]
 800c042:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c046:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c04a:	425a      	negs	r2, r3
 800c04c:	415a      	adcs	r2, r3
 800c04e:	602a      	str	r2, [r5, #0]
 800c050:	e7ee      	b.n	800c030 <__swhatbuf_r+0x1e>
 800c052:	2340      	movs	r3, #64	; 0x40
 800c054:	2000      	movs	r0, #0
 800c056:	6023      	str	r3, [r4, #0]
 800c058:	b016      	add	sp, #88	; 0x58
 800c05a:	bd70      	pop	{r4, r5, r6, pc}

0800c05c <__smakebuf_r>:
 800c05c:	898b      	ldrh	r3, [r1, #12]
 800c05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c060:	079d      	lsls	r5, r3, #30
 800c062:	4606      	mov	r6, r0
 800c064:	460c      	mov	r4, r1
 800c066:	d507      	bpl.n	800c078 <__smakebuf_r+0x1c>
 800c068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c06c:	6023      	str	r3, [r4, #0]
 800c06e:	6123      	str	r3, [r4, #16]
 800c070:	2301      	movs	r3, #1
 800c072:	6163      	str	r3, [r4, #20]
 800c074:	b002      	add	sp, #8
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	ab01      	add	r3, sp, #4
 800c07a:	466a      	mov	r2, sp
 800c07c:	f7ff ffc9 	bl	800c012 <__swhatbuf_r>
 800c080:	9900      	ldr	r1, [sp, #0]
 800c082:	4605      	mov	r5, r0
 800c084:	4630      	mov	r0, r6
 800c086:	f000 fc4b 	bl	800c920 <_malloc_r>
 800c08a:	b948      	cbnz	r0, 800c0a0 <__smakebuf_r+0x44>
 800c08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c090:	059a      	lsls	r2, r3, #22
 800c092:	d4ef      	bmi.n	800c074 <__smakebuf_r+0x18>
 800c094:	f023 0303 	bic.w	r3, r3, #3
 800c098:	f043 0302 	orr.w	r3, r3, #2
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	e7e3      	b.n	800c068 <__smakebuf_r+0xc>
 800c0a0:	4b0d      	ldr	r3, [pc, #52]	; (800c0d8 <__smakebuf_r+0x7c>)
 800c0a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	6020      	str	r0, [r4, #0]
 800c0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0ac:	6120      	str	r0, [r4, #16]
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	9b00      	ldr	r3, [sp, #0]
 800c0b2:	6163      	str	r3, [r4, #20]
 800c0b4:	9b01      	ldr	r3, [sp, #4]
 800c0b6:	b15b      	cbz	r3, 800c0d0 <__smakebuf_r+0x74>
 800c0b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0bc:	4630      	mov	r0, r6
 800c0be:	f000 fefd 	bl	800cebc <_isatty_r>
 800c0c2:	b128      	cbz	r0, 800c0d0 <__smakebuf_r+0x74>
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	f023 0303 	bic.w	r3, r3, #3
 800c0ca:	f043 0301 	orr.w	r3, r3, #1
 800c0ce:	81a3      	strh	r3, [r4, #12]
 800c0d0:	89a0      	ldrh	r0, [r4, #12]
 800c0d2:	4305      	orrs	r5, r0
 800c0d4:	81a5      	strh	r5, [r4, #12]
 800c0d6:	e7cd      	b.n	800c074 <__smakebuf_r+0x18>
 800c0d8:	0800be61 	.word	0x0800be61

0800c0dc <malloc>:
 800c0dc:	4b02      	ldr	r3, [pc, #8]	; (800c0e8 <malloc+0xc>)
 800c0de:	4601      	mov	r1, r0
 800c0e0:	6818      	ldr	r0, [r3, #0]
 800c0e2:	f000 bc1d 	b.w	800c920 <_malloc_r>
 800c0e6:	bf00      	nop
 800c0e8:	200002b0 	.word	0x200002b0

0800c0ec <memchr>:
 800c0ec:	b2c9      	uxtb	r1, r1
 800c0ee:	4402      	add	r2, r0
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	4290      	cmp	r0, r2
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	d101      	bne.n	800c0fc <memchr+0x10>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e003      	b.n	800c104 <memchr+0x18>
 800c0fc:	781c      	ldrb	r4, [r3, #0]
 800c0fe:	3001      	adds	r0, #1
 800c100:	428c      	cmp	r4, r1
 800c102:	d1f6      	bne.n	800c0f2 <memchr+0x6>
 800c104:	4618      	mov	r0, r3
 800c106:	bd10      	pop	{r4, pc}

0800c108 <_Balloc>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c10c:	4604      	mov	r4, r0
 800c10e:	460d      	mov	r5, r1
 800c110:	b976      	cbnz	r6, 800c130 <_Balloc+0x28>
 800c112:	2010      	movs	r0, #16
 800c114:	f7ff ffe2 	bl	800c0dc <malloc>
 800c118:	4602      	mov	r2, r0
 800c11a:	6260      	str	r0, [r4, #36]	; 0x24
 800c11c:	b920      	cbnz	r0, 800c128 <_Balloc+0x20>
 800c11e:	4b18      	ldr	r3, [pc, #96]	; (800c180 <_Balloc+0x78>)
 800c120:	2166      	movs	r1, #102	; 0x66
 800c122:	4818      	ldr	r0, [pc, #96]	; (800c184 <_Balloc+0x7c>)
 800c124:	f000 fe78 	bl	800ce18 <__assert_func>
 800c128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c12c:	6006      	str	r6, [r0, #0]
 800c12e:	60c6      	str	r6, [r0, #12]
 800c130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c132:	68f3      	ldr	r3, [r6, #12]
 800c134:	b183      	cbz	r3, 800c158 <_Balloc+0x50>
 800c136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c13e:	b9b8      	cbnz	r0, 800c170 <_Balloc+0x68>
 800c140:	2101      	movs	r1, #1
 800c142:	4620      	mov	r0, r4
 800c144:	fa01 f605 	lsl.w	r6, r1, r5
 800c148:	1d72      	adds	r2, r6, #5
 800c14a:	0092      	lsls	r2, r2, #2
 800c14c:	f000 fb66 	bl	800c81c <_calloc_r>
 800c150:	b160      	cbz	r0, 800c16c <_Balloc+0x64>
 800c152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c156:	e00e      	b.n	800c176 <_Balloc+0x6e>
 800c158:	2221      	movs	r2, #33	; 0x21
 800c15a:	2104      	movs	r1, #4
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 fb5d 	bl	800c81c <_calloc_r>
 800c162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c164:	60f0      	str	r0, [r6, #12]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1e4      	bne.n	800c136 <_Balloc+0x2e>
 800c16c:	2000      	movs	r0, #0
 800c16e:	bd70      	pop	{r4, r5, r6, pc}
 800c170:	6802      	ldr	r2, [r0, #0]
 800c172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c176:	2300      	movs	r3, #0
 800c178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c17c:	e7f7      	b.n	800c16e <_Balloc+0x66>
 800c17e:	bf00      	nop
 800c180:	0800d2a9 	.word	0x0800d2a9
 800c184:	0800d38c 	.word	0x0800d38c

0800c188 <_Bfree>:
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c18c:	4605      	mov	r5, r0
 800c18e:	460c      	mov	r4, r1
 800c190:	b976      	cbnz	r6, 800c1b0 <_Bfree+0x28>
 800c192:	2010      	movs	r0, #16
 800c194:	f7ff ffa2 	bl	800c0dc <malloc>
 800c198:	4602      	mov	r2, r0
 800c19a:	6268      	str	r0, [r5, #36]	; 0x24
 800c19c:	b920      	cbnz	r0, 800c1a8 <_Bfree+0x20>
 800c19e:	4b09      	ldr	r3, [pc, #36]	; (800c1c4 <_Bfree+0x3c>)
 800c1a0:	218a      	movs	r1, #138	; 0x8a
 800c1a2:	4809      	ldr	r0, [pc, #36]	; (800c1c8 <_Bfree+0x40>)
 800c1a4:	f000 fe38 	bl	800ce18 <__assert_func>
 800c1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1ac:	6006      	str	r6, [r0, #0]
 800c1ae:	60c6      	str	r6, [r0, #12]
 800c1b0:	b13c      	cbz	r4, 800c1c2 <_Bfree+0x3a>
 800c1b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1b4:	6862      	ldr	r2, [r4, #4]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1bc:	6021      	str	r1, [r4, #0]
 800c1be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}
 800c1c4:	0800d2a9 	.word	0x0800d2a9
 800c1c8:	0800d38c 	.word	0x0800d38c

0800c1cc <__multadd>:
 800c1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d0:	f101 0c14 	add.w	ip, r1, #20
 800c1d4:	4607      	mov	r7, r0
 800c1d6:	460c      	mov	r4, r1
 800c1d8:	461e      	mov	r6, r3
 800c1da:	690d      	ldr	r5, [r1, #16]
 800c1dc:	2000      	movs	r0, #0
 800c1de:	f8dc 3000 	ldr.w	r3, [ip]
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	b299      	uxth	r1, r3
 800c1e6:	4285      	cmp	r5, r0
 800c1e8:	fb02 6101 	mla	r1, r2, r1, r6
 800c1ec:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1f0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800c1f4:	b289      	uxth	r1, r1
 800c1f6:	fb02 3306 	mla	r3, r2, r6, r3
 800c1fa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c202:	f84c 1b04 	str.w	r1, [ip], #4
 800c206:	dcea      	bgt.n	800c1de <__multadd+0x12>
 800c208:	b30e      	cbz	r6, 800c24e <__multadd+0x82>
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	42ab      	cmp	r3, r5
 800c20e:	dc19      	bgt.n	800c244 <__multadd+0x78>
 800c210:	6861      	ldr	r1, [r4, #4]
 800c212:	4638      	mov	r0, r7
 800c214:	3101      	adds	r1, #1
 800c216:	f7ff ff77 	bl	800c108 <_Balloc>
 800c21a:	4680      	mov	r8, r0
 800c21c:	b928      	cbnz	r0, 800c22a <__multadd+0x5e>
 800c21e:	4602      	mov	r2, r0
 800c220:	4b0c      	ldr	r3, [pc, #48]	; (800c254 <__multadd+0x88>)
 800c222:	21b5      	movs	r1, #181	; 0xb5
 800c224:	480c      	ldr	r0, [pc, #48]	; (800c258 <__multadd+0x8c>)
 800c226:	f000 fdf7 	bl	800ce18 <__assert_func>
 800c22a:	6922      	ldr	r2, [r4, #16]
 800c22c:	f104 010c 	add.w	r1, r4, #12
 800c230:	300c      	adds	r0, #12
 800c232:	3202      	adds	r2, #2
 800c234:	0092      	lsls	r2, r2, #2
 800c236:	f7fe f8cb 	bl	800a3d0 <memcpy>
 800c23a:	4621      	mov	r1, r4
 800c23c:	4644      	mov	r4, r8
 800c23e:	4638      	mov	r0, r7
 800c240:	f7ff ffa2 	bl	800c188 <_Bfree>
 800c244:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c248:	3501      	adds	r5, #1
 800c24a:	615e      	str	r6, [r3, #20]
 800c24c:	6125      	str	r5, [r4, #16]
 800c24e:	4620      	mov	r0, r4
 800c250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c254:	0800d31b 	.word	0x0800d31b
 800c258:	0800d38c 	.word	0x0800d38c

0800c25c <__hi0bits>:
 800c25c:	0c03      	lsrs	r3, r0, #16
 800c25e:	041b      	lsls	r3, r3, #16
 800c260:	b9d3      	cbnz	r3, 800c298 <__hi0bits+0x3c>
 800c262:	0400      	lsls	r0, r0, #16
 800c264:	2310      	movs	r3, #16
 800c266:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c26a:	bf04      	itt	eq
 800c26c:	0200      	lsleq	r0, r0, #8
 800c26e:	3308      	addeq	r3, #8
 800c270:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c274:	bf04      	itt	eq
 800c276:	0100      	lsleq	r0, r0, #4
 800c278:	3304      	addeq	r3, #4
 800c27a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c27e:	bf04      	itt	eq
 800c280:	0080      	lsleq	r0, r0, #2
 800c282:	3302      	addeq	r3, #2
 800c284:	2800      	cmp	r0, #0
 800c286:	db05      	blt.n	800c294 <__hi0bits+0x38>
 800c288:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c28c:	f103 0301 	add.w	r3, r3, #1
 800c290:	bf08      	it	eq
 800c292:	2320      	moveq	r3, #32
 800c294:	4618      	mov	r0, r3
 800c296:	4770      	bx	lr
 800c298:	2300      	movs	r3, #0
 800c29a:	e7e4      	b.n	800c266 <__hi0bits+0xa>

0800c29c <__lo0bits>:
 800c29c:	6803      	ldr	r3, [r0, #0]
 800c29e:	4601      	mov	r1, r0
 800c2a0:	f013 0207 	ands.w	r2, r3, #7
 800c2a4:	d00b      	beq.n	800c2be <__lo0bits+0x22>
 800c2a6:	07da      	lsls	r2, r3, #31
 800c2a8:	d423      	bmi.n	800c2f2 <__lo0bits+0x56>
 800c2aa:	0798      	lsls	r0, r3, #30
 800c2ac:	bf47      	ittee	mi
 800c2ae:	085b      	lsrmi	r3, r3, #1
 800c2b0:	2001      	movmi	r0, #1
 800c2b2:	089b      	lsrpl	r3, r3, #2
 800c2b4:	2002      	movpl	r0, #2
 800c2b6:	bf4c      	ite	mi
 800c2b8:	600b      	strmi	r3, [r1, #0]
 800c2ba:	600b      	strpl	r3, [r1, #0]
 800c2bc:	4770      	bx	lr
 800c2be:	b298      	uxth	r0, r3
 800c2c0:	b9a8      	cbnz	r0, 800c2ee <__lo0bits+0x52>
 800c2c2:	0c1b      	lsrs	r3, r3, #16
 800c2c4:	2010      	movs	r0, #16
 800c2c6:	b2da      	uxtb	r2, r3
 800c2c8:	b90a      	cbnz	r2, 800c2ce <__lo0bits+0x32>
 800c2ca:	3008      	adds	r0, #8
 800c2cc:	0a1b      	lsrs	r3, r3, #8
 800c2ce:	071a      	lsls	r2, r3, #28
 800c2d0:	bf04      	itt	eq
 800c2d2:	091b      	lsreq	r3, r3, #4
 800c2d4:	3004      	addeq	r0, #4
 800c2d6:	079a      	lsls	r2, r3, #30
 800c2d8:	bf04      	itt	eq
 800c2da:	089b      	lsreq	r3, r3, #2
 800c2dc:	3002      	addeq	r0, #2
 800c2de:	07da      	lsls	r2, r3, #31
 800c2e0:	d403      	bmi.n	800c2ea <__lo0bits+0x4e>
 800c2e2:	085b      	lsrs	r3, r3, #1
 800c2e4:	f100 0001 	add.w	r0, r0, #1
 800c2e8:	d005      	beq.n	800c2f6 <__lo0bits+0x5a>
 800c2ea:	600b      	str	r3, [r1, #0]
 800c2ec:	4770      	bx	lr
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	e7e9      	b.n	800c2c6 <__lo0bits+0x2a>
 800c2f2:	2000      	movs	r0, #0
 800c2f4:	4770      	bx	lr
 800c2f6:	2020      	movs	r0, #32
 800c2f8:	4770      	bx	lr
	...

0800c2fc <__i2b>:
 800c2fc:	b510      	push	{r4, lr}
 800c2fe:	460c      	mov	r4, r1
 800c300:	2101      	movs	r1, #1
 800c302:	f7ff ff01 	bl	800c108 <_Balloc>
 800c306:	4602      	mov	r2, r0
 800c308:	b928      	cbnz	r0, 800c316 <__i2b+0x1a>
 800c30a:	4b05      	ldr	r3, [pc, #20]	; (800c320 <__i2b+0x24>)
 800c30c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c310:	4804      	ldr	r0, [pc, #16]	; (800c324 <__i2b+0x28>)
 800c312:	f000 fd81 	bl	800ce18 <__assert_func>
 800c316:	2301      	movs	r3, #1
 800c318:	6144      	str	r4, [r0, #20]
 800c31a:	6103      	str	r3, [r0, #16]
 800c31c:	bd10      	pop	{r4, pc}
 800c31e:	bf00      	nop
 800c320:	0800d31b 	.word	0x0800d31b
 800c324:	0800d38c 	.word	0x0800d38c

0800c328 <__multiply>:
 800c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32c:	4691      	mov	r9, r2
 800c32e:	690a      	ldr	r2, [r1, #16]
 800c330:	460c      	mov	r4, r1
 800c332:	b085      	sub	sp, #20
 800c334:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c338:	429a      	cmp	r2, r3
 800c33a:	bfbe      	ittt	lt
 800c33c:	460b      	movlt	r3, r1
 800c33e:	464c      	movlt	r4, r9
 800c340:	4699      	movlt	r9, r3
 800c342:	6927      	ldr	r7, [r4, #16]
 800c344:	68a3      	ldr	r3, [r4, #8]
 800c346:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c34a:	6861      	ldr	r1, [r4, #4]
 800c34c:	eb07 060a 	add.w	r6, r7, sl
 800c350:	42b3      	cmp	r3, r6
 800c352:	bfb8      	it	lt
 800c354:	3101      	addlt	r1, #1
 800c356:	f7ff fed7 	bl	800c108 <_Balloc>
 800c35a:	b930      	cbnz	r0, 800c36a <__multiply+0x42>
 800c35c:	4602      	mov	r2, r0
 800c35e:	4b44      	ldr	r3, [pc, #272]	; (800c470 <__multiply+0x148>)
 800c360:	f240 115d 	movw	r1, #349	; 0x15d
 800c364:	4843      	ldr	r0, [pc, #268]	; (800c474 <__multiply+0x14c>)
 800c366:	f000 fd57 	bl	800ce18 <__assert_func>
 800c36a:	f100 0514 	add.w	r5, r0, #20
 800c36e:	2200      	movs	r2, #0
 800c370:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c374:	462b      	mov	r3, r5
 800c376:	4543      	cmp	r3, r8
 800c378:	d321      	bcc.n	800c3be <__multiply+0x96>
 800c37a:	f104 0314 	add.w	r3, r4, #20
 800c37e:	f104 0115 	add.w	r1, r4, #21
 800c382:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c386:	f109 0314 	add.w	r3, r9, #20
 800c38a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c38e:	9202      	str	r2, [sp, #8]
 800c390:	1b3a      	subs	r2, r7, r4
 800c392:	3a15      	subs	r2, #21
 800c394:	f022 0203 	bic.w	r2, r2, #3
 800c398:	3204      	adds	r2, #4
 800c39a:	428f      	cmp	r7, r1
 800c39c:	bf38      	it	cc
 800c39e:	2204      	movcc	r2, #4
 800c3a0:	9201      	str	r2, [sp, #4]
 800c3a2:	9a02      	ldr	r2, [sp, #8]
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d80c      	bhi.n	800c3c4 <__multiply+0x9c>
 800c3aa:	2e00      	cmp	r6, #0
 800c3ac:	dd03      	ble.n	800c3b6 <__multiply+0x8e>
 800c3ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d05a      	beq.n	800c46c <__multiply+0x144>
 800c3b6:	6106      	str	r6, [r0, #16]
 800c3b8:	b005      	add	sp, #20
 800c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3be:	f843 2b04 	str.w	r2, [r3], #4
 800c3c2:	e7d8      	b.n	800c376 <__multiply+0x4e>
 800c3c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3c8:	f1ba 0f00 	cmp.w	sl, #0
 800c3cc:	d024      	beq.n	800c418 <__multiply+0xf0>
 800c3ce:	f104 0e14 	add.w	lr, r4, #20
 800c3d2:	46a9      	mov	r9, r5
 800c3d4:	f04f 0c00 	mov.w	ip, #0
 800c3d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3dc:	f8d9 1000 	ldr.w	r1, [r9]
 800c3e0:	fa1f fb82 	uxth.w	fp, r2
 800c3e4:	4577      	cmp	r7, lr
 800c3e6:	b289      	uxth	r1, r1
 800c3e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c3ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c3f0:	f8d9 2000 	ldr.w	r2, [r9]
 800c3f4:	4461      	add	r1, ip
 800c3f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800c3fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c402:	b289      	uxth	r1, r1
 800c404:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c408:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c40c:	f849 1b04 	str.w	r1, [r9], #4
 800c410:	d8e2      	bhi.n	800c3d8 <__multiply+0xb0>
 800c412:	9a01      	ldr	r2, [sp, #4]
 800c414:	f845 c002 	str.w	ip, [r5, r2]
 800c418:	9a03      	ldr	r2, [sp, #12]
 800c41a:	3304      	adds	r3, #4
 800c41c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c420:	f1b9 0f00 	cmp.w	r9, #0
 800c424:	d020      	beq.n	800c468 <__multiply+0x140>
 800c426:	6829      	ldr	r1, [r5, #0]
 800c428:	f104 0c14 	add.w	ip, r4, #20
 800c42c:	46ae      	mov	lr, r5
 800c42e:	f04f 0a00 	mov.w	sl, #0
 800c432:	f8bc b000 	ldrh.w	fp, [ip]
 800c436:	b289      	uxth	r1, r1
 800c438:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c43c:	fb09 220b 	mla	r2, r9, fp, r2
 800c440:	4492      	add	sl, r2
 800c442:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c446:	f84e 1b04 	str.w	r1, [lr], #4
 800c44a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c44e:	f8be 1000 	ldrh.w	r1, [lr]
 800c452:	0c12      	lsrs	r2, r2, #16
 800c454:	4567      	cmp	r7, ip
 800c456:	fb09 1102 	mla	r1, r9, r2, r1
 800c45a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c45e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c462:	d8e6      	bhi.n	800c432 <__multiply+0x10a>
 800c464:	9a01      	ldr	r2, [sp, #4]
 800c466:	50a9      	str	r1, [r5, r2]
 800c468:	3504      	adds	r5, #4
 800c46a:	e79a      	b.n	800c3a2 <__multiply+0x7a>
 800c46c:	3e01      	subs	r6, #1
 800c46e:	e79c      	b.n	800c3aa <__multiply+0x82>
 800c470:	0800d31b 	.word	0x0800d31b
 800c474:	0800d38c 	.word	0x0800d38c

0800c478 <__pow5mult>:
 800c478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c47c:	4615      	mov	r5, r2
 800c47e:	f012 0203 	ands.w	r2, r2, #3
 800c482:	4606      	mov	r6, r0
 800c484:	460f      	mov	r7, r1
 800c486:	d007      	beq.n	800c498 <__pow5mult+0x20>
 800c488:	3a01      	subs	r2, #1
 800c48a:	4c25      	ldr	r4, [pc, #148]	; (800c520 <__pow5mult+0xa8>)
 800c48c:	2300      	movs	r3, #0
 800c48e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c492:	f7ff fe9b 	bl	800c1cc <__multadd>
 800c496:	4607      	mov	r7, r0
 800c498:	10ad      	asrs	r5, r5, #2
 800c49a:	d03d      	beq.n	800c518 <__pow5mult+0xa0>
 800c49c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c49e:	b97c      	cbnz	r4, 800c4c0 <__pow5mult+0x48>
 800c4a0:	2010      	movs	r0, #16
 800c4a2:	f7ff fe1b 	bl	800c0dc <malloc>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	6270      	str	r0, [r6, #36]	; 0x24
 800c4aa:	b928      	cbnz	r0, 800c4b8 <__pow5mult+0x40>
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <__pow5mult+0xac>)
 800c4ae:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c4b2:	481d      	ldr	r0, [pc, #116]	; (800c528 <__pow5mult+0xb0>)
 800c4b4:	f000 fcb0 	bl	800ce18 <__assert_func>
 800c4b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4bc:	6004      	str	r4, [r0, #0]
 800c4be:	60c4      	str	r4, [r0, #12]
 800c4c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c4c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4c8:	b94c      	cbnz	r4, 800c4de <__pow5mult+0x66>
 800c4ca:	f240 2171 	movw	r1, #625	; 0x271
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f7ff ff14 	bl	800c2fc <__i2b>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4dc:	6003      	str	r3, [r0, #0]
 800c4de:	f04f 0900 	mov.w	r9, #0
 800c4e2:	07eb      	lsls	r3, r5, #31
 800c4e4:	d50a      	bpl.n	800c4fc <__pow5mult+0x84>
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7ff ff1c 	bl	800c328 <__multiply>
 800c4f0:	4680      	mov	r8, r0
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	4647      	mov	r7, r8
 800c4f8:	f7ff fe46 	bl	800c188 <_Bfree>
 800c4fc:	106d      	asrs	r5, r5, #1
 800c4fe:	d00b      	beq.n	800c518 <__pow5mult+0xa0>
 800c500:	6820      	ldr	r0, [r4, #0]
 800c502:	b938      	cbnz	r0, 800c514 <__pow5mult+0x9c>
 800c504:	4622      	mov	r2, r4
 800c506:	4621      	mov	r1, r4
 800c508:	4630      	mov	r0, r6
 800c50a:	f7ff ff0d 	bl	800c328 <__multiply>
 800c50e:	6020      	str	r0, [r4, #0]
 800c510:	f8c0 9000 	str.w	r9, [r0]
 800c514:	4604      	mov	r4, r0
 800c516:	e7e4      	b.n	800c4e2 <__pow5mult+0x6a>
 800c518:	4638      	mov	r0, r7
 800c51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51e:	bf00      	nop
 800c520:	0800d4d8 	.word	0x0800d4d8
 800c524:	0800d2a9 	.word	0x0800d2a9
 800c528:	0800d38c 	.word	0x0800d38c

0800c52c <__lshift>:
 800c52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c530:	460c      	mov	r4, r1
 800c532:	4607      	mov	r7, r0
 800c534:	4691      	mov	r9, r2
 800c536:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c53a:	6923      	ldr	r3, [r4, #16]
 800c53c:	6849      	ldr	r1, [r1, #4]
 800c53e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c542:	68a3      	ldr	r3, [r4, #8]
 800c544:	f108 0601 	add.w	r6, r8, #1
 800c548:	42b3      	cmp	r3, r6
 800c54a:	db0b      	blt.n	800c564 <__lshift+0x38>
 800c54c:	4638      	mov	r0, r7
 800c54e:	f7ff fddb 	bl	800c108 <_Balloc>
 800c552:	4605      	mov	r5, r0
 800c554:	b948      	cbnz	r0, 800c56a <__lshift+0x3e>
 800c556:	4602      	mov	r2, r0
 800c558:	4b2a      	ldr	r3, [pc, #168]	; (800c604 <__lshift+0xd8>)
 800c55a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c55e:	482a      	ldr	r0, [pc, #168]	; (800c608 <__lshift+0xdc>)
 800c560:	f000 fc5a 	bl	800ce18 <__assert_func>
 800c564:	3101      	adds	r1, #1
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	e7ee      	b.n	800c548 <__lshift+0x1c>
 800c56a:	2300      	movs	r3, #0
 800c56c:	f100 0114 	add.w	r1, r0, #20
 800c570:	f100 0210 	add.w	r2, r0, #16
 800c574:	4618      	mov	r0, r3
 800c576:	4553      	cmp	r3, sl
 800c578:	db37      	blt.n	800c5ea <__lshift+0xbe>
 800c57a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c57e:	f104 0314 	add.w	r3, r4, #20
 800c582:	6920      	ldr	r0, [r4, #16]
 800c584:	f019 091f 	ands.w	r9, r9, #31
 800c588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c58c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c590:	d02f      	beq.n	800c5f2 <__lshift+0xc6>
 800c592:	f1c9 0e20 	rsb	lr, r9, #32
 800c596:	468a      	mov	sl, r1
 800c598:	f04f 0c00 	mov.w	ip, #0
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	fa02 f209 	lsl.w	r2, r2, r9
 800c5a2:	ea42 020c 	orr.w	r2, r2, ip
 800c5a6:	f84a 2b04 	str.w	r2, [sl], #4
 800c5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ae:	4298      	cmp	r0, r3
 800c5b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c5b4:	d8f2      	bhi.n	800c59c <__lshift+0x70>
 800c5b6:	1b03      	subs	r3, r0, r4
 800c5b8:	f104 0215 	add.w	r2, r4, #21
 800c5bc:	3b15      	subs	r3, #21
 800c5be:	f023 0303 	bic.w	r3, r3, #3
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	4290      	cmp	r0, r2
 800c5c6:	bf38      	it	cc
 800c5c8:	2304      	movcc	r3, #4
 800c5ca:	f841 c003 	str.w	ip, [r1, r3]
 800c5ce:	f1bc 0f00 	cmp.w	ip, #0
 800c5d2:	d001      	beq.n	800c5d8 <__lshift+0xac>
 800c5d4:	f108 0602 	add.w	r6, r8, #2
 800c5d8:	3e01      	subs	r6, #1
 800c5da:	4638      	mov	r0, r7
 800c5dc:	4621      	mov	r1, r4
 800c5de:	612e      	str	r6, [r5, #16]
 800c5e0:	f7ff fdd2 	bl	800c188 <_Bfree>
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5f0:	e7c1      	b.n	800c576 <__lshift+0x4a>
 800c5f2:	3904      	subs	r1, #4
 800c5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5f8:	4298      	cmp	r0, r3
 800c5fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5fe:	d8f9      	bhi.n	800c5f4 <__lshift+0xc8>
 800c600:	e7ea      	b.n	800c5d8 <__lshift+0xac>
 800c602:	bf00      	nop
 800c604:	0800d31b 	.word	0x0800d31b
 800c608:	0800d38c 	.word	0x0800d38c

0800c60c <__mcmp>:
 800c60c:	6902      	ldr	r2, [r0, #16]
 800c60e:	b530      	push	{r4, r5, lr}
 800c610:	690c      	ldr	r4, [r1, #16]
 800c612:	1b12      	subs	r2, r2, r4
 800c614:	d10e      	bne.n	800c634 <__mcmp+0x28>
 800c616:	f100 0314 	add.w	r3, r0, #20
 800c61a:	3114      	adds	r1, #20
 800c61c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c62c:	42a5      	cmp	r5, r4
 800c62e:	d003      	beq.n	800c638 <__mcmp+0x2c>
 800c630:	d305      	bcc.n	800c63e <__mcmp+0x32>
 800c632:	2201      	movs	r2, #1
 800c634:	4610      	mov	r0, r2
 800c636:	bd30      	pop	{r4, r5, pc}
 800c638:	4283      	cmp	r3, r0
 800c63a:	d3f3      	bcc.n	800c624 <__mcmp+0x18>
 800c63c:	e7fa      	b.n	800c634 <__mcmp+0x28>
 800c63e:	f04f 32ff 	mov.w	r2, #4294967295
 800c642:	e7f7      	b.n	800c634 <__mcmp+0x28>

0800c644 <__mdiff>:
 800c644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	460c      	mov	r4, r1
 800c64a:	4606      	mov	r6, r0
 800c64c:	4611      	mov	r1, r2
 800c64e:	4692      	mov	sl, r2
 800c650:	4620      	mov	r0, r4
 800c652:	f7ff ffdb 	bl	800c60c <__mcmp>
 800c656:	1e05      	subs	r5, r0, #0
 800c658:	d110      	bne.n	800c67c <__mdiff+0x38>
 800c65a:	4629      	mov	r1, r5
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7ff fd53 	bl	800c108 <_Balloc>
 800c662:	b930      	cbnz	r0, 800c672 <__mdiff+0x2e>
 800c664:	4b3d      	ldr	r3, [pc, #244]	; (800c75c <__mdiff+0x118>)
 800c666:	4602      	mov	r2, r0
 800c668:	f240 2132 	movw	r1, #562	; 0x232
 800c66c:	483c      	ldr	r0, [pc, #240]	; (800c760 <__mdiff+0x11c>)
 800c66e:	f000 fbd3 	bl	800ce18 <__assert_func>
 800c672:	2301      	movs	r3, #1
 800c674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67c:	bfa4      	itt	ge
 800c67e:	4653      	movge	r3, sl
 800c680:	46a2      	movge	sl, r4
 800c682:	4630      	mov	r0, r6
 800c684:	bfa8      	it	ge
 800c686:	2500      	movge	r5, #0
 800c688:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c68c:	bfac      	ite	ge
 800c68e:	461c      	movge	r4, r3
 800c690:	2501      	movlt	r5, #1
 800c692:	f7ff fd39 	bl	800c108 <_Balloc>
 800c696:	b920      	cbnz	r0, 800c6a2 <__mdiff+0x5e>
 800c698:	4b30      	ldr	r3, [pc, #192]	; (800c75c <__mdiff+0x118>)
 800c69a:	4602      	mov	r2, r0
 800c69c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c6a0:	e7e4      	b.n	800c66c <__mdiff+0x28>
 800c6a2:	f8da 7010 	ldr.w	r7, [sl, #16]
 800c6a6:	f104 0914 	add.w	r9, r4, #20
 800c6aa:	6926      	ldr	r6, [r4, #16]
 800c6ac:	f100 0814 	add.w	r8, r0, #20
 800c6b0:	60c5      	str	r5, [r0, #12]
 800c6b2:	f10a 0514 	add.w	r5, sl, #20
 800c6b6:	f10a 0210 	add.w	r2, sl, #16
 800c6ba:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6be:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800c6c2:	46c2      	mov	sl, r8
 800c6c4:	f04f 0c00 	mov.w	ip, #0
 800c6c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6d0:	fa1f f18b 	uxth.w	r1, fp
 800c6d4:	454e      	cmp	r6, r9
 800c6d6:	448c      	add	ip, r1
 800c6d8:	b299      	uxth	r1, r3
 800c6da:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c6de:	ebac 0101 	sub.w	r1, ip, r1
 800c6e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c6ea:	b289      	uxth	r1, r1
 800c6ec:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c6f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c6f4:	f84a 3b04 	str.w	r3, [sl], #4
 800c6f8:	d8e6      	bhi.n	800c6c8 <__mdiff+0x84>
 800c6fa:	1b33      	subs	r3, r6, r4
 800c6fc:	3415      	adds	r4, #21
 800c6fe:	3b15      	subs	r3, #21
 800c700:	f023 0303 	bic.w	r3, r3, #3
 800c704:	3304      	adds	r3, #4
 800c706:	42a6      	cmp	r6, r4
 800c708:	bf38      	it	cc
 800c70a:	2304      	movcc	r3, #4
 800c70c:	441d      	add	r5, r3
 800c70e:	4443      	add	r3, r8
 800c710:	462c      	mov	r4, r5
 800c712:	461e      	mov	r6, r3
 800c714:	4574      	cmp	r4, lr
 800c716:	d30e      	bcc.n	800c736 <__mdiff+0xf2>
 800c718:	f10e 0203 	add.w	r2, lr, #3
 800c71c:	1b52      	subs	r2, r2, r5
 800c71e:	3d03      	subs	r5, #3
 800c720:	f022 0203 	bic.w	r2, r2, #3
 800c724:	45ae      	cmp	lr, r5
 800c726:	bf38      	it	cc
 800c728:	2200      	movcc	r2, #0
 800c72a:	441a      	add	r2, r3
 800c72c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c730:	b18b      	cbz	r3, 800c756 <__mdiff+0x112>
 800c732:	6107      	str	r7, [r0, #16]
 800c734:	e7a0      	b.n	800c678 <__mdiff+0x34>
 800c736:	f854 8b04 	ldr.w	r8, [r4], #4
 800c73a:	fa1f f288 	uxth.w	r2, r8
 800c73e:	4462      	add	r2, ip
 800c740:	1411      	asrs	r1, r2, #16
 800c742:	b292      	uxth	r2, r2
 800c744:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800c748:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c74c:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800c750:	f846 2b04 	str.w	r2, [r6], #4
 800c754:	e7de      	b.n	800c714 <__mdiff+0xd0>
 800c756:	3f01      	subs	r7, #1
 800c758:	e7e8      	b.n	800c72c <__mdiff+0xe8>
 800c75a:	bf00      	nop
 800c75c:	0800d31b 	.word	0x0800d31b
 800c760:	0800d38c 	.word	0x0800d38c

0800c764 <__d2b>:
 800c764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c768:	4689      	mov	r9, r1
 800c76a:	2101      	movs	r1, #1
 800c76c:	4690      	mov	r8, r2
 800c76e:	ec57 6b10 	vmov	r6, r7, d0
 800c772:	f7ff fcc9 	bl	800c108 <_Balloc>
 800c776:	4604      	mov	r4, r0
 800c778:	b930      	cbnz	r0, 800c788 <__d2b+0x24>
 800c77a:	4602      	mov	r2, r0
 800c77c:	4b25      	ldr	r3, [pc, #148]	; (800c814 <__d2b+0xb0>)
 800c77e:	f240 310a 	movw	r1, #778	; 0x30a
 800c782:	4825      	ldr	r0, [pc, #148]	; (800c818 <__d2b+0xb4>)
 800c784:	f000 fb48 	bl	800ce18 <__assert_func>
 800c788:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c78c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c790:	bb35      	cbnz	r5, 800c7e0 <__d2b+0x7c>
 800c792:	2e00      	cmp	r6, #0
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	d028      	beq.n	800c7ea <__d2b+0x86>
 800c798:	4668      	mov	r0, sp
 800c79a:	9600      	str	r6, [sp, #0]
 800c79c:	f7ff fd7e 	bl	800c29c <__lo0bits>
 800c7a0:	9900      	ldr	r1, [sp, #0]
 800c7a2:	b300      	cbz	r0, 800c7e6 <__d2b+0x82>
 800c7a4:	9a01      	ldr	r2, [sp, #4]
 800c7a6:	f1c0 0320 	rsb	r3, r0, #32
 800c7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ae:	40c2      	lsrs	r2, r0
 800c7b0:	430b      	orrs	r3, r1
 800c7b2:	9201      	str	r2, [sp, #4]
 800c7b4:	6163      	str	r3, [r4, #20]
 800c7b6:	9b01      	ldr	r3, [sp, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	61a3      	str	r3, [r4, #24]
 800c7bc:	bf14      	ite	ne
 800c7be:	2202      	movne	r2, #2
 800c7c0:	2201      	moveq	r2, #1
 800c7c2:	6122      	str	r2, [r4, #16]
 800c7c4:	b1d5      	cbz	r5, 800c7fc <__d2b+0x98>
 800c7c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c7ca:	4405      	add	r5, r0
 800c7cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c7d0:	f8c9 5000 	str.w	r5, [r9]
 800c7d4:	f8c8 0000 	str.w	r0, [r8]
 800c7d8:	4620      	mov	r0, r4
 800c7da:	b003      	add	sp, #12
 800c7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7e4:	e7d5      	b.n	800c792 <__d2b+0x2e>
 800c7e6:	6161      	str	r1, [r4, #20]
 800c7e8:	e7e5      	b.n	800c7b6 <__d2b+0x52>
 800c7ea:	a801      	add	r0, sp, #4
 800c7ec:	f7ff fd56 	bl	800c29c <__lo0bits>
 800c7f0:	9b01      	ldr	r3, [sp, #4]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	3020      	adds	r0, #32
 800c7f6:	6163      	str	r3, [r4, #20]
 800c7f8:	6122      	str	r2, [r4, #16]
 800c7fa:	e7e3      	b.n	800c7c4 <__d2b+0x60>
 800c7fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c800:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c804:	f8c9 0000 	str.w	r0, [r9]
 800c808:	6918      	ldr	r0, [r3, #16]
 800c80a:	f7ff fd27 	bl	800c25c <__hi0bits>
 800c80e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c812:	e7df      	b.n	800c7d4 <__d2b+0x70>
 800c814:	0800d31b 	.word	0x0800d31b
 800c818:	0800d38c 	.word	0x0800d38c

0800c81c <_calloc_r>:
 800c81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c81e:	fba1 2402 	umull	r2, r4, r1, r2
 800c822:	b94c      	cbnz	r4, 800c838 <_calloc_r+0x1c>
 800c824:	4611      	mov	r1, r2
 800c826:	9201      	str	r2, [sp, #4]
 800c828:	f000 f87a 	bl	800c920 <_malloc_r>
 800c82c:	9a01      	ldr	r2, [sp, #4]
 800c82e:	4605      	mov	r5, r0
 800c830:	b930      	cbnz	r0, 800c840 <_calloc_r+0x24>
 800c832:	4628      	mov	r0, r5
 800c834:	b003      	add	sp, #12
 800c836:	bd30      	pop	{r4, r5, pc}
 800c838:	220c      	movs	r2, #12
 800c83a:	2500      	movs	r5, #0
 800c83c:	6002      	str	r2, [r0, #0]
 800c83e:	e7f8      	b.n	800c832 <_calloc_r+0x16>
 800c840:	4621      	mov	r1, r4
 800c842:	f7fd fdd2 	bl	800a3ea <memset>
 800c846:	e7f4      	b.n	800c832 <_calloc_r+0x16>

0800c848 <_free_r>:
 800c848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c84a:	2900      	cmp	r1, #0
 800c84c:	d043      	beq.n	800c8d6 <_free_r+0x8e>
 800c84e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c852:	1f0c      	subs	r4, r1, #4
 800c854:	9001      	str	r0, [sp, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	bfb8      	it	lt
 800c85a:	18e4      	addlt	r4, r4, r3
 800c85c:	f000 fb62 	bl	800cf24 <__malloc_lock>
 800c860:	4a1e      	ldr	r2, [pc, #120]	; (800c8dc <_free_r+0x94>)
 800c862:	9801      	ldr	r0, [sp, #4]
 800c864:	6813      	ldr	r3, [r2, #0]
 800c866:	b933      	cbnz	r3, 800c876 <_free_r+0x2e>
 800c868:	6063      	str	r3, [r4, #4]
 800c86a:	6014      	str	r4, [r2, #0]
 800c86c:	b003      	add	sp, #12
 800c86e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c872:	f000 bb5d 	b.w	800cf30 <__malloc_unlock>
 800c876:	42a3      	cmp	r3, r4
 800c878:	d908      	bls.n	800c88c <_free_r+0x44>
 800c87a:	6825      	ldr	r5, [r4, #0]
 800c87c:	1961      	adds	r1, r4, r5
 800c87e:	428b      	cmp	r3, r1
 800c880:	bf01      	itttt	eq
 800c882:	6819      	ldreq	r1, [r3, #0]
 800c884:	685b      	ldreq	r3, [r3, #4]
 800c886:	1949      	addeq	r1, r1, r5
 800c888:	6021      	streq	r1, [r4, #0]
 800c88a:	e7ed      	b.n	800c868 <_free_r+0x20>
 800c88c:	461a      	mov	r2, r3
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	b10b      	cbz	r3, 800c896 <_free_r+0x4e>
 800c892:	42a3      	cmp	r3, r4
 800c894:	d9fa      	bls.n	800c88c <_free_r+0x44>
 800c896:	6811      	ldr	r1, [r2, #0]
 800c898:	1855      	adds	r5, r2, r1
 800c89a:	42a5      	cmp	r5, r4
 800c89c:	d10b      	bne.n	800c8b6 <_free_r+0x6e>
 800c89e:	6824      	ldr	r4, [r4, #0]
 800c8a0:	4421      	add	r1, r4
 800c8a2:	1854      	adds	r4, r2, r1
 800c8a4:	6011      	str	r1, [r2, #0]
 800c8a6:	42a3      	cmp	r3, r4
 800c8a8:	d1e0      	bne.n	800c86c <_free_r+0x24>
 800c8aa:	681c      	ldr	r4, [r3, #0]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	4421      	add	r1, r4
 800c8b0:	6053      	str	r3, [r2, #4]
 800c8b2:	6011      	str	r1, [r2, #0]
 800c8b4:	e7da      	b.n	800c86c <_free_r+0x24>
 800c8b6:	d902      	bls.n	800c8be <_free_r+0x76>
 800c8b8:	230c      	movs	r3, #12
 800c8ba:	6003      	str	r3, [r0, #0]
 800c8bc:	e7d6      	b.n	800c86c <_free_r+0x24>
 800c8be:	6825      	ldr	r5, [r4, #0]
 800c8c0:	1961      	adds	r1, r4, r5
 800c8c2:	428b      	cmp	r3, r1
 800c8c4:	bf02      	ittt	eq
 800c8c6:	6819      	ldreq	r1, [r3, #0]
 800c8c8:	685b      	ldreq	r3, [r3, #4]
 800c8ca:	1949      	addeq	r1, r1, r5
 800c8cc:	6063      	str	r3, [r4, #4]
 800c8ce:	bf08      	it	eq
 800c8d0:	6021      	streq	r1, [r4, #0]
 800c8d2:	6054      	str	r4, [r2, #4]
 800c8d4:	e7ca      	b.n	800c86c <_free_r+0x24>
 800c8d6:	b003      	add	sp, #12
 800c8d8:	bd30      	pop	{r4, r5, pc}
 800c8da:	bf00      	nop
 800c8dc:	200083c4 	.word	0x200083c4

0800c8e0 <sbrk_aligned>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	4e0e      	ldr	r6, [pc, #56]	; (800c91c <sbrk_aligned+0x3c>)
 800c8e4:	460c      	mov	r4, r1
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	6831      	ldr	r1, [r6, #0]
 800c8ea:	b911      	cbnz	r1, 800c8f2 <sbrk_aligned+0x12>
 800c8ec:	f000 fa2e 	bl	800cd4c <_sbrk_r>
 800c8f0:	6030      	str	r0, [r6, #0]
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f000 fa29 	bl	800cd4c <_sbrk_r>
 800c8fa:	1c43      	adds	r3, r0, #1
 800c8fc:	d00a      	beq.n	800c914 <sbrk_aligned+0x34>
 800c8fe:	1cc4      	adds	r4, r0, #3
 800c900:	f024 0403 	bic.w	r4, r4, #3
 800c904:	42a0      	cmp	r0, r4
 800c906:	d007      	beq.n	800c918 <sbrk_aligned+0x38>
 800c908:	1a21      	subs	r1, r4, r0
 800c90a:	4628      	mov	r0, r5
 800c90c:	f000 fa1e 	bl	800cd4c <_sbrk_r>
 800c910:	3001      	adds	r0, #1
 800c912:	d101      	bne.n	800c918 <sbrk_aligned+0x38>
 800c914:	f04f 34ff 	mov.w	r4, #4294967295
 800c918:	4620      	mov	r0, r4
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	200083c8 	.word	0x200083c8

0800c920 <_malloc_r>:
 800c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c924:	1ccd      	adds	r5, r1, #3
 800c926:	4607      	mov	r7, r0
 800c928:	f025 0503 	bic.w	r5, r5, #3
 800c92c:	3508      	adds	r5, #8
 800c92e:	2d0c      	cmp	r5, #12
 800c930:	bf38      	it	cc
 800c932:	250c      	movcc	r5, #12
 800c934:	2d00      	cmp	r5, #0
 800c936:	db01      	blt.n	800c93c <_malloc_r+0x1c>
 800c938:	42a9      	cmp	r1, r5
 800c93a:	d905      	bls.n	800c948 <_malloc_r+0x28>
 800c93c:	230c      	movs	r3, #12
 800c93e:	2600      	movs	r6, #0
 800c940:	603b      	str	r3, [r7, #0]
 800c942:	4630      	mov	r0, r6
 800c944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c948:	4e2e      	ldr	r6, [pc, #184]	; (800ca04 <_malloc_r+0xe4>)
 800c94a:	f000 faeb 	bl	800cf24 <__malloc_lock>
 800c94e:	6833      	ldr	r3, [r6, #0]
 800c950:	461c      	mov	r4, r3
 800c952:	bb34      	cbnz	r4, 800c9a2 <_malloc_r+0x82>
 800c954:	4629      	mov	r1, r5
 800c956:	4638      	mov	r0, r7
 800c958:	f7ff ffc2 	bl	800c8e0 <sbrk_aligned>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	4604      	mov	r4, r0
 800c960:	d14d      	bne.n	800c9fe <_malloc_r+0xde>
 800c962:	6834      	ldr	r4, [r6, #0]
 800c964:	4626      	mov	r6, r4
 800c966:	2e00      	cmp	r6, #0
 800c968:	d140      	bne.n	800c9ec <_malloc_r+0xcc>
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	4631      	mov	r1, r6
 800c96e:	4638      	mov	r0, r7
 800c970:	eb04 0803 	add.w	r8, r4, r3
 800c974:	f000 f9ea 	bl	800cd4c <_sbrk_r>
 800c978:	4580      	cmp	r8, r0
 800c97a:	d13a      	bne.n	800c9f2 <_malloc_r+0xd2>
 800c97c:	6821      	ldr	r1, [r4, #0]
 800c97e:	3503      	adds	r5, #3
 800c980:	4638      	mov	r0, r7
 800c982:	1a6d      	subs	r5, r5, r1
 800c984:	f025 0503 	bic.w	r5, r5, #3
 800c988:	3508      	adds	r5, #8
 800c98a:	2d0c      	cmp	r5, #12
 800c98c:	bf38      	it	cc
 800c98e:	250c      	movcc	r5, #12
 800c990:	4629      	mov	r1, r5
 800c992:	f7ff ffa5 	bl	800c8e0 <sbrk_aligned>
 800c996:	3001      	adds	r0, #1
 800c998:	d02b      	beq.n	800c9f2 <_malloc_r+0xd2>
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	442b      	add	r3, r5
 800c99e:	6023      	str	r3, [r4, #0]
 800c9a0:	e00e      	b.n	800c9c0 <_malloc_r+0xa0>
 800c9a2:	6822      	ldr	r2, [r4, #0]
 800c9a4:	1b52      	subs	r2, r2, r5
 800c9a6:	d41e      	bmi.n	800c9e6 <_malloc_r+0xc6>
 800c9a8:	2a0b      	cmp	r2, #11
 800c9aa:	d916      	bls.n	800c9da <_malloc_r+0xba>
 800c9ac:	1961      	adds	r1, r4, r5
 800c9ae:	42a3      	cmp	r3, r4
 800c9b0:	6025      	str	r5, [r4, #0]
 800c9b2:	bf18      	it	ne
 800c9b4:	6059      	strne	r1, [r3, #4]
 800c9b6:	6863      	ldr	r3, [r4, #4]
 800c9b8:	bf08      	it	eq
 800c9ba:	6031      	streq	r1, [r6, #0]
 800c9bc:	5162      	str	r2, [r4, r5]
 800c9be:	604b      	str	r3, [r1, #4]
 800c9c0:	f104 060b 	add.w	r6, r4, #11
 800c9c4:	4638      	mov	r0, r7
 800c9c6:	f000 fab3 	bl	800cf30 <__malloc_unlock>
 800c9ca:	1d23      	adds	r3, r4, #4
 800c9cc:	f026 0607 	bic.w	r6, r6, #7
 800c9d0:	1af2      	subs	r2, r6, r3
 800c9d2:	d0b6      	beq.n	800c942 <_malloc_r+0x22>
 800c9d4:	1b9b      	subs	r3, r3, r6
 800c9d6:	50a3      	str	r3, [r4, r2]
 800c9d8:	e7b3      	b.n	800c942 <_malloc_r+0x22>
 800c9da:	6862      	ldr	r2, [r4, #4]
 800c9dc:	42a3      	cmp	r3, r4
 800c9de:	bf0c      	ite	eq
 800c9e0:	6032      	streq	r2, [r6, #0]
 800c9e2:	605a      	strne	r2, [r3, #4]
 800c9e4:	e7ec      	b.n	800c9c0 <_malloc_r+0xa0>
 800c9e6:	4623      	mov	r3, r4
 800c9e8:	6864      	ldr	r4, [r4, #4]
 800c9ea:	e7b2      	b.n	800c952 <_malloc_r+0x32>
 800c9ec:	4634      	mov	r4, r6
 800c9ee:	6876      	ldr	r6, [r6, #4]
 800c9f0:	e7b9      	b.n	800c966 <_malloc_r+0x46>
 800c9f2:	230c      	movs	r3, #12
 800c9f4:	4638      	mov	r0, r7
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	f000 fa9a 	bl	800cf30 <__malloc_unlock>
 800c9fc:	e7a1      	b.n	800c942 <_malloc_r+0x22>
 800c9fe:	6025      	str	r5, [r4, #0]
 800ca00:	e7de      	b.n	800c9c0 <_malloc_r+0xa0>
 800ca02:	bf00      	nop
 800ca04:	200083c4 	.word	0x200083c4

0800ca08 <__sfputc_r>:
 800ca08:	6893      	ldr	r3, [r2, #8]
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	6093      	str	r3, [r2, #8]
 800ca10:	b410      	push	{r4}
 800ca12:	da08      	bge.n	800ca26 <__sfputc_r+0x1e>
 800ca14:	6994      	ldr	r4, [r2, #24]
 800ca16:	42a3      	cmp	r3, r4
 800ca18:	db01      	blt.n	800ca1e <__sfputc_r+0x16>
 800ca1a:	290a      	cmp	r1, #10
 800ca1c:	d103      	bne.n	800ca26 <__sfputc_r+0x1e>
 800ca1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca22:	f7fe b9fb 	b.w	800ae1c <__swbuf_r>
 800ca26:	6813      	ldr	r3, [r2, #0]
 800ca28:	1c58      	adds	r0, r3, #1
 800ca2a:	6010      	str	r0, [r2, #0]
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	7019      	strb	r1, [r3, #0]
 800ca30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <__sfputs_r>:
 800ca36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca38:	4606      	mov	r6, r0
 800ca3a:	460f      	mov	r7, r1
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	18d5      	adds	r5, r2, r3
 800ca40:	42ac      	cmp	r4, r5
 800ca42:	d101      	bne.n	800ca48 <__sfputs_r+0x12>
 800ca44:	2000      	movs	r0, #0
 800ca46:	e007      	b.n	800ca58 <__sfputs_r+0x22>
 800ca48:	463a      	mov	r2, r7
 800ca4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4e:	4630      	mov	r0, r6
 800ca50:	f7ff ffda 	bl	800ca08 <__sfputc_r>
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	d1f3      	bne.n	800ca40 <__sfputs_r+0xa>
 800ca58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca5c <_vfiprintf_r>:
 800ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	460d      	mov	r5, r1
 800ca62:	b09d      	sub	sp, #116	; 0x74
 800ca64:	4614      	mov	r4, r2
 800ca66:	4698      	mov	r8, r3
 800ca68:	4606      	mov	r6, r0
 800ca6a:	b118      	cbz	r0, 800ca74 <_vfiprintf_r+0x18>
 800ca6c:	6983      	ldr	r3, [r0, #24]
 800ca6e:	b90b      	cbnz	r3, 800ca74 <_vfiprintf_r+0x18>
 800ca70:	f7ff fa2a 	bl	800bec8 <__sinit>
 800ca74:	4b89      	ldr	r3, [pc, #548]	; (800cc9c <_vfiprintf_r+0x240>)
 800ca76:	429d      	cmp	r5, r3
 800ca78:	d11b      	bne.n	800cab2 <_vfiprintf_r+0x56>
 800ca7a:	6875      	ldr	r5, [r6, #4]
 800ca7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca7e:	07d9      	lsls	r1, r3, #31
 800ca80:	d405      	bmi.n	800ca8e <_vfiprintf_r+0x32>
 800ca82:	89ab      	ldrh	r3, [r5, #12]
 800ca84:	059a      	lsls	r2, r3, #22
 800ca86:	d402      	bmi.n	800ca8e <_vfiprintf_r+0x32>
 800ca88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca8a:	f7ff fac0 	bl	800c00e <__retarget_lock_acquire_recursive>
 800ca8e:	89ab      	ldrh	r3, [r5, #12]
 800ca90:	071b      	lsls	r3, r3, #28
 800ca92:	d501      	bpl.n	800ca98 <_vfiprintf_r+0x3c>
 800ca94:	692b      	ldr	r3, [r5, #16]
 800ca96:	b9eb      	cbnz	r3, 800cad4 <_vfiprintf_r+0x78>
 800ca98:	4629      	mov	r1, r5
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	f7fe fa10 	bl	800aec0 <__swsetup_r>
 800caa0:	b1c0      	cbz	r0, 800cad4 <_vfiprintf_r+0x78>
 800caa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caa4:	07dc      	lsls	r4, r3, #31
 800caa6:	d50e      	bpl.n	800cac6 <_vfiprintf_r+0x6a>
 800caa8:	f04f 30ff 	mov.w	r0, #4294967295
 800caac:	b01d      	add	sp, #116	; 0x74
 800caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab2:	4b7b      	ldr	r3, [pc, #492]	; (800cca0 <_vfiprintf_r+0x244>)
 800cab4:	429d      	cmp	r5, r3
 800cab6:	d101      	bne.n	800cabc <_vfiprintf_r+0x60>
 800cab8:	68b5      	ldr	r5, [r6, #8]
 800caba:	e7df      	b.n	800ca7c <_vfiprintf_r+0x20>
 800cabc:	4b79      	ldr	r3, [pc, #484]	; (800cca4 <_vfiprintf_r+0x248>)
 800cabe:	429d      	cmp	r5, r3
 800cac0:	bf08      	it	eq
 800cac2:	68f5      	ldreq	r5, [r6, #12]
 800cac4:	e7da      	b.n	800ca7c <_vfiprintf_r+0x20>
 800cac6:	89ab      	ldrh	r3, [r5, #12]
 800cac8:	0598      	lsls	r0, r3, #22
 800caca:	d4ed      	bmi.n	800caa8 <_vfiprintf_r+0x4c>
 800cacc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cace:	f7ff fa9f 	bl	800c010 <__retarget_lock_release_recursive>
 800cad2:	e7e9      	b.n	800caa8 <_vfiprintf_r+0x4c>
 800cad4:	2300      	movs	r3, #0
 800cad6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cada:	f04f 0901 	mov.w	r9, #1
 800cade:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800cca8 <_vfiprintf_r+0x24c>
 800cae2:	9309      	str	r3, [sp, #36]	; 0x24
 800cae4:	2320      	movs	r3, #32
 800cae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800caea:	2330      	movs	r3, #48	; 0x30
 800caec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caf0:	4623      	mov	r3, r4
 800caf2:	469a      	mov	sl, r3
 800caf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf8:	b10a      	cbz	r2, 800cafe <_vfiprintf_r+0xa2>
 800cafa:	2a25      	cmp	r2, #37	; 0x25
 800cafc:	d1f9      	bne.n	800caf2 <_vfiprintf_r+0x96>
 800cafe:	ebba 0b04 	subs.w	fp, sl, r4
 800cb02:	d00b      	beq.n	800cb1c <_vfiprintf_r+0xc0>
 800cb04:	465b      	mov	r3, fp
 800cb06:	4622      	mov	r2, r4
 800cb08:	4629      	mov	r1, r5
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f7ff ff93 	bl	800ca36 <__sfputs_r>
 800cb10:	3001      	adds	r0, #1
 800cb12:	f000 80aa 	beq.w	800cc6a <_vfiprintf_r+0x20e>
 800cb16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb18:	445a      	add	r2, fp
 800cb1a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 80a2 	beq.w	800cc6a <_vfiprintf_r+0x20e>
 800cb26:	2300      	movs	r3, #0
 800cb28:	f04f 32ff 	mov.w	r2, #4294967295
 800cb2c:	f10a 0a01 	add.w	sl, sl, #1
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	9307      	str	r3, [sp, #28]
 800cb34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb38:	931a      	str	r3, [sp, #104]	; 0x68
 800cb3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb3e:	4654      	mov	r4, sl
 800cb40:	2205      	movs	r2, #5
 800cb42:	4859      	ldr	r0, [pc, #356]	; (800cca8 <_vfiprintf_r+0x24c>)
 800cb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb48:	f7ff fad0 	bl	800c0ec <memchr>
 800cb4c:	9a04      	ldr	r2, [sp, #16]
 800cb4e:	b9d8      	cbnz	r0, 800cb88 <_vfiprintf_r+0x12c>
 800cb50:	06d1      	lsls	r1, r2, #27
 800cb52:	bf44      	itt	mi
 800cb54:	2320      	movmi	r3, #32
 800cb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb5a:	0713      	lsls	r3, r2, #28
 800cb5c:	bf44      	itt	mi
 800cb5e:	232b      	movmi	r3, #43	; 0x2b
 800cb60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb64:	f89a 3000 	ldrb.w	r3, [sl]
 800cb68:	2b2a      	cmp	r3, #42	; 0x2a
 800cb6a:	d015      	beq.n	800cb98 <_vfiprintf_r+0x13c>
 800cb6c:	9a07      	ldr	r2, [sp, #28]
 800cb6e:	4654      	mov	r4, sl
 800cb70:	2000      	movs	r0, #0
 800cb72:	f04f 0c0a 	mov.w	ip, #10
 800cb76:	4621      	mov	r1, r4
 800cb78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb7c:	3b30      	subs	r3, #48	; 0x30
 800cb7e:	2b09      	cmp	r3, #9
 800cb80:	d94e      	bls.n	800cc20 <_vfiprintf_r+0x1c4>
 800cb82:	b1b0      	cbz	r0, 800cbb2 <_vfiprintf_r+0x156>
 800cb84:	9207      	str	r2, [sp, #28]
 800cb86:	e014      	b.n	800cbb2 <_vfiprintf_r+0x156>
 800cb88:	eba0 0308 	sub.w	r3, r0, r8
 800cb8c:	46a2      	mov	sl, r4
 800cb8e:	fa09 f303 	lsl.w	r3, r9, r3
 800cb92:	4313      	orrs	r3, r2
 800cb94:	9304      	str	r3, [sp, #16]
 800cb96:	e7d2      	b.n	800cb3e <_vfiprintf_r+0xe2>
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	1d19      	adds	r1, r3, #4
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	9103      	str	r1, [sp, #12]
 800cba2:	bfbb      	ittet	lt
 800cba4:	425b      	neglt	r3, r3
 800cba6:	f042 0202 	orrlt.w	r2, r2, #2
 800cbaa:	9307      	strge	r3, [sp, #28]
 800cbac:	9307      	strlt	r3, [sp, #28]
 800cbae:	bfb8      	it	lt
 800cbb0:	9204      	strlt	r2, [sp, #16]
 800cbb2:	7823      	ldrb	r3, [r4, #0]
 800cbb4:	2b2e      	cmp	r3, #46	; 0x2e
 800cbb6:	d10c      	bne.n	800cbd2 <_vfiprintf_r+0x176>
 800cbb8:	7863      	ldrb	r3, [r4, #1]
 800cbba:	2b2a      	cmp	r3, #42	; 0x2a
 800cbbc:	d135      	bne.n	800cc2a <_vfiprintf_r+0x1ce>
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	3402      	adds	r4, #2
 800cbc2:	1d1a      	adds	r2, r3, #4
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	9203      	str	r2, [sp, #12]
 800cbca:	bfb8      	it	lt
 800cbcc:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbd0:	9305      	str	r3, [sp, #20]
 800cbd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ccb8 <_vfiprintf_r+0x25c>
 800cbd6:	2203      	movs	r2, #3
 800cbd8:	7821      	ldrb	r1, [r4, #0]
 800cbda:	4650      	mov	r0, sl
 800cbdc:	f7ff fa86 	bl	800c0ec <memchr>
 800cbe0:	b140      	cbz	r0, 800cbf4 <_vfiprintf_r+0x198>
 800cbe2:	2340      	movs	r3, #64	; 0x40
 800cbe4:	eba0 000a 	sub.w	r0, r0, sl
 800cbe8:	3401      	adds	r4, #1
 800cbea:	fa03 f000 	lsl.w	r0, r3, r0
 800cbee:	9b04      	ldr	r3, [sp, #16]
 800cbf0:	4303      	orrs	r3, r0
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf8:	2206      	movs	r2, #6
 800cbfa:	482c      	ldr	r0, [pc, #176]	; (800ccac <_vfiprintf_r+0x250>)
 800cbfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc00:	f7ff fa74 	bl	800c0ec <memchr>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d03f      	beq.n	800cc88 <_vfiprintf_r+0x22c>
 800cc08:	4b29      	ldr	r3, [pc, #164]	; (800ccb0 <_vfiprintf_r+0x254>)
 800cc0a:	bb1b      	cbnz	r3, 800cc54 <_vfiprintf_r+0x1f8>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	3307      	adds	r3, #7
 800cc10:	f023 0307 	bic.w	r3, r3, #7
 800cc14:	3308      	adds	r3, #8
 800cc16:	9303      	str	r3, [sp, #12]
 800cc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc1a:	443b      	add	r3, r7
 800cc1c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1e:	e767      	b.n	800caf0 <_vfiprintf_r+0x94>
 800cc20:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc24:	460c      	mov	r4, r1
 800cc26:	2001      	movs	r0, #1
 800cc28:	e7a5      	b.n	800cb76 <_vfiprintf_r+0x11a>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	3401      	adds	r4, #1
 800cc2e:	f04f 0c0a 	mov.w	ip, #10
 800cc32:	4619      	mov	r1, r3
 800cc34:	9305      	str	r3, [sp, #20]
 800cc36:	4620      	mov	r0, r4
 800cc38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc3c:	3a30      	subs	r2, #48	; 0x30
 800cc3e:	2a09      	cmp	r2, #9
 800cc40:	d903      	bls.n	800cc4a <_vfiprintf_r+0x1ee>
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d0c5      	beq.n	800cbd2 <_vfiprintf_r+0x176>
 800cc46:	9105      	str	r1, [sp, #20]
 800cc48:	e7c3      	b.n	800cbd2 <_vfiprintf_r+0x176>
 800cc4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc4e:	4604      	mov	r4, r0
 800cc50:	2301      	movs	r3, #1
 800cc52:	e7f0      	b.n	800cc36 <_vfiprintf_r+0x1da>
 800cc54:	ab03      	add	r3, sp, #12
 800cc56:	462a      	mov	r2, r5
 800cc58:	a904      	add	r1, sp, #16
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	4b15      	ldr	r3, [pc, #84]	; (800ccb4 <_vfiprintf_r+0x258>)
 800cc60:	f7fd fc6c 	bl	800a53c <_printf_float>
 800cc64:	4607      	mov	r7, r0
 800cc66:	1c78      	adds	r0, r7, #1
 800cc68:	d1d6      	bne.n	800cc18 <_vfiprintf_r+0x1bc>
 800cc6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc6c:	07d9      	lsls	r1, r3, #31
 800cc6e:	d405      	bmi.n	800cc7c <_vfiprintf_r+0x220>
 800cc70:	89ab      	ldrh	r3, [r5, #12]
 800cc72:	059a      	lsls	r2, r3, #22
 800cc74:	d402      	bmi.n	800cc7c <_vfiprintf_r+0x220>
 800cc76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc78:	f7ff f9ca 	bl	800c010 <__retarget_lock_release_recursive>
 800cc7c:	89ab      	ldrh	r3, [r5, #12]
 800cc7e:	065b      	lsls	r3, r3, #25
 800cc80:	f53f af12 	bmi.w	800caa8 <_vfiprintf_r+0x4c>
 800cc84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc86:	e711      	b.n	800caac <_vfiprintf_r+0x50>
 800cc88:	ab03      	add	r3, sp, #12
 800cc8a:	462a      	mov	r2, r5
 800cc8c:	a904      	add	r1, sp, #16
 800cc8e:	4630      	mov	r0, r6
 800cc90:	9300      	str	r3, [sp, #0]
 800cc92:	4b08      	ldr	r3, [pc, #32]	; (800ccb4 <_vfiprintf_r+0x258>)
 800cc94:	f7fd fef8 	bl	800aa88 <_printf_i>
 800cc98:	e7e4      	b.n	800cc64 <_vfiprintf_r+0x208>
 800cc9a:	bf00      	nop
 800cc9c:	0800d34c 	.word	0x0800d34c
 800cca0:	0800d36c 	.word	0x0800d36c
 800cca4:	0800d32c 	.word	0x0800d32c
 800cca8:	0800d4e4 	.word	0x0800d4e4
 800ccac:	0800d4ee 	.word	0x0800d4ee
 800ccb0:	0800a53d 	.word	0x0800a53d
 800ccb4:	0800ca37 	.word	0x0800ca37
 800ccb8:	0800d4ea 	.word	0x0800d4ea

0800ccbc <_putc_r>:
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	460d      	mov	r5, r1
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	b118      	cbz	r0, 800ccce <_putc_r+0x12>
 800ccc6:	6983      	ldr	r3, [r0, #24]
 800ccc8:	b90b      	cbnz	r3, 800ccce <_putc_r+0x12>
 800ccca:	f7ff f8fd 	bl	800bec8 <__sinit>
 800ccce:	4b1c      	ldr	r3, [pc, #112]	; (800cd40 <_putc_r+0x84>)
 800ccd0:	429c      	cmp	r4, r3
 800ccd2:	d124      	bne.n	800cd1e <_putc_r+0x62>
 800ccd4:	6874      	ldr	r4, [r6, #4]
 800ccd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ccd8:	07d8      	lsls	r0, r3, #31
 800ccda:	d405      	bmi.n	800cce8 <_putc_r+0x2c>
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	0599      	lsls	r1, r3, #22
 800cce0:	d402      	bmi.n	800cce8 <_putc_r+0x2c>
 800cce2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cce4:	f7ff f993 	bl	800c00e <__retarget_lock_acquire_recursive>
 800cce8:	68a3      	ldr	r3, [r4, #8]
 800ccea:	3b01      	subs	r3, #1
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	60a3      	str	r3, [r4, #8]
 800ccf0:	da05      	bge.n	800ccfe <_putc_r+0x42>
 800ccf2:	69a2      	ldr	r2, [r4, #24]
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	db1c      	blt.n	800cd32 <_putc_r+0x76>
 800ccf8:	b2eb      	uxtb	r3, r5
 800ccfa:	2b0a      	cmp	r3, #10
 800ccfc:	d019      	beq.n	800cd32 <_putc_r+0x76>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	1c5a      	adds	r2, r3, #1
 800cd02:	6022      	str	r2, [r4, #0]
 800cd04:	701d      	strb	r5, [r3, #0]
 800cd06:	b2ed      	uxtb	r5, r5
 800cd08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd0a:	07da      	lsls	r2, r3, #31
 800cd0c:	d405      	bmi.n	800cd1a <_putc_r+0x5e>
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	059b      	lsls	r3, r3, #22
 800cd12:	d402      	bmi.n	800cd1a <_putc_r+0x5e>
 800cd14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd16:	f7ff f97b 	bl	800c010 <__retarget_lock_release_recursive>
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	bd70      	pop	{r4, r5, r6, pc}
 800cd1e:	4b09      	ldr	r3, [pc, #36]	; (800cd44 <_putc_r+0x88>)
 800cd20:	429c      	cmp	r4, r3
 800cd22:	d101      	bne.n	800cd28 <_putc_r+0x6c>
 800cd24:	68b4      	ldr	r4, [r6, #8]
 800cd26:	e7d6      	b.n	800ccd6 <_putc_r+0x1a>
 800cd28:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <_putc_r+0x8c>)
 800cd2a:	429c      	cmp	r4, r3
 800cd2c:	bf08      	it	eq
 800cd2e:	68f4      	ldreq	r4, [r6, #12]
 800cd30:	e7d1      	b.n	800ccd6 <_putc_r+0x1a>
 800cd32:	4629      	mov	r1, r5
 800cd34:	4622      	mov	r2, r4
 800cd36:	4630      	mov	r0, r6
 800cd38:	f7fe f870 	bl	800ae1c <__swbuf_r>
 800cd3c:	4605      	mov	r5, r0
 800cd3e:	e7e3      	b.n	800cd08 <_putc_r+0x4c>
 800cd40:	0800d34c 	.word	0x0800d34c
 800cd44:	0800d36c 	.word	0x0800d36c
 800cd48:	0800d32c 	.word	0x0800d32c

0800cd4c <_sbrk_r>:
 800cd4c:	b538      	push	{r3, r4, r5, lr}
 800cd4e:	2300      	movs	r3, #0
 800cd50:	4d05      	ldr	r5, [pc, #20]	; (800cd68 <_sbrk_r+0x1c>)
 800cd52:	4604      	mov	r4, r0
 800cd54:	4608      	mov	r0, r1
 800cd56:	602b      	str	r3, [r5, #0]
 800cd58:	f7f4 fe08 	bl	800196c <_sbrk>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	d102      	bne.n	800cd66 <_sbrk_r+0x1a>
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	b103      	cbz	r3, 800cd66 <_sbrk_r+0x1a>
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	200083cc 	.word	0x200083cc

0800cd6c <__sread>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	460c      	mov	r4, r1
 800cd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd74:	f000 f8e2 	bl	800cf3c <_read_r>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	bfab      	itete	ge
 800cd7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd7e:	89a3      	ldrhlt	r3, [r4, #12]
 800cd80:	181b      	addge	r3, r3, r0
 800cd82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd86:	bfac      	ite	ge
 800cd88:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd8a:	81a3      	strhlt	r3, [r4, #12]
 800cd8c:	bd10      	pop	{r4, pc}

0800cd8e <__swrite>:
 800cd8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd92:	461f      	mov	r7, r3
 800cd94:	898b      	ldrh	r3, [r1, #12]
 800cd96:	4605      	mov	r5, r0
 800cd98:	460c      	mov	r4, r1
 800cd9a:	05db      	lsls	r3, r3, #23
 800cd9c:	4616      	mov	r6, r2
 800cd9e:	d505      	bpl.n	800cdac <__swrite+0x1e>
 800cda0:	2302      	movs	r3, #2
 800cda2:	2200      	movs	r2, #0
 800cda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda8:	f000 f898 	bl	800cedc <_lseek_r>
 800cdac:	89a3      	ldrh	r3, [r4, #12]
 800cdae:	4632      	mov	r2, r6
 800cdb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdb4:	4628      	mov	r0, r5
 800cdb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdba:	81a3      	strh	r3, [r4, #12]
 800cdbc:	463b      	mov	r3, r7
 800cdbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	f000 b817 	b.w	800cdf4 <_write_r>

0800cdc6 <__sseek>:
 800cdc6:	b510      	push	{r4, lr}
 800cdc8:	460c      	mov	r4, r1
 800cdca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdce:	f000 f885 	bl	800cedc <_lseek_r>
 800cdd2:	1c43      	adds	r3, r0, #1
 800cdd4:	89a3      	ldrh	r3, [r4, #12]
 800cdd6:	bf15      	itete	ne
 800cdd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cdde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cde2:	81a3      	strheq	r3, [r4, #12]
 800cde4:	bf18      	it	ne
 800cde6:	81a3      	strhne	r3, [r4, #12]
 800cde8:	bd10      	pop	{r4, pc}

0800cdea <__sclose>:
 800cdea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdee:	f000 b831 	b.w	800ce54 <_close_r>
	...

0800cdf4 <_write_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4d06      	ldr	r5, [pc, #24]	; (800ce14 <_write_r+0x20>)
 800cdfa:	4608      	mov	r0, r1
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	2200      	movs	r2, #0
 800ce00:	602a      	str	r2, [r5, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	f7f4 f8e0 	bl	8000fc8 <_write>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	d102      	bne.n	800ce12 <_write_r+0x1e>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	b103      	cbz	r3, 800ce12 <_write_r+0x1e>
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	200083cc 	.word	0x200083cc

0800ce18 <__assert_func>:
 800ce18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce1a:	4614      	mov	r4, r2
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	4b09      	ldr	r3, [pc, #36]	; (800ce44 <__assert_func+0x2c>)
 800ce20:	4605      	mov	r5, r0
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68d8      	ldr	r0, [r3, #12]
 800ce26:	b14c      	cbz	r4, 800ce3c <__assert_func+0x24>
 800ce28:	4b07      	ldr	r3, [pc, #28]	; (800ce48 <__assert_func+0x30>)
 800ce2a:	9100      	str	r1, [sp, #0]
 800ce2c:	4907      	ldr	r1, [pc, #28]	; (800ce4c <__assert_func+0x34>)
 800ce2e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce32:	462b      	mov	r3, r5
 800ce34:	f000 f81e 	bl	800ce74 <fiprintf>
 800ce38:	f000 f89f 	bl	800cf7a <abort>
 800ce3c:	4b04      	ldr	r3, [pc, #16]	; (800ce50 <__assert_func+0x38>)
 800ce3e:	461c      	mov	r4, r3
 800ce40:	e7f3      	b.n	800ce2a <__assert_func+0x12>
 800ce42:	bf00      	nop
 800ce44:	200002b0 	.word	0x200002b0
 800ce48:	0800d4f5 	.word	0x0800d4f5
 800ce4c:	0800d502 	.word	0x0800d502
 800ce50:	0800d530 	.word	0x0800d530

0800ce54 <_close_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	2300      	movs	r3, #0
 800ce58:	4d05      	ldr	r5, [pc, #20]	; (800ce70 <_close_r+0x1c>)
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	4608      	mov	r0, r1
 800ce5e:	602b      	str	r3, [r5, #0]
 800ce60:	f7f4 fd4f 	bl	8001902 <_close>
 800ce64:	1c43      	adds	r3, r0, #1
 800ce66:	d102      	bne.n	800ce6e <_close_r+0x1a>
 800ce68:	682b      	ldr	r3, [r5, #0]
 800ce6a:	b103      	cbz	r3, 800ce6e <_close_r+0x1a>
 800ce6c:	6023      	str	r3, [r4, #0]
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	200083cc 	.word	0x200083cc

0800ce74 <fiprintf>:
 800ce74:	b40e      	push	{r1, r2, r3}
 800ce76:	b503      	push	{r0, r1, lr}
 800ce78:	ab03      	add	r3, sp, #12
 800ce7a:	4601      	mov	r1, r0
 800ce7c:	4805      	ldr	r0, [pc, #20]	; (800ce94 <fiprintf+0x20>)
 800ce7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce82:	6800      	ldr	r0, [r0, #0]
 800ce84:	9301      	str	r3, [sp, #4]
 800ce86:	f7ff fde9 	bl	800ca5c <_vfiprintf_r>
 800ce8a:	b002      	add	sp, #8
 800ce8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce90:	b003      	add	sp, #12
 800ce92:	4770      	bx	lr
 800ce94:	200002b0 	.word	0x200002b0

0800ce98 <_fstat_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	4d06      	ldr	r5, [pc, #24]	; (800ceb8 <_fstat_r+0x20>)
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	4611      	mov	r1, r2
 800cea4:	602b      	str	r3, [r5, #0]
 800cea6:	f7f4 fd38 	bl	800191a <_fstat>
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	d102      	bne.n	800ceb4 <_fstat_r+0x1c>
 800ceae:	682b      	ldr	r3, [r5, #0]
 800ceb0:	b103      	cbz	r3, 800ceb4 <_fstat_r+0x1c>
 800ceb2:	6023      	str	r3, [r4, #0]
 800ceb4:	bd38      	pop	{r3, r4, r5, pc}
 800ceb6:	bf00      	nop
 800ceb8:	200083cc 	.word	0x200083cc

0800cebc <_isatty_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	2300      	movs	r3, #0
 800cec0:	4d05      	ldr	r5, [pc, #20]	; (800ced8 <_isatty_r+0x1c>)
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	602b      	str	r3, [r5, #0]
 800cec8:	f7f4 fd37 	bl	800193a <_isatty>
 800cecc:	1c43      	adds	r3, r0, #1
 800cece:	d102      	bne.n	800ced6 <_isatty_r+0x1a>
 800ced0:	682b      	ldr	r3, [r5, #0]
 800ced2:	b103      	cbz	r3, 800ced6 <_isatty_r+0x1a>
 800ced4:	6023      	str	r3, [r4, #0]
 800ced6:	bd38      	pop	{r3, r4, r5, pc}
 800ced8:	200083cc 	.word	0x200083cc

0800cedc <_lseek_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	4d06      	ldr	r5, [pc, #24]	; (800cefc <_lseek_r+0x20>)
 800cee2:	4608      	mov	r0, r1
 800cee4:	4611      	mov	r1, r2
 800cee6:	2200      	movs	r2, #0
 800cee8:	602a      	str	r2, [r5, #0]
 800ceea:	461a      	mov	r2, r3
 800ceec:	f7f4 fd30 	bl	8001950 <_lseek>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d102      	bne.n	800cefa <_lseek_r+0x1e>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	b103      	cbz	r3, 800cefa <_lseek_r+0x1e>
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	200083cc 	.word	0x200083cc

0800cf00 <__ascii_mbtowc>:
 800cf00:	b082      	sub	sp, #8
 800cf02:	b901      	cbnz	r1, 800cf06 <__ascii_mbtowc+0x6>
 800cf04:	a901      	add	r1, sp, #4
 800cf06:	b142      	cbz	r2, 800cf1a <__ascii_mbtowc+0x1a>
 800cf08:	b14b      	cbz	r3, 800cf1e <__ascii_mbtowc+0x1e>
 800cf0a:	7813      	ldrb	r3, [r2, #0]
 800cf0c:	600b      	str	r3, [r1, #0]
 800cf0e:	7812      	ldrb	r2, [r2, #0]
 800cf10:	1e10      	subs	r0, r2, #0
 800cf12:	bf18      	it	ne
 800cf14:	2001      	movne	r0, #1
 800cf16:	b002      	add	sp, #8
 800cf18:	4770      	bx	lr
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	e7fb      	b.n	800cf16 <__ascii_mbtowc+0x16>
 800cf1e:	f06f 0001 	mvn.w	r0, #1
 800cf22:	e7f8      	b.n	800cf16 <__ascii_mbtowc+0x16>

0800cf24 <__malloc_lock>:
 800cf24:	4801      	ldr	r0, [pc, #4]	; (800cf2c <__malloc_lock+0x8>)
 800cf26:	f7ff b872 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800cf2a:	bf00      	nop
 800cf2c:	200083c0 	.word	0x200083c0

0800cf30 <__malloc_unlock>:
 800cf30:	4801      	ldr	r0, [pc, #4]	; (800cf38 <__malloc_unlock+0x8>)
 800cf32:	f7ff b86d 	b.w	800c010 <__retarget_lock_release_recursive>
 800cf36:	bf00      	nop
 800cf38:	200083c0 	.word	0x200083c0

0800cf3c <_read_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4604      	mov	r4, r0
 800cf40:	4d06      	ldr	r5, [pc, #24]	; (800cf5c <_read_r+0x20>)
 800cf42:	4608      	mov	r0, r1
 800cf44:	4611      	mov	r1, r2
 800cf46:	2200      	movs	r2, #0
 800cf48:	602a      	str	r2, [r5, #0]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	f7f4 fcbc 	bl	80018c8 <_read>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d102      	bne.n	800cf5a <_read_r+0x1e>
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	b103      	cbz	r3, 800cf5a <_read_r+0x1e>
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	bd38      	pop	{r3, r4, r5, pc}
 800cf5c:	200083cc 	.word	0x200083cc

0800cf60 <__ascii_wctomb>:
 800cf60:	b149      	cbz	r1, 800cf76 <__ascii_wctomb+0x16>
 800cf62:	2aff      	cmp	r2, #255	; 0xff
 800cf64:	bf8d      	iteet	hi
 800cf66:	238a      	movhi	r3, #138	; 0x8a
 800cf68:	2001      	movls	r0, #1
 800cf6a:	700a      	strbls	r2, [r1, #0]
 800cf6c:	6003      	strhi	r3, [r0, #0]
 800cf6e:	bf88      	it	hi
 800cf70:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf74:	4770      	bx	lr
 800cf76:	4608      	mov	r0, r1
 800cf78:	4770      	bx	lr

0800cf7a <abort>:
 800cf7a:	2006      	movs	r0, #6
 800cf7c:	b508      	push	{r3, lr}
 800cf7e:	f000 f82b 	bl	800cfd8 <raise>
 800cf82:	2001      	movs	r0, #1
 800cf84:	f7f4 fc96 	bl	80018b4 <_exit>

0800cf88 <_raise_r>:
 800cf88:	291f      	cmp	r1, #31
 800cf8a:	b538      	push	{r3, r4, r5, lr}
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	460d      	mov	r5, r1
 800cf90:	d904      	bls.n	800cf9c <_raise_r+0x14>
 800cf92:	2316      	movs	r3, #22
 800cf94:	6003      	str	r3, [r0, #0]
 800cf96:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9a:	bd38      	pop	{r3, r4, r5, pc}
 800cf9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf9e:	b112      	cbz	r2, 800cfa6 <_raise_r+0x1e>
 800cfa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfa4:	b94b      	cbnz	r3, 800cfba <_raise_r+0x32>
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	f000 f830 	bl	800d00c <_getpid_r>
 800cfac:	462a      	mov	r2, r5
 800cfae:	4601      	mov	r1, r0
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfb6:	f000 b817 	b.w	800cfe8 <_kill_r>
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d00a      	beq.n	800cfd4 <_raise_r+0x4c>
 800cfbe:	1c59      	adds	r1, r3, #1
 800cfc0:	d103      	bne.n	800cfca <_raise_r+0x42>
 800cfc2:	2316      	movs	r3, #22
 800cfc4:	6003      	str	r3, [r0, #0]
 800cfc6:	2001      	movs	r0, #1
 800cfc8:	e7e7      	b.n	800cf9a <_raise_r+0x12>
 800cfca:	2400      	movs	r4, #0
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfd2:	4798      	blx	r3
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e7e0      	b.n	800cf9a <_raise_r+0x12>

0800cfd8 <raise>:
 800cfd8:	4b02      	ldr	r3, [pc, #8]	; (800cfe4 <raise+0xc>)
 800cfda:	4601      	mov	r1, r0
 800cfdc:	6818      	ldr	r0, [r3, #0]
 800cfde:	f7ff bfd3 	b.w	800cf88 <_raise_r>
 800cfe2:	bf00      	nop
 800cfe4:	200002b0 	.word	0x200002b0

0800cfe8 <_kill_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	2300      	movs	r3, #0
 800cfec:	4d06      	ldr	r5, [pc, #24]	; (800d008 <_kill_r+0x20>)
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	4611      	mov	r1, r2
 800cff4:	602b      	str	r3, [r5, #0]
 800cff6:	f7f4 fc4d 	bl	8001894 <_kill>
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	d102      	bne.n	800d004 <_kill_r+0x1c>
 800cffe:	682b      	ldr	r3, [r5, #0]
 800d000:	b103      	cbz	r3, 800d004 <_kill_r+0x1c>
 800d002:	6023      	str	r3, [r4, #0]
 800d004:	bd38      	pop	{r3, r4, r5, pc}
 800d006:	bf00      	nop
 800d008:	200083cc 	.word	0x200083cc

0800d00c <_getpid_r>:
 800d00c:	f7f4 bc3a 	b.w	8001884 <_getpid>

0800d010 <_init>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	bf00      	nop
 800d014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d016:	bc08      	pop	{r3}
 800d018:	469e      	mov	lr, r3
 800d01a:	4770      	bx	lr

0800d01c <_fini>:
 800d01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d01e:	bf00      	nop
 800d020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d022:	bc08      	pop	{r3}
 800d024:	469e      	mov	lr, r3
 800d026:	4770      	bx	lr
