
rho_mod_v7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e8  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  0800c820  0800c820  0001c820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce34  0800ce34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ce40  0800ce40  0001ce40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000047c  20000000  0800ce44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001f648  2000047c  0800d2c0  0002047c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2001fac4  0800d2c0  0002fac4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002047c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022075  00000000  00000000  000204b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003b64  00000000  00000000  00042527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e8  00000000  00000000  00046090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001388  00000000  00000000  00047578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034b40  00000000  00000000  00048900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d05d  00000000  00000000  0007d440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013bb42  00000000  00000000  0009a49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d5fdf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006804  00000000  00000000  001d6030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000047c 	.word	0x2000047c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c808 	.word	0x0800c808

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000480 	.word	0x20000480
 8000274:	0800c808 	.word	0x0800c808

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b982 	b.w	8000ecc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000be6:	4604      	mov	r4, r0
 8000be8:	460f      	mov	r7, r1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d148      	bne.n	8000c80 <__udivmoddi4+0xa0>
 8000bee:	428a      	cmp	r2, r1
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	d961      	bls.n	8000cb8 <__udivmoddi4+0xd8>
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	b143      	cbz	r3, 8000c0c <__udivmoddi4+0x2c>
 8000bfa:	f1c3 0120 	rsb	r1, r3, #32
 8000bfe:	409f      	lsls	r7, r3
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	409c      	lsls	r4, r3
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	430f      	orrs	r7, r1
 8000c0c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c10:	fa1f fe8c 	uxth.w	lr, ip
 8000c14:	0c22      	lsrs	r2, r4, #16
 8000c16:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c1a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c1e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c22:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c26:	4290      	cmp	r0, r2
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x5c>
 8000c2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x5a>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f200 8137 	bhi.w	8000ea8 <__udivmoddi4+0x2c8>
 8000c3a:	463e      	mov	r6, r7
 8000c3c:	1a12      	subs	r2, r2, r0
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c44:	fb01 2210 	mls	r2, r1, r0, r2
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x86>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5c:	d202      	bcs.n	8000c64 <__udivmoddi4+0x84>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	f200 811c 	bhi.w	8000e9c <__udivmoddi4+0x2bc>
 8000c64:	4610      	mov	r0, r2
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	2600      	movs	r6, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0x9a>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7a:	4631      	mov	r1, r6
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	f000 80fd 	beq.w	8000e84 <__udivmoddi4+0x2a4>
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	4630      	mov	r0, r6
 8000c92:	4631      	mov	r1, r6
 8000c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c98:	fab3 f683 	clz	r6, r3
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d14b      	bne.n	8000d38 <__udivmoddi4+0x158>
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f240 80ef 	bls.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4630      	mov	r0, r6
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e3      	beq.n	8000c7a <__udivmoddi4+0x9a>
 8000cb2:	e9c5 4700 	strd	r4, r7, [r5]
 8000cb6:	e7e0      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xdc>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f382 	clz	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 809d 	bne.w	8000e00 <__udivmoddi4+0x220>
 8000cc6:	1a89      	subs	r1, r1, r2
 8000cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ccc:	b297      	uxth	r7, r2
 8000cce:	2601      	movs	r6, #1
 8000cd0:	0c20      	lsrs	r0, r4, #16
 8000cd2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000cd6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000cda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cde:	fb07 f002 	mul.w	r0, r7, r2
 8000ce2:	4288      	cmp	r0, r1
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f102 38ff 	add.w	r8, r2, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80cf 	beq.w	8000ea2 <__udivmoddi4+0x2c2>
 8000d04:	4642      	mov	r2, r8
 8000d06:	1a09      	subs	r1, r1, r0
 8000d08:	b2a4      	uxth	r4, r4
 8000d0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d1a:	42a7      	cmp	r7, r4
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x150>
 8000d1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d22:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x14e>
 8000d28:	42a7      	cmp	r7, r4
 8000d2a:	f200 80b4 	bhi.w	8000e96 <__udivmoddi4+0x2b6>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	1be4      	subs	r4, r4, r7
 8000d32:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d36:	e79b      	b.n	8000c70 <__udivmoddi4+0x90>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	40f9      	lsrs	r1, r7
 8000d48:	40b2      	lsls	r2, r6
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	431c      	orrs	r4, r3
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d60:	0c20      	lsrs	r0, r4, #16
 8000d62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d66:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d72:	4288      	cmp	r0, r1
 8000d74:	d90f      	bls.n	8000d96 <__udivmoddi4+0x1b6>
 8000d76:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7e:	bf2c      	ite	cs
 8000d80:	f04f 0b01 	movcs.w	fp, #1
 8000d84:	f04f 0b00 	movcc.w	fp, #0
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	d903      	bls.n	8000d94 <__udivmoddi4+0x1b4>
 8000d8c:	f1bb 0f00 	cmp.w	fp, #0
 8000d90:	f000 808d 	beq.w	8000eae <__udivmoddi4+0x2ce>
 8000d94:	46d0      	mov	r8, sl
 8000d96:	1a09      	subs	r1, r1, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9e:	fb09 1110 	mls	r1, r9, r0, r1
 8000da2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1de>
 8000dae:	eb1c 0101 	adds.w	r1, ip, r1
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d201      	bcs.n	8000dbc <__udivmoddi4+0x1dc>
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d87f      	bhi.n	8000ebc <__udivmoddi4+0x2dc>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	fba0 9802 	umull	r9, r8, r0, r2
 8000dca:	4541      	cmp	r1, r8
 8000dcc:	464c      	mov	r4, r9
 8000dce:	46c6      	mov	lr, r8
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0x1f8>
 8000dd2:	d106      	bne.n	8000de2 <__udivmoddi4+0x202>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d204      	bcs.n	8000de2 <__udivmoddi4+0x202>
 8000dd8:	3801      	subs	r0, #1
 8000dda:	ebb9 0402 	subs.w	r4, r9, r2
 8000dde:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	d070      	beq.n	8000ec8 <__udivmoddi4+0x2e8>
 8000de6:	1b1a      	subs	r2, r3, r4
 8000de8:	eb61 010e 	sbc.w	r1, r1, lr
 8000dec:	fa22 f306 	lsr.w	r3, r2, r6
 8000df0:	fa01 f707 	lsl.w	r7, r1, r7
 8000df4:	40f1      	lsrs	r1, r6
 8000df6:	2600      	movs	r6, #0
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	e73c      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	f1c3 0020 	rsb	r0, r3, #32
 8000e08:	fa01 f203 	lsl.w	r2, r1, r3
 8000e0c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e10:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e14:	fa24 f100 	lsr.w	r1, r4, r0
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	4311      	orrs	r1, r2
 8000e20:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e24:	0c0a      	lsrs	r2, r1, #16
 8000e26:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e2a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e2e:	fb00 f607 	mul.w	r6, r0, r7
 8000e32:	4296      	cmp	r6, r2
 8000e34:	d90e      	bls.n	8000e54 <__udivmoddi4+0x274>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	bf2c      	ite	cs
 8000e40:	f04f 0901 	movcs.w	r9, #1
 8000e44:	f04f 0900 	movcc.w	r9, #0
 8000e48:	4296      	cmp	r6, r2
 8000e4a:	d902      	bls.n	8000e52 <__udivmoddi4+0x272>
 8000e4c:	f1b9 0f00 	cmp.w	r9, #0
 8000e50:	d031      	beq.n	8000eb6 <__udivmoddi4+0x2d6>
 8000e52:	4640      	mov	r0, r8
 8000e54:	1b92      	subs	r2, r2, r6
 8000e56:	b289      	uxth	r1, r1
 8000e58:	fbb2 f6fe 	udiv	r6, r2, lr
 8000e5c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000e60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000e64:	fb06 f207 	mul.w	r2, r6, r7
 8000e68:	428a      	cmp	r2, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x29c>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e74:	d201      	bcs.n	8000e7a <__udivmoddi4+0x29a>
 8000e76:	428a      	cmp	r2, r1
 8000e78:	d823      	bhi.n	8000ec2 <__udivmoddi4+0x2e2>
 8000e7a:	4646      	mov	r6, r8
 8000e7c:	1a89      	subs	r1, r1, r2
 8000e7e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e82:	e725      	b.n	8000cd0 <__udivmoddi4+0xf0>
 8000e84:	462e      	mov	r6, r5
 8000e86:	4628      	mov	r0, r5
 8000e88:	e6f7      	b.n	8000c7a <__udivmoddi4+0x9a>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb61 0303 	sbc.w	r3, r1, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	461f      	mov	r7, r3
 8000e94:	e70b      	b.n	8000cae <__udivmoddi4+0xce>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e749      	b.n	8000d30 <__udivmoddi4+0x150>
 8000e9c:	4464      	add	r4, ip
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	e6e1      	b.n	8000c66 <__udivmoddi4+0x86>
 8000ea2:	3a02      	subs	r2, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	e72e      	b.n	8000d06 <__udivmoddi4+0x126>
 8000ea8:	3e02      	subs	r6, #2
 8000eaa:	4462      	add	r2, ip
 8000eac:	e6c6      	b.n	8000c3c <__udivmoddi4+0x5c>
 8000eae:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb2:	4461      	add	r1, ip
 8000eb4:	e76f      	b.n	8000d96 <__udivmoddi4+0x1b6>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4462      	add	r2, ip
 8000eba:	e7cb      	b.n	8000e54 <__udivmoddi4+0x274>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	e77d      	b.n	8000dbe <__udivmoddi4+0x1de>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	e7d9      	b.n	8000e7c <__udivmoddi4+0x29c>
 8000ec8:	462e      	mov	r6, r5
 8000eca:	e6d6      	b.n	8000c7a <__udivmoddi4+0x9a>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <MX_DCMIQueue_Config>:
  * @brief  DMA Linked-list DCMIQueue configuration
  * @param  None
  * @retval None
  */
HAL_StatusTypeDef MX_DCMIQueue_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09c      	sub	sp, #112	; 0x70
 8000ed4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* DMA node configuration declaration */
  DMA_NodeConfTypeDef pNodeConfig;

  /* Set node configuration ################################################*/
  pNodeConfig.NodeType = DMA_GPDMA_2D_NODE;
 8000edc:	2322      	movs	r3, #34	; 0x22
 8000ede:	603b      	str	r3, [r7, #0]
  pNodeConfig.Init.Request = GPDMA1_REQUEST_DCMI;
 8000ee0:	2356      	movs	r3, #86	; 0x56
 8000ee2:	607b      	str	r3, [r7, #4]
  pNodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  pNodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  pNodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  pNodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8000ef0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ef4:	617b      	str	r3, [r7, #20]
  pNodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61bb      	str	r3, [r7, #24]
  pNodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8000efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efe:	61fb      	str	r3, [r7, #28]
  pNodeConfig.Init.SrcBurstLength = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  pNodeConfig.Init.DestBurstLength = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  pNodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pNodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  pNodeConfig.RepeatBlockConfig.RepeatCount = 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  pNodeConfig.RepeatBlockConfig.SrcAddrOffset = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	653b      	str	r3, [r7, #80]	; 0x50
  pNodeConfig.RepeatBlockConfig.DestAddrOffset = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	657b      	str	r3, [r7, #84]	; 0x54
  pNodeConfig.RepeatBlockConfig.BlkSrcAddrOffset = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	65bb      	str	r3, [r7, #88]	; 0x58
  pNodeConfig.RepeatBlockConfig.BlkDestAddrOffset = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	65fb      	str	r3, [r7, #92]	; 0x5c
  pNodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8000f24:	2300      	movs	r3, #0
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
  pNodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  pNodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pNodeConfig.SrcAddress = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	663b      	str	r3, [r7, #96]	; 0x60
  pNodeConfig.DstAddress = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	667b      	str	r3, [r7, #100]	; 0x64
  pNodeConfig.DataSize = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Build DCMINode1 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMINode1);
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	491f      	ldr	r1, [pc, #124]	; (8000fbc <MX_DCMIQueue_Config+0xec>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f88d 	bl	8003060 <HAL_DMAEx_List_BuildNode>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMINode1 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode1);
 8000f54:	4919      	ldr	r1, [pc, #100]	; (8000fbc <MX_DCMIQueue_Config+0xec>)
 8000f56:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <MX_DCMIQueue_Config+0xf0>)
 8000f58:	f002 f898 	bl	800308c <HAL_DMAEx_List_InsertNode_Tail>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f64:	4313      	orrs	r3, r2
 8000f66:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set node configuration ################################################*/

  /* Build DCMINode2 Node */
  ret |= HAL_DMAEx_List_BuildNode(&pNodeConfig, &DCMINode2);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4915      	ldr	r1, [pc, #84]	; (8000fc4 <MX_DCMIQueue_Config+0xf4>)
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 f876 	bl	8003060 <HAL_DMAEx_List_BuildNode>
 8000f74:	4603      	mov	r3, r0
 8000f76:	461a      	mov	r2, r3
 8000f78:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Insert DCMINode2 to Queue */
  ret |= HAL_DMAEx_List_InsertNode_Tail(&DCMIQueue, &DCMINode2);
 8000f82:	4910      	ldr	r1, [pc, #64]	; (8000fc4 <MX_DCMIQueue_Config+0xf4>)
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <MX_DCMIQueue_Config+0xf0>)
 8000f86:	f002 f881 	bl	800308c <HAL_DMAEx_List_InsertNode_Tail>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f92:	4313      	orrs	r3, r2
 8000f94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  ret |= HAL_DMAEx_List_SetCircularModeConfig(&DCMIQueue, &DCMINode1);
 8000f98:	4908      	ldr	r1, [pc, #32]	; (8000fbc <MX_DCMIQueue_Config+0xec>)
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <MX_DCMIQueue_Config+0xf0>)
 8000f9c:	f002 f8ee 	bl	800317c <HAL_DMAEx_List_SetCircularModeConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

   return ret;
 8000fae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3770      	adds	r7, #112	; 0x70
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000498 	.word	0x20000498
 8000fc0:	200004bc 	.word	0x200004bc
 8000fc4:	200004d4 	.word	0x200004d4

08000fc8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <_write+0x2c>)
 8000fe0:	f007 fc1a 	bl	8008818 <HAL_UART_Transmit>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	75fb      	strb	r3, [r7, #23]
	return (int) status;
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000060c 	.word	0x2000060c

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffc:	f000 fd60 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001000:	f000 f82e 	bl	8001060 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001004:	f000 f890 	bl	8001128 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f000 f9b2 	bl	8001370 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 800100c:	f000 f8c6 	bl	800119c <MX_GPDMA1_Init>
  MX_I2C3_Init();
 8001010:	f000 f90e 	bl	8001230 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001014:	f000 f960 	bl	80012d8 <MX_USART1_UART_Init>
  MX_DCMI_Init();
 8001018:	f000 f88c 	bl	8001134 <MX_DCMI_Init>
  MX_ICACHE_Init();
 800101c:	f000 f948 	bl	80012b0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
	MX_DCMIQueue_Config();
 8001020:	f7ff ff56 	bl	8000ed0 <MX_DCMIQueue_Config>
	HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel12, &DCMIQueue);
 8001024:	4908      	ldr	r1, [pc, #32]	; (8001048 <main+0x50>)
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <main+0x54>)
 8001028:	f002 f916 	bl	8003258 <HAL_DMAEx_List_LinkQ>
	__HAL_LINKDMA(&hdcmi, DMA_Handle, handle_GPDMA1_Channel12);
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <main+0x58>)
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <main+0x54>)
 8001030:	649a      	str	r2, [r3, #72]	; 0x48
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <main+0x54>)
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <main+0x58>)
 8001036:	65da      	str	r2, [r3, #92]	; 0x5c

	printf("Starting...\r\n");
 8001038:	4806      	ldr	r0, [pc, #24]	; (8001054 <main+0x5c>)
 800103a:	f009 fae3 	bl	800a604 <puts>
	MasterFunctions.Connect(&master_ios);
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <main+0x60>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4806      	ldr	r0, [pc, #24]	; (800105c <main+0x64>)
 8001044:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001046:	e7fe      	b.n	8001046 <main+0x4e>
 8001048:	200004bc 	.word	0x200004bc
 800104c:	20000548 	.word	0x20000548
 8001050:	200004f8 	.word	0x200004f8
 8001054:	0800c874 	.word	0x0800c874
 8001058:	20000000 	.word	0x20000000
 800105c:	2000000c 	.word	0x2000000c

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09e      	sub	sp, #120	; 0x78
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	2260      	movs	r2, #96	; 0x60
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f008 fdb7 	bl	8009be2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001084:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001088:	f003 fbb6 	bl	80047f8 <HAL_PWREx_ControlVoltageScaling>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001092:	f000 f9ff 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001096:	2322      	movs	r3, #34	; 0x22
 8001098:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a6:	2310      	movs	r3, #16
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ae:	2302      	movs	r3, #2
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010ba:	230a      	movs	r3, #10
 80010bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010be:	2302      	movs	r3, #2
 80010c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80010c6:	2301      	movs	r3, #1
 80010c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80010ca:	230c      	movs	r3, #12
 80010cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fc20 	bl	800491c <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80010e2:	f000 f9d7 	bl	8001494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	231f      	movs	r3, #31
 80010e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2303      	movs	r3, #3
 80010ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f004 fae0 	bl	80056c8 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800110e:	f000 f9c1 	bl	8001494 <Error_Handler>
  }

  /** MCO configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_8);
 8001112:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001116:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800111a:	2000      	movs	r0, #0
 800111c:	f004 fcc6 	bl	8005aac <HAL_RCC_MCOConfig>
}
 8001120:	bf00      	nop
 8001122:	3778      	adds	r7, #120	; 0x78
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800112c:	f003 fbe6 	bl	80048fc <HAL_PWREx_DisableUCPDDeadBattery>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_DCMI_Init+0x60>)
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MX_DCMI_Init+0x64>)
 800113c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <MX_DCMI_Init+0x60>)
 8001140:	2200      	movs	r2, #0
 8001142:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_DCMI_Init+0x60>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800114a:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_DCMI_Init+0x60>)
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_DCMI_Init+0x60>)
 8001152:	2240      	movs	r2, #64	; 0x40
 8001154:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_DCMI_Init+0x60>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <MX_DCMI_Init+0x60>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_DCMI_Init+0x60>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_DCMI_Init+0x60>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_DCMI_Init+0x60>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_DCMI_Init+0x60>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_DCMI_Init+0x60>)
 800117c:	2200      	movs	r2, #0
 800117e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_DCMI_Init+0x60>)
 8001182:	f000 fe87 	bl	8001e94 <HAL_DCMI_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800118c:	f000 f982 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200004f8 	.word	0x200004f8
 8001198:	4202c000 	.word	0x4202c000

0800119c <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_GPDMA1_Init+0x88>)
 80011a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <MX_GPDMA1_Init+0x88>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_GPDMA1_Init+0x88>)
 80011b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2054      	movs	r0, #84	; 0x54
 80011c6:	f000 fe22 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80011ca:	2054      	movs	r0, #84	; 0x54
 80011cc:	f000 fe39 	bl	8001e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_GPDMA1_Init+0x8c>)
 80011d2:	4a16      	ldr	r2, [pc, #88]	; (800122c <MX_GPDMA1_Init+0x90>)
 80011d4:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel12.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_GPDMA1_Init+0x8c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel12.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_GPDMA1_Init+0x8c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel12.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT1;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_GPDMA1_Init+0x8c>)
 80011e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel12.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_GPDMA1_Init+0x8c>)
 80011ec:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel12.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <MX_GPDMA1_Init+0x8c>)
 80011f4:	2281      	movs	r2, #129	; 0x81
 80011f6:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <MX_GPDMA1_Init+0x8c>)
 80011fa:	f001 fd6f 	bl	8002cdc <HAL_DMAEx_List_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 8001204:	f000 f946 	bl	8001494 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001208:	2110      	movs	r1, #16
 800120a:	4807      	ldr	r0, [pc, #28]	; (8001228 <MX_GPDMA1_Init+0x8c>)
 800120c:	f001 fd04 	bl	8002c18 <HAL_DMA_ConfigChannelAttributes>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_GPDMA1_Init+0x7e>
  {
    Error_Handler();
 8001216:	f000 f93d 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	46020c00 	.word	0x46020c00
 8001228:	20000548 	.word	0x20000548
 800122c:	40020650 	.word	0x40020650

08001230 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <MX_I2C3_Init+0x74>)
 8001236:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <MX_I2C3_Init+0x78>)
 8001238:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F07BFF;
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_I2C3_Init+0x74>)
 800123c:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <MX_I2C3_Init+0x7c>)
 800123e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_I2C3_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_I2C3_Init+0x74>)
 8001248:	2201      	movs	r2, #1
 800124a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_I2C3_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_I2C3_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_I2C3_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C3_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_I2C3_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <MX_I2C3_Init+0x74>)
 800126c:	f002 fe7a 	bl	8003f64 <HAL_I2C_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001276:	f000 f90d 	bl	8001494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800127a:	2100      	movs	r1, #0
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <MX_I2C3_Init+0x74>)
 800127e:	f003 f9f3 	bl	8004668 <HAL_I2CEx_ConfigAnalogFilter>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001288:	f000 f904 	bl	8001494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_I2C3_Init+0x74>)
 8001290:	f003 fa35 	bl	80046fe <HAL_I2CEx_ConfigDigitalFilter>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800129a:	f000 f8fb 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200005c0 	.word	0x200005c0
 80012a8:	46002800 	.word	0x46002800
 80012ac:	00f07bff 	.word	0x00f07bff

080012b0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80012b4:	2000      	movs	r0, #0
 80012b6:	f003 fa6f 	bl	8004798 <HAL_ICACHE_ConfigAssociativityMode>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80012c0:	f000 f8e8 	bl	8001494 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80012c4:	f003 fa88 	bl	80047d8 <HAL_ICACHE_Enable>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80012ce:	f000 f8e1 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_USART1_UART_Init+0x90>)
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <MX_USART1_UART_Init+0x94>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_USART1_UART_Init+0x90>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_USART1_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_USART1_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_USART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_USART1_UART_Init+0x90>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_USART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_USART1_UART_Init+0x90>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_USART1_UART_Init+0x90>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_USART1_UART_Init+0x90>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_USART1_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001320:	4811      	ldr	r0, [pc, #68]	; (8001368 <MX_USART1_UART_Init+0x90>)
 8001322:	f007 fa29 	bl	8008778 <HAL_UART_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800132c:	f000 f8b2 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_USART1_UART_Init+0x90>)
 8001334:	f007 fea6 	bl	8009084 <HAL_UARTEx_SetTxFifoThreshold>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800133e:	f000 f8a9 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4808      	ldr	r0, [pc, #32]	; (8001368 <MX_USART1_UART_Init+0x90>)
 8001346:	f007 fedb 	bl	8009100 <HAL_UARTEx_SetRxFifoThreshold>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001350:	f000 f8a0 	bl	8001494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_USART1_UART_Init+0x90>)
 8001356:	f007 fe5c 	bl	8009012 <HAL_UARTEx_DisableFifoMode>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001360:	f000 f898 	bl	8001494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000060c 	.word	0x2000060c
 800136c:	40013800 	.word	0x40013800

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <MX_GPIO_Init+0x118>)
 8001388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800138c:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <MX_GPIO_Init+0x118>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MX_GPIO_Init+0x118>)
 8001398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b38      	ldr	r3, [pc, #224]	; (8001488 <MX_GPIO_Init+0x118>)
 80013a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013aa:	4a37      	ldr	r2, [pc, #220]	; (8001488 <MX_GPIO_Init+0x118>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <MX_GPIO_Init+0x118>)
 80013b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b31      	ldr	r3, [pc, #196]	; (8001488 <MX_GPIO_Init+0x118>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c8:	4a2f      	ldr	r2, [pc, #188]	; (8001488 <MX_GPIO_Init+0x118>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <MX_GPIO_Init+0x118>)
 80013d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM_RESET_Pin|PWDN_Pin|LED_Pin|EN_1V5_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f24e 0108 	movw	r1, #57352	; 0xe008
 80013e6:	4829      	ldr	r0, [pc, #164]	; (800148c <MX_GPIO_Init+0x11c>)
 80013e8:	f002 fd8a 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM__CS_Pin */
  GPIO_InitStruct.Pin = CAM__CS_Pin;
 80013ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013f6:	2302      	movs	r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CAM__CS_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	4619      	mov	r1, r3
 8001400:	4822      	ldr	r0, [pc, #136]	; (800148c <MX_GPIO_Init+0x11c>)
 8001402:	f002 fba5 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_RESET_Pin LED_Pin */
  GPIO_InitStruct.Pin = CAM_RESET_Pin|LED_Pin;
 8001406:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001410:	2302      	movs	r3, #2
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	481b      	ldr	r0, [pc, #108]	; (800148c <MX_GPIO_Init+0x11c>)
 8001420:	f002 fb96 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWDN_Pin */
  GPIO_InitStruct.Pin = PWDN_Pin;
 8001424:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PWDN_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4813      	ldr	r0, [pc, #76]	; (800148c <MX_GPIO_Init+0x11c>)
 800143e:	f002 fb87 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCLK_Pin */
  GPIO_InitStruct.Pin = MCLK_Pin;
 8001442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MCLK_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_GPIO_Init+0x120>)
 8001460:	f002 fb76 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_1V5_Pin */
  GPIO_InitStruct.Pin = EN_1V5_Pin;
 8001464:	2308      	movs	r3, #8
 8001466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EN_1V5_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_GPIO_Init+0x11c>)
 800147c:	f002 fb68 	bl	8003b50 <HAL_GPIO_Init>

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	46020c00 	.word	0x46020c00
 800148c:	42020400 	.word	0x42020400
 8001490:	42020000 	.word	0x42020000

08001494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
}
 800149a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800149c:	e7fe      	b.n	800149c <Error_Handler+0x8>
	...

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_MspInit+0x30>)
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ac:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x30>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x30>)
 80014b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	46020c00 	.word	0x46020c00

080014d4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a60      	ldr	r2, [pc, #384]	; (8001674 <HAL_DCMI_MspInit+0x1a0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	f040 80b9 	bne.w	800166a <HAL_DCMI_MspInit+0x196>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_PSSI_CLK_ENABLE();
 80014f8:	4b5f      	ldr	r3, [pc, #380]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 80014fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014fe:	4a5e      	ldr	r2, [pc, #376]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001504:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001508:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 800150a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800150e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 8001518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800151c:	4a56      	ldr	r2, [pc, #344]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001526:	4b54      	ldr	r3, [pc, #336]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 8001528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	4b50      	ldr	r3, [pc, #320]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 8001536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800153a:	4a4f      	ldr	r2, [pc, #316]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001544:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 8001546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 8001554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001558:	4a47      	ldr	r2, [pc, #284]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001562:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_DCMI_MspInit+0x1a4>)
 8001564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001570:	2310      	movs	r3, #16
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001580:	230a      	movs	r3, #10
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	483c      	ldr	r0, [pc, #240]	; (800167c <HAL_DCMI_MspInit+0x1a8>)
 800158c:	f002 fae0 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001590:	2340      	movs	r3, #64	; 0x40
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 80015a0:	2304      	movs	r3, #4
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4834      	ldr	r0, [pc, #208]	; (800167c <HAL_DCMI_MspInit+0x1a8>)
 80015ac:	f002 fad0 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 80015b0:	f44f 631c 	mov.w	r3, #2496	; 0x9c0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015be:	2302      	movs	r3, #2
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80015c2:	230a      	movs	r3, #10
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	4619      	mov	r1, r3
 80015cc:	482c      	ldr	r0, [pc, #176]	; (8001680 <HAL_DCMI_MspInit+0x1ac>)
 80015ce:	f002 fabf 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e0:	2302      	movs	r3, #2
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_DCMI;
 80015e4:	2304      	movs	r3, #4
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	4824      	ldr	r0, [pc, #144]	; (8001680 <HAL_DCMI_MspInit+0x1ac>)
 80015f0:	f002 faae 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80015f4:	f44f 7350 	mov.w	r3, #832	; 0x340
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001602:	2302      	movs	r3, #2
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001606:	230a      	movs	r3, #10
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	481c      	ldr	r0, [pc, #112]	; (8001684 <HAL_DCMI_MspInit+0x1b0>)
 8001612:	f002 fa9d 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001626:	230a      	movs	r3, #10
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	4814      	ldr	r0, [pc, #80]	; (8001684 <HAL_DCMI_MspInit+0x1b0>)
 8001632:	f002 fa8d 	bl	8003b50 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_DCMI_MspInit+0x1b4>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a13      	ldr	r2, [pc, #76]	; (8001688 <HAL_DCMI_MspInit+0x1b4>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_DCMI_MspInit+0x1b4>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_DCMI_MspInit+0x1b4>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_DCMI_MspInit+0x1b4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_DCMI_MspInit+0x1b4>)
 8001654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001658:	6053      	str	r3, [r2, #4]

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2077      	movs	r0, #119	; 0x77
 8001660:	f000 fbd5 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8001664:	2077      	movs	r0, #119	; 0x77
 8001666:	f000 fbec 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3730      	adds	r7, #48	; 0x30
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	4202c000 	.word	0x4202c000
 8001678:	46020c00 	.word	0x46020c00
 800167c:	42020000 	.word	0x42020000
 8001680:	42020800 	.word	0x42020800
 8001684:	42020400 	.word	0x42020400
 8001688:	46000400 	.word	0x46000400

0800168c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b0bc      	sub	sp, #240	; 0xf0
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	22c8      	movs	r2, #200	; 0xc8
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f008 fa98 	bl	8009be2 <memset>
  if(hi2c->Instance==I2C3)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a26      	ldr	r2, [pc, #152]	; (8001750 <HAL_I2C_MspInit+0xc4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d145      	bne.n	8001748 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80016bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 fc06 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80016de:	f7ff fed9 	bl	8001494 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_I2C_MspInit+0xc8>)
 80016e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e8:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <HAL_I2C_MspInit+0xc8>)
 80016ea:	f043 0304 	orr.w	r3, r3, #4
 80016ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_I2C_MspInit+0xc8>)
 80016f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = SIOC_Pin|SIOD_Pin;
 8001700:	2303      	movs	r3, #3
 8001702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001706:	2312      	movs	r3, #18
 8001708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170c:	2301      	movs	r3, #1
 800170e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001712:	2301      	movs	r3, #1
 8001714:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001718:	2304      	movs	r3, #4
 800171a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <HAL_I2C_MspInit+0xcc>)
 8001726:	f002 fa13 	bl	8003b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_I2C_MspInit+0xc8>)
 800172c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_I2C_MspInit+0xc8>)
 8001732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001736:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_I2C_MspInit+0xc8>)
 800173c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	37f0      	adds	r7, #240	; 0xf0
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	46002800 	.word	0x46002800
 8001754:	46020c00 	.word	0x46020c00
 8001758:	42020800 	.word	0x42020800

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0bc      	sub	sp, #240	; 0xf0
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	22c8      	movs	r2, #200	; 0xc8
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f008 fa30 	bl	8009be2 <memset>
  if(huart->Instance==USART1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_UART_MspInit+0xc4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d145      	bne.n	8001818 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800178c:	f04f 0201 	mov.w	r2, #1
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001798:	2300      	movs	r3, #0
 800179a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 fb9f 	bl	8005ee4 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80017ac:	f7ff fe72 	bl	8001494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d4:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_UART_MspInit+0xc8>)
 80017e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CAM_TX_Pin|CAM_RX_Pin;
 80017ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001806:	2307      	movs	r3, #7
 8001808:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_UART_MspInit+0xcc>)
 8001814:	f002 f99c 	bl	8003b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001818:	bf00      	nop
 800181a:	37f0      	adds	r7, #240	; 0xf0
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40013800 	.word	0x40013800
 8001824:	46020c00 	.word	0x46020c00
 8001828:	42020000 	.word	0x42020000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001878:	f000 f986 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <GPDMA1_Channel12_IRQHandler+0x10>)
 8001886:	f001 f853 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000548 	.word	0x20000548

08001894 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI/PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <DCMI_PSSI_IRQHandler+0x10>)
 800189a:	f000 fdfb 	bl	8002494 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200004f8 	.word	0x200004f8

080018a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_kill>:

int _kill(int pid, int sig)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018c2:	f008 f957 	bl	8009b74 <__errno>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2216      	movs	r2, #22
 80018ca:	601a      	str	r2, [r3, #0]
	return -1;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_exit>:

void _exit(int status)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ffe7 	bl	80018b8 <_kill>
	while (1) {
 80018ea:	e7fe      	b.n	80018ea <_exit+0x12>

080018ec <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e00a      	b.n	8001914 <_read+0x28>
		*ptr++ = __io_getchar();
 80018fe:	e000      	b.n	8001902 <_read+0x16>
 8001900:	bf00      	nop
 8001902:	4601      	mov	r1, r0
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	b2ca      	uxtb	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	429a      	cmp	r2, r3
 800191a:	dbf0      	blt.n	80018fe <_read+0x12>
	}

	return len;
 800191c:	687b      	ldr	r3, [r7, #4]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	return -1;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <_fstat>:

int _fstat(int file, struct stat *st)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194e:	605a      	str	r2, [r3, #4]
	return 0;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
	return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001998:	4a14      	ldr	r2, [pc, #80]	; (80019ec <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
		errno = ENOMEM;
 80019c0:	f008 f8d8 	bl	8009b74 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	200c0000 	.word	0x200c0000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	2000069c 	.word	0x2000069c
 80019f8:	2001fac8 	.word	0x2001fac8

080019fc <SystemInit>:
 * @param  None
 * @retval None
 */

void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <SystemInit+0x68>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <SystemInit+0x68>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set MSION bit */
	RCC->CR = RCC_CR_MSISON;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <SystemInit+0x6c>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR1 = 0U;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <SystemInit+0x6c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
	RCC->CFGR2 = 0U;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <SystemInit+0x6c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
	RCC->CFGR3 = 0U;
 8001a22:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <SystemInit+0x6c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24

	/* Reset HSEON, CSSON , HSION, PLLxON bits */
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <SystemInit+0x6c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <SystemInit+0x6c>)
 8001a2e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a32:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a36:	6013      	str	r3, [r2, #0]
			| RCC_CR_PLL3ON);

	/* Reset PLLCFGR register */
	RCC->PLL1CFGR = 0U;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <SystemInit+0x6c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset HSEBYP bit */
	RCC->CR &= ~(RCC_CR_HSEBYP);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <SystemInit+0x6c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <SystemInit+0x6c>)
 8001a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0U;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <SystemInit+0x6c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	651a      	str	r2, [r3, #80]	; 0x50

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SystemInit+0x68>)
 8001a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a56:	609a      	str	r2, [r3, #8]
#endif
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00
 8001a68:	46020c00 	.word	0x46020c00

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a72:	e003      	b.n	8001a7c <LoopCopyDataInit>

08001a74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a7a:	3104      	adds	r1, #4

08001a7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a7c:	480b      	ldr	r0, [pc, #44]	; (8001aac <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a84:	d3f6      	bcc.n	8001a74 <CopyDataInit>
	ldr	r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a88:	e002      	b.n	8001a90 <LoopFillZerobss>

08001a8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a8c:	f842 3b04 	str.w	r3, [r2], #4

08001a90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <LoopForever+0x16>)
	cmp	r2, r3
 8001a92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a94:	d3f9      	bcc.n	8001a8a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a96:	f7ff ffb1 	bl	80019fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f008 f871 	bl	8009b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff faab 	bl	8000ff8 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001aa4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001aa8:	0800ce44 	.word	0x0800ce44
	ldr	r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ab0:	2000047c 	.word	0x2000047c
	ldr	r2, =_sbss
 8001ab4:	2000047c 	.word	0x2000047c
	ldr	r3, = _ebss
 8001ab8:	2001fac4 	.word	0x2001fac4

08001abc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_Init+0x4c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_Init+0x4c>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f991 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ad6:	f004 f821 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_Init+0x50>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	490b      	ldr	r1, [pc, #44]	; (8001b14 <HAL_Init+0x54>)
 8001ae6:	5ccb      	ldrb	r3, [r1, r3]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_Init+0x58>)
 8001aee:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001af0:	200f      	movs	r0, #15
 8001af2:	f000 f813 	bl	8001b1c <HAL_InitTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e002      	b.n	8001b06 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b00:	f7ff fcce 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	46020c00 	.word	0x46020c00
 8001b14:	0800c95c 	.word	0x0800c95c
 8001b18:	20000018 	.word	0x20000018

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_InitTick+0x60>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e021      	b.n	8001b74 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b30:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <HAL_InitTick+0x64>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_InitTick+0x60>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f997 	bl	8001e7a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f953 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x68>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000020 	.word	0x20000020
 8001b80:	20000018 	.word	0x20000018
 8001b84:	2000001c 	.word	0x2000001c

08001b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000020 	.word	0x20000020
 8001bac:	200006a0 	.word	0x200006a0

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200006a0 	.word	0x200006a0

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000020 	.word	0x20000020

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db12      	blt.n	8001ce8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	490a      	ldr	r1, [pc, #40]	; (8001cf4 <__NVIC_DisableIRQ+0x44>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	3320      	adds	r3, #32
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cdc:	f3bf 8f4f 	dsb	sy
}
 8001ce0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ce2:	f3bf 8f6f 	isb	sy
}
 8001ce6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	; (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	; (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff05 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e1c:	f7ff ff1c 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001e20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68b9      	ldr	r1, [r7, #8]
 8001e26:	6978      	ldr	r0, [r7, #20]
 8001e28:	f7ff ff90 	bl	8001d4c <NVIC_EncodePriority>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff5f 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff0f 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff1f 	bl	8001cb0 <__NVIC_DisableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff ff96 	bl	8001db4 <SysTick_Config>
 8001e88:	4603      	mov	r3, r0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e069      	b.n	8001f7a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff fb0e 	bl	80014d4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6819      	ldr	r1, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_DCMI_Init+0xf0>)
 8001eda:	400b      	ands	r3, r1
 8001edc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ef2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001efe:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f0a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f16:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f22:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d112      	bne.n	8001f5a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7f1b      	ldrb	r3, [r3, #28]
 8001f38:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7f5b      	ldrb	r3, [r3, #29]
 8001f3e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f40:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7f9b      	ldrb	r3, [r3, #30]
 8001f46:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001f48:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7fdb      	ldrb	r3, [r3, #31]
 8001f50:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001f56:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f58:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 021e 	orr.w	r2, r2, #30
 8001f68:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	ffe0f007 	.word	0xffe0f007

08001f88 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	; 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_DCMI_Start_DMA+0x26>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e189      	b.n	80022c2 <HAL_DCMI_Start_DMA+0x33a>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0202 	bic.w	r2, r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	4a99      	ldr	r2, [pc, #612]	; (8002258 <HAL_DCMI_Start_DMA+0x2d0>)
 8001ff4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffa:	4a98      	ldr	r2, [pc, #608]	; (800225c <HAL_DCMI_Start_DMA+0x2d4>)
 8001ffc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	2200      	movs	r2, #0
 8002004:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Length should be converted to number of bytes */
  tmp_length = tmp_length * 4U;
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	623b      	str	r3, [r7, #32]

  if (tmp_length <= 0xFFFFU)
 8002024:	6a3b      	ldr	r3, [r7, #32]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d24c      	bcs.n	80020c6 <HAL_DCMI_Start_DMA+0x13e>
  {
    /* Continuoues Mode */
    /* Enable the DMA Stream */
    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d037      	beq.n	80020aa <HAL_DCMI_Start_DMA+0x122>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	2b00      	cmp	r3, #0
 8002042:	d023      	beq.n	800208c <HAL_DCMI_Start_DMA+0x104>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d01d      	beq.n	800208c <HAL_DCMI_Start_DMA+0x104>
      {
        /* Set Source , Destination , Length for DMA Xfer */

        /* Set DMA data size           */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = tmp_length;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6a3a      	ldr	r2, [r7, #32]
 800205a:	609a      	str	r2, [r3, #8]
        /* Set DMA source address      */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60da      	str	r2, [r3, #12]
        /* Set DMA destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	611a      	str	r2, [r3, #16]

        status = HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207e:	4618      	mov	r0, r3
 8002080:	f000 ff5a 	bl	8002f38 <HAL_DMAEx_List_Start_IT>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800208a:	e0f9      	b.n	8002280 <HAL_DCMI_Start_DMA+0x2f8>
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2240      	movs	r2, #64	; 0x40
 8002090:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020a8:	e0ea      	b.n	8002280 <HAL_DCMI_Start_DMA+0x2f8>
      }
    }
    else
    {
      status = HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3328      	adds	r3, #40	; 0x28
 80020b4:	4619      	mov	r1, r3
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	f000 fb34 	bl	8002726 <HAL_DMA_Start_IT>
 80020be:	4603      	mov	r3, r0
 80020c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020c4:	e0dc      	b.n	8002280 <HAL_DCMI_Start_DMA+0x2f8>
  {
    /* Double buffering is used through 2 Nodes
       Calculate the elementary size to be transferred by each node */

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = tmp_length;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a3a      	ldr	r2, [r7, #32]
 80020d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80020d8:	e009      	b.n	80020ee <HAL_DCMI_Start_DMA+0x166>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	085a      	lsrs	r2, r3, #1
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f6:	d2f0      	bcs.n	80020da <HAL_DCMI_Start_DMA+0x152>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 1U);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40

    if ((hdcmi->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80a3 	beq.w	8002260 <HAL_DCMI_Start_DMA+0x2d8>
    {
      if ((hdcmi->DMA_Handle->LinkedListQueue != 0U) && (hdcmi->DMA_Handle->LinkedListQueue->Head != 0U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 808a 	beq.w	800223a <HAL_DCMI_Start_DMA+0x2b2>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8083 	beq.w	800223a <HAL_DCMI_Start_DMA+0x2b2>
      {
        /* Update first node */

        /* Set DMA Data size */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize ;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002140:	609a      	str	r2, [r3, #8]

        /* Set DMA Source address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
            (uint32_t)&hdcmi->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f103 0228 	add.w	r2, r3, #40	; 0x28
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60da      	str	r2, [r3, #12]

        /* Set DMA Destination address */
        hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	611a      	str	r2, [r3, #16]

        /* Get CLLR offset */
        cllr_offset = (hdcmi->DMA_Handle->LinkedListQueue->Head->NodeInfo & NODE_CLLR_IDX) >> 8U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	61fb      	str	r3, [r7, #28]

        /* Update second node */
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d04b      	beq.n	800221c <HAL_DCMI_Start_DMA+0x294>
        {
          tmp1 = (uint32_t)hdcmi->DMA_Handle->LinkedListQueue->Head ;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
          tmp2 = hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset];
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800219c:	617b      	str	r3, [r7, #20]
          /* Update second node */

          /* Set DMA Data size */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 80021a4:	6979      	ldr	r1, [r7, #20]
 80021a6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80021aa:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80021ac:	4313      	orrs	r3, r2
 80021ae:	461a      	mov	r2, r3
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hdcmi->XferSize;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	6093      	str	r3, [r2, #8]

          /* Set DMA Source address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
                                   (uint32_t)&hdcmi->Instance->DR;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f103 0028 	add.w	r0, r3, #40	; 0x28
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 80021c4:	6979      	ldr	r1, [r7, #20]
 80021c6:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80021ca:	400a      	ands	r2, r1
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80021cc:	4313      	orrs	r3, r2
                                   (uint32_t)&hdcmi->Instance->DR;
 80021ce:	4602      	mov	r2, r0
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = \
 80021d0:	60da      	str	r2, [r3, #12]

          /* Set DMA Destination address */
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
                                   (uint32_t)pData + hdcmi->XferSize;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	041b      	lsls	r3, r3, #16
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 80021dc:	6978      	ldr	r0, [r7, #20]
 80021de:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80021e2:	4002      	ands	r2, r0
          ((DMA_NodeTypeDef *)((tmp1 & DMA_CLBAR_LBA) + \
 80021e4:	4313      	orrs	r3, r2
 80021e6:	461a      	mov	r2, r3
                                   (uint32_t)pData + hdcmi->XferSize;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	440b      	add	r3, r1
                               (tmp2 & DMA_CLLR_LA)))->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = \
 80021ec:	6113      	str	r3, [r2, #16]

          if (HAL_DMAEx_List_Start_IT(hdcmi->DMA_Handle) != HAL_OK)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fea0 	bl	8002f38 <HAL_DMAEx_List_Start_IT>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03f      	beq.n	800227e <HAL_DCMI_Start_DMA+0x2f6>
          {
            /* Set Error Code */
            hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2240      	movs	r2, #64	; 0x40
 8002202:	64da      	str	r2, [r3, #76]	; 0x4c
            /* Change DCMI state */
            hdcmi->State = HAL_DCMI_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            /* Release Lock */
            __HAL_UNLOCK(hdcmi);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            /* Return function status */
            status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800221a:	e030      	b.n	800227e <HAL_DCMI_Start_DMA+0x2f6>
          }
        }
        else
        {
          /* Set Error Code */
          hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	64da      	str	r2, [r3, #76]	; 0x4c
          /* Change DCMI state */
          hdcmi->State = HAL_DCMI_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Release Lock */
          __HAL_UNLOCK(hdcmi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          /* Return function status */
          status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 8002238:	e021      	b.n	800227e <HAL_DCMI_Start_DMA+0x2f6>
        }
      }
      else
      {
        /* Set Error Code */
        hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2240      	movs	r2, #64	; 0x40
 800223e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        /* Release Lock */
        __HAL_UNLOCK(hdcmi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        /* Return function status */
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002256:	e013      	b.n	8002280 <HAL_DCMI_Start_DMA+0x2f8>
 8002258:	080025e1 	.word	0x080025e1
 800225c:	080026ed 	.word	0x080026ed
      }
    }
    else
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800227c:	e000      	b.n	8002280 <HAL_DCMI_Start_DMA+0x2f8>
        if (hdcmi->DMA_Handle->LinkedListQueue->Head->LinkRegisters[cllr_offset] != 0U)
 800227e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10c      	bne.n	80022a2 <HAL_DCMI_Start_DMA+0x31a>
  {
    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]

    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80022a0:	e00d      	b.n	80022be <HAL_DCMI_Start_DMA+0x336>
  }
  else
  {
    /* Set Error Code */
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2240      	movs	r2, #64	; 0x40
 80022a6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Release Lock */
    __HAL_UNLOCK(hdcmi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Return function status */
    status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Return function status */
  return status;
 80022be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop

080022cc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_DCMI_Stop+0xb8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <HAL_DCMI_Stop+0xbc>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0a5b      	lsrs	r3, r3, #9
 80022e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_DCMI_Stop+0x30>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e03f      	b.n	800237c <HAL_DCMI_Stop+0xb0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3b01      	subs	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d108      	bne.n	800233a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	f043 0220 	orr.w	r2, r3, #32
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	72fb      	strb	r3, [r7, #11]
      break;
 8002338:	e006      	b.n	8002348 <HAL_DCMI_Stop+0x7c>
    }
  } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e9      	bne.n	800231c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002356:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fa42 	bl	80027e6 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800237a:	7afb      	ldrb	r3, [r7, #11]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000018 	.word	0x20000018
 8002388:	10624dd3 	.word	0x10624dd3

0800238c <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_DCMI_Suspend+0xa8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a27      	ldr	r2, [pc, #156]	; (8002438 <HAL_DCMI_Suspend+0xac>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0a5b      	lsrs	r3, r3, #9
 80023a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023a4:	fb02 f303 	mul.w	r3, r2, r3
 80023a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_DCMI_Suspend+0x30>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e034      	b.n	8002426 <HAL_DCMI_Suspend+0x9a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d125      	bne.n	800241c <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2205      	movs	r2, #5
 80023d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 0201 	bic.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10c      	bne.n	800240e <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	72fb      	strb	r3, [r7, #11]
        break;
 800240c:	e006      	b.n	800241c <HAL_DCMI_Suspend+0x90>
      }
    } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e5      	bne.n	80023e8 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8002424:	7afb      	ldrb	r3, [r7, #11]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000018 	.word	0x20000018
 8002438:	10624dd3 	.word	0x10624dd3

0800243c <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_DCMI_Resume+0x16>
 800244e:	2302      	movs	r3, #2
 8002450:	e01a      	b.n	8002488 <HAL_DCMI_Resume+0x4c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b05      	cmp	r3, #5
 8002464:	d10b      	bne.n	800247e <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2202      	movs	r2, #2
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01e      	beq.n	80024ec <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2204      	movs	r2, #4
 80024b4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f043 0202 	orr.w	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ce:	4a39      	ldr	r2, [pc, #228]	; (80025b4 <HAL_DCMI_IRQHandler+0x120>)
 80024d0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fa01 	bl	80028de <HAL_DMA_Abort_IT>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f900 	bl	80026ec <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01e      	beq.n	8002534 <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2202      	movs	r2, #2
 80024fc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002502:	f043 0201 	orr.w	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2204      	movs	r2, #4
 800250e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_DCMI_IRQHandler+0x120>)
 8002518:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f9dd 	bl	80028de <HAL_DMA_Abort_IT>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f8dc 	bl	80026ec <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0310 	and.w	r3, r3, #16
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2210      	movs	r2, #16
 8002544:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f836 	bl	80025b8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2208      	movs	r2, #8
 800255c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f834 	bl	80025cc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01d      	beq.n	80025aa <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d107      	bne.n	800258c <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 021e 	bic.w	r2, r2, #30
 800258a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f007 f809 	bl	80095bc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	080026ed 	.word	0x080026ed

080025b8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b08b      	sub	sp, #44	; 0x2c
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t transfernumber;
  uint32_t transfercount;
  uint32_t transfersize ;

  /* Update Nodes destinations */
  if (hdcmi->XferSize != 0U)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d061      	beq.n	80026ba <DCMI_DMAXferCplt+0xda>
  {
    pbuff          = hdcmi->pBuffPtr;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	623b      	str	r3, [r7, #32]
    transfernumber = hdcmi->XferTransferNumber;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	61fb      	str	r3, [r7, #28]
    transfercount  = hdcmi->XferCount;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	61bb      	str	r3, [r7, #24]
    transfersize   = hdcmi->XferSize;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260c:	617b      	str	r3, [r7, #20]

    tmp1 = hdcmi->DMA_Handle->Instance->CLLR & DMA_CLLR_LA;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002616:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
    tmp2 = hdcmi->DMA_Handle->Instance->CLBAR & DMA_CLBAR_LBA;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	0c1b      	lsrs	r3, r3, #16
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	60fb      	str	r3, [r7, #12]
    pnode = (DMA_NodeTypeDef *)(uint32_t)(tmp1 | tmp2);
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]

    if (hdcmi->XferCount > 1U)
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	2b01      	cmp	r3, #1
 800263a:	d910      	bls.n	800265e <DCMI_DMAXferCplt+0x7e>
    {
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pbuff + ((transfernumber - transfercount + 2U) * transfersize);
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	3302      	adds	r3, #2
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	fb03 f202 	mul.w	r2, r3, r2
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	441a      	add	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	1e5a      	subs	r2, r3, #1
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
    }
  }
}
 800265c:	e040      	b.n	80026e0 <DCMI_DMAXferCplt+0x100>
    else if (hdcmi->XferCount == 1U)
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	2b01      	cmp	r3, #1
 8002664:	d109      	bne.n	800267a <DCMI_DMAXferCplt+0x9a>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	611a      	str	r2, [r3, #16]
      hdcmi->XferCount--;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002678:	e032      	b.n	80026e0 <DCMI_DMAXferCplt+0x100>
      pnode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = hdcmi->pBuffPtr + hdcmi->XferSize;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	441a      	add	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	611a      	str	r2, [r3, #16]
      if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_CONTINUOUS)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <DCMI_DMAXferCplt+0xc0>
        hdcmi->XferCount = hdcmi->XferTransferNumber ;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
 800269e:	e003      	b.n	80026a8 <DCMI_DMAXferCplt+0xc8>
        hdcmi->State = HAL_DCMI_STATE_READY;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	60da      	str	r2, [r3, #12]
}
 80026b8:	e012      	b.n	80026e0 <DCMI_DMAXferCplt+0x100>
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	60da      	str	r2, [r3, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d103      	bne.n	80026e0 <DCMI_DMAXferCplt+0x100>
      hdcmi->State = HAL_DCMI_STATE_READY;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80026e0:	bf00      	nop
 80026e2:	372c      	adds	r7, #44	; 0x2c
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_ULE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	2b02      	cmp	r3, #2
 8002702:	d009      	beq.n	8002718 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f006 ff61 	bl	80095e0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e04f      	b.n	80027de <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_DMA_Start_IT+0x26>
 8002748:	2302      	movs	r3, #2
 800274a:	e048      	b.n	80027de <HAL_DMA_Start_IT+0xb8>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	d136      	bne.n	80027ce <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fa8b 	bl	8002c90 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8002788:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a0:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b8:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e007      	b.n	80027de <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2240      	movs	r2, #64	; 0x40
 80027d2:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80027ee:	f7ff f9df 	bl	8001bb0 <HAL_GetTick>
 80027f2:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06b      	b.n	80028d6 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d008      	beq.n	800281c <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e05c      	b.n	80028d6 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0204 	orr.w	r2, r2, #4
 800282a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2205      	movs	r2, #5
 8002830:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002834:	e020      	b.n	8002878 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002836:	f7ff f9bb 	bl	8001bb0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b05      	cmp	r3, #5
 8002842:	d919      	bls.n	8002878 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f043 0210 	orr.w	r2, r3, #16
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2203      	movs	r2, #3
 8002854:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	2201      	movs	r2, #1
 800286a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e02e      	b.n	80028d6 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0d7      	beq.n	8002836 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0202 	orr.w	r2, r2, #2
 8002894:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80028a6:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	2201      	movs	r2, #1
 80028c2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e019      	b.n	8002924 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d004      	beq.n	8002906 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e00e      	b.n	8002924 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2204      	movs	r2, #4
 800290a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002940:	f023 030f 	bic.w	r3, r3, #15
 8002944:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294e:	3b50      	subs	r3, #80	; 0x50
 8002950:	09db      	lsrs	r3, r3, #7
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	2201      	movs	r2, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8150 	beq.w	8002c0c <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002976:	2b00      	cmp	r3, #0
 8002978:	d011      	beq.n	800299e <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002990:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d011      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029c2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029f4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f043 0204 	orr.w	r2, r3, #4
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d011      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a26:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	f043 0208 	orr.w	r2, r3, #8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d013      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00c      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a58:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d055      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d04e      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a8e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d137      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aaa:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0202 	orr.w	r2, r2, #2
 8002aba:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2203      	movs	r2, #3
 8002ace:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002ad2:	e003      	b.n	8002adc <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aec:	2201      	movs	r2, #1
 8002aee:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8087 	beq.w	8002c10 <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
        }

        return;
 8002b0a:	e081      	b.n	8002c10 <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d039      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d032      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d012      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d111      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	731a      	strb	r2, [r3, #12]
 8002b70:	e008      	b.n	8002b84 <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002b8c:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d031      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0202 	orr.w	r2, r2, #2
 8002bbc:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002bd4:	e003      	b.n	8002bde <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bee:	2201      	movs	r2, #1
 8002bf0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
 8002c0a:	e002      	b.n	8002c12 <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8002c0c:	bf00      	nop
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_IRQHandler+0x2e2>
        return;
 8002c10:	bf00      	nop
    }
  }
}
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e02b      	b.n	8002c84 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c34:	f023 030f 	bic.w	r3, r3, #15
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c42:	3b50      	subs	r3, #80	; 0x50
 8002c44:	09db      	lsrs	r3, r3, #7
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f003 0311 	and.w	r3, r3, #17
 8002c62:	2b11      	cmp	r3, #17
 8002c64:	d106      	bne.n	8002c74 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	e006      	b.n	8002c82 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
 8002c9c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	b291      	uxth	r1, r2
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002cbc:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7fe ff64 	bl	8001bb0 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0dc      	b.n	8002eae <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6f      	ldr	r2, [pc, #444]	; (8002eb8 <HAL_DMAEx_List_Init+0x1dc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	f000 809f 	beq.w	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6d      	ldr	r2, [pc, #436]	; (8002ebc <HAL_DMAEx_List_Init+0x1e0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f000 8099 	beq.w	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6b      	ldr	r2, [pc, #428]	; (8002ec0 <HAL_DMAEx_List_Init+0x1e4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f000 8093 	beq.w	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <HAL_DMAEx_List_Init+0x1e8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f000 808d 	beq.w	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a67      	ldr	r2, [pc, #412]	; (8002ec8 <HAL_DMAEx_List_Init+0x1ec>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f000 8087 	beq.w	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_DMAEx_List_Init+0x1f0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f000 8081 	beq.w	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a63      	ldr	r2, [pc, #396]	; (8002ed0 <HAL_DMAEx_List_Init+0x1f4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d07b      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a62      	ldr	r2, [pc, #392]	; (8002ed4 <HAL_DMAEx_List_Init+0x1f8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d076      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a60      	ldr	r2, [pc, #384]	; (8002ed8 <HAL_DMAEx_List_Init+0x1fc>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d071      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a5f      	ldr	r2, [pc, #380]	; (8002edc <HAL_DMAEx_List_Init+0x200>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d06c      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <HAL_DMAEx_List_Init+0x204>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d067      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5c      	ldr	r2, [pc, #368]	; (8002ee4 <HAL_DMAEx_List_Init+0x208>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d062      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5a      	ldr	r2, [pc, #360]	; (8002ee8 <HAL_DMAEx_List_Init+0x20c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d05d      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a59      	ldr	r2, [pc, #356]	; (8002eec <HAL_DMAEx_List_Init+0x210>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d058      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a57      	ldr	r2, [pc, #348]	; (8002ef0 <HAL_DMAEx_List_Init+0x214>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d053      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a56      	ldr	r2, [pc, #344]	; (8002ef4 <HAL_DMAEx_List_Init+0x218>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d04e      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a54      	ldr	r2, [pc, #336]	; (8002ef8 <HAL_DMAEx_List_Init+0x21c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d049      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a53      	ldr	r2, [pc, #332]	; (8002efc <HAL_DMAEx_List_Init+0x220>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d044      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a51      	ldr	r2, [pc, #324]	; (8002f00 <HAL_DMAEx_List_Init+0x224>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d03f      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a50      	ldr	r2, [pc, #320]	; (8002f04 <HAL_DMAEx_List_Init+0x228>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d03a      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a4e      	ldr	r2, [pc, #312]	; (8002f08 <HAL_DMAEx_List_Init+0x22c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d035      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a4d      	ldr	r2, [pc, #308]	; (8002f0c <HAL_DMAEx_List_Init+0x230>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d030      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a4b      	ldr	r2, [pc, #300]	; (8002f10 <HAL_DMAEx_List_Init+0x234>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a4a      	ldr	r2, [pc, #296]	; (8002f14 <HAL_DMAEx_List_Init+0x238>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d026      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a48      	ldr	r2, [pc, #288]	; (8002f18 <HAL_DMAEx_List_Init+0x23c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d021      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a47      	ldr	r2, [pc, #284]	; (8002f1c <HAL_DMAEx_List_Init+0x240>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d01c      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a45      	ldr	r2, [pc, #276]	; (8002f20 <HAL_DMAEx_List_Init+0x244>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d017      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a44      	ldr	r2, [pc, #272]	; (8002f24 <HAL_DMAEx_List_Init+0x248>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d012      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a42      	ldr	r2, [pc, #264]	; (8002f28 <HAL_DMAEx_List_Init+0x24c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a41      	ldr	r2, [pc, #260]	; (8002f2c <HAL_DMAEx_List_Init+0x250>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d008      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3f      	ldr	r2, [pc, #252]	; (8002f30 <HAL_DMAEx_List_Init+0x254>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <HAL_DMAEx_List_Init+0x162>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3e      	ldr	r2, [pc, #248]	; (8002f34 <HAL_DMAEx_List_Init+0x258>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0206 	orr.w	r2, r2, #6
 8002e5e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002e60:	e00f      	b.n	8002e82 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002e62:	f7fe fea5 	bl	8001bb0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d908      	bls.n	8002e82 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2210      	movs	r2, #16
 8002e74:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e015      	b.n	8002eae <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e8      	bne.n	8002e62 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fa77 	bl	8003384 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40020050 	.word	0x40020050
 8002ebc:	50020050 	.word	0x50020050
 8002ec0:	400200d0 	.word	0x400200d0
 8002ec4:	500200d0 	.word	0x500200d0
 8002ec8:	40020150 	.word	0x40020150
 8002ecc:	50020150 	.word	0x50020150
 8002ed0:	400201d0 	.word	0x400201d0
 8002ed4:	500201d0 	.word	0x500201d0
 8002ed8:	40020250 	.word	0x40020250
 8002edc:	50020250 	.word	0x50020250
 8002ee0:	400202d0 	.word	0x400202d0
 8002ee4:	500202d0 	.word	0x500202d0
 8002ee8:	40020350 	.word	0x40020350
 8002eec:	50020350 	.word	0x50020350
 8002ef0:	400203d0 	.word	0x400203d0
 8002ef4:	500203d0 	.word	0x500203d0
 8002ef8:	40020450 	.word	0x40020450
 8002efc:	50020450 	.word	0x50020450
 8002f00:	400204d0 	.word	0x400204d0
 8002f04:	500204d0 	.word	0x500204d0
 8002f08:	40020550 	.word	0x40020550
 8002f0c:	50020550 	.word	0x50020550
 8002f10:	400205d0 	.word	0x400205d0
 8002f14:	500205d0 	.word	0x500205d0
 8002f18:	40020650 	.word	0x40020650
 8002f1c:	50020650 	.word	0x50020650
 8002f20:	400206d0 	.word	0x400206d0
 8002f24:	500206d0 	.word	0x500206d0
 8002f28:	40020750 	.word	0x40020750
 8002f2c:	50020750 	.word	0x50020750
 8002f30:	400207d0 	.word	0x400207d0
 8002f34:	500207d0 	.word	0x500207d0

08002f38 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_DMAEx_List_Start_IT+0x16>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e082      	b.n	8003058 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f58:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8002f66:	7dfb      	ldrb	r3, [r7, #23]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d005      	beq.n	8002f78 <HAL_DMAEx_List_Start_IT+0x40>
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d16a      	bne.n	8003048 <HAL_DMAEx_List_Start_IT+0x110>
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d067      	beq.n	8003048 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d157      	bne.n	8003034 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_DMAEx_List_Start_IT+0x5a>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e062      	b.n	8003058 <HAL_DMAEx_List_Start_IT+0x120>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8002fc6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695a      	ldr	r2, [r3, #20]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ff6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f107 010c 	add.w	r1, r7, #12
 8003002:	2200      	movs	r2, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fcd3 	bl	80039b0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	0c0b      	lsrs	r3, r1, #16
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003028:	4013      	ands	r3, r2
 800302a:	68f9      	ldr	r1, [r7, #12]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	430b      	orrs	r3, r1
 8003032:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e007      	b.n	8003058 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2240      	movs	r2, #64	; 0x40
 800304c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_DMAEx_List_BuildNode+0x16>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e004      	b.n	8003084 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800307a:	6839      	ldr	r1, [r7, #0]
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fad9 	bl	8003634 <DMA_List_BuildNode>

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMAEx_List_InsertNode_Tail>:
  *                     configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode_Tail(DMA_QListTypeDef *const pQList,
                                                 DMA_NodeTypeDef *const pNewNode)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_DMAEx_List_InsertNode_Tail+0x16>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_DMAEx_List_InsertNode_Tail+0x1a>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e066      	b.n	8003174 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d104      	bne.n	80030b8 <HAL_DMAEx_List_InsertNode_Tail+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2204      	movs	r2, #4
 80030b2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e05d      	b.n	8003174 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pNewNode, NULL) != 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fc09 	bl	80038d8 <DMA_List_CheckNodesBaseAddresses>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d004      	beq.n	80030d6 <HAL_DMAEx_List_InsertNode_Tail+0x4a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2205      	movs	r2, #5
 80030d0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e04e      	b.n	8003174 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pNewNode, NULL) != 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2200      	movs	r2, #0
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fc2a 	bl	8003938 <DMA_List_CheckNodesTypes>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <HAL_DMAEx_List_InsertNode_Tail+0x68>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2204      	movs	r2, #4
 80030ee:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e03f      	b.n	8003174 <HAL_DMAEx_List_InsertNode_Tail+0xe8>
  }

  /* Empty queue */
  if (pQList->Head == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <HAL_DMAEx_List_InsertNode_Tail+0x78>
  {
    pQList->Head = pNewNode;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e02b      	b.n	800315c <HAL_DMAEx_List_InsertNode_Tail+0xd0>
  }
  /* Not empty queue */
  else
  {
    /* Get CLLR register mask and offset */
    DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8003104:	f107 0220 	add.w	r2, r7, #32
 8003108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800310c:	4619      	mov	r1, r3
 800310e:	6838      	ldr	r0, [r7, #0]
 8003110:	f000 fc4e 	bl	80039b0 <DMA_List_GetCLLRNodeInfo>

    /* Find node and get its position in selected queue */
    node_info.cllr_offset = cllr_offset;
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	60fb      	str	r3, [r7, #12]
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	461a      	mov	r2, r3
 800311e:	2100      	movs	r1, #0
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fc75 	bl	8003a10 <DMA_List_FindNode>

    /* Check if queue is circular */
    if (pQList->FirstCircularNode != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_DMAEx_List_InsertNode_Tail+0xba>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003138:	4013      	ands	r3, r2
 800313a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	4319      	orrs	r1, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800314c:	4013      	ands	r3, r2
 800314e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4610      	mov	r0, r2
 8003154:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8003156:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)node_info.currentnode_addr)->LinkRegisters[cllr_offset] =
 8003158:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  /* Increment queue node number */
  pQList->NodeNumber++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3728      	adds	r7, #40	; 0x28
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_DMAEx_List_SetCircularModeConfig>:
  *                              registers configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularModeConfig(DMA_QListTypeDef *const pQList,
                                                       DMA_NodeTypeDef *const pFirstCircularNode)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the first circular node parameters */
  if ((pQList == NULL) || (pFirstCircularNode == NULL))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_DMAEx_List_SetCircularModeConfig+0x16>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_DMAEx_List_SetCircularModeConfig+0x1a>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e05c      	b.n	8003250 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <HAL_DMAEx_List_SetCircularModeConfig+0x2c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2202      	movs	r2, #2
 80031a2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e053      	b.n	8003250 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <HAL_DMAEx_List_SetCircularModeConfig+0x4c>
  {
    if (pQList->FirstCircularNode == pFirstCircularNode)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d101      	bne.n	80031be <HAL_DMAEx_List_SetCircularModeConfig+0x42>
    {
      return HAL_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e048      	b.n	8003250 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2204      	movs	r2, #4
 80031c2:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e043      	b.n	8003250 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d104      	bne.n	80031da <HAL_DMAEx_List_SetCircularModeConfig+0x5e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2204      	movs	r2, #4
 80031d4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e03a      	b.n	8003250 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pFirstCircularNode, &cllr_mask, &cllr_offset);
 80031e6:	f107 0220 	add.w	r2, r7, #32
 80031ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ee:	4619      	mov	r1, r3
 80031f0:	6838      	ldr	r0, [r7, #0]
 80031f2:	f000 fbdd 	bl	80039b0 <DMA_List_GetCLLRNodeInfo>

  /* Find the first circular node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	60fb      	str	r3, [r7, #12]
  if (DMA_List_FindNode(pQList, pFirstCircularNode, &node_info) == 0U)
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	461a      	mov	r2, r3
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fc04 	bl	8003a10 <DMA_List_FindNode>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11c      	bne.n	8003248 <HAL_DMAEx_List_SetCircularModeConfig+0xcc>
  {
    /* Find the last queue node and get its position in selected queue */
    (void)DMA_List_FindNode(pQList, NULL, &node_info);
 800320e:	f107 030c 	add.w	r3, r7, #12
 8003212:	461a      	mov	r2, r3
 8003214:	2100      	movs	r1, #0
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fbfa 	bl	8003a10 <DMA_List_FindNode>

    /* Set circular mode */
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003222:	4013      	ands	r3, r2
 8003224:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4610      	mov	r0, r2
 800322a:	6a3a      	ldr	r2, [r7, #32]
      ((uint32_t)pFirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800322c:	430b      	orrs	r3, r1
    ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800322e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    /* Update first circular node in queue */
    pQList->FirstCircularNode = pFirstCircularNode;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	605a      	str	r2, [r3, #4]

    return HAL_ERROR;
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e003      	b.n	8003250 <HAL_DMAEx_List_SetCircularModeConfig+0xd4>
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2206      	movs	r2, #6
 800324c:	611a      	str	r2, [r3, #16]
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
}
 8003250:	4618      	mov	r0, r3
 8003252:	3728      	adds	r7, #40	; 0x28
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_DMAEx_List_LinkQ+0x16>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e072      	b.n	8003358 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003278:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d002      	beq.n	800328c <HAL_DMAEx_List_LinkQ+0x34>
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	2b05      	cmp	r3, #5
 800328a:	d108      	bne.n	800329e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e05c      	b.n	8003358 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	7b1b      	ldrb	r3, [r3, #12]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d104      	bne.n	80032b2 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2201      	movs	r2, #1
 80032ac:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e052      	b.n	8003358 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2b      	ldr	r2, [pc, #172]	; (8003364 <HAL_DMAEx_List_LinkQ+0x10c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <HAL_DMAEx_List_LinkQ+0xaa>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <HAL_DMAEx_List_LinkQ+0x110>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d01d      	beq.n	8003302 <HAL_DMAEx_List_LinkQ+0xaa>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a28      	ldr	r2, [pc, #160]	; (800336c <HAL_DMAEx_List_LinkQ+0x114>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d018      	beq.n	8003302 <HAL_DMAEx_List_LinkQ+0xaa>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a26      	ldr	r2, [pc, #152]	; (8003370 <HAL_DMAEx_List_LinkQ+0x118>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_DMAEx_List_LinkQ+0xaa>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a25      	ldr	r2, [pc, #148]	; (8003374 <HAL_DMAEx_List_LinkQ+0x11c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00e      	beq.n	8003302 <HAL_DMAEx_List_LinkQ+0xaa>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a23      	ldr	r2, [pc, #140]	; (8003378 <HAL_DMAEx_List_LinkQ+0x120>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_DMAEx_List_LinkQ+0xaa>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_DMAEx_List_LinkQ+0x124>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_DMAEx_List_LinkQ+0xaa>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a20      	ldr	r2, [pc, #128]	; (8003380 <HAL_DMAEx_List_LinkQ+0x128>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_DMAEx_List_LinkQ+0xae>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_DMAEx_List_LinkQ+0xb0>
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8003316:	2b00      	cmp	r3, #0
 8003318:	d004      	beq.n	8003324 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2203      	movs	r2, #3
 800331e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e019      	b.n	8003358 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003328:	2b81      	cmp	r3, #129	; 0x81
 800332a:	d108      	bne.n	800333e <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2204      	movs	r2, #4
 8003338:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e00c      	b.n	8003358 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2204      	movs	r2, #4
 800334a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e003      	b.n	8003358 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40020650 	.word	0x40020650
 8003368:	50020650 	.word	0x50020650
 800336c:	400206d0 	.word	0x400206d0
 8003370:	500206d0 	.word	0x500206d0
 8003374:	40020750 	.word	0x40020750
 8003378:	50020750 	.word	0x50020750
 800337c:	400207d0 	.word	0x400207d0
 8003380:	500207d0 	.word	0x500207d0

08003384 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a85      	ldr	r2, [pc, #532]	; (80035b4 <DMA_List_Init+0x230>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	f000 80a0 	beq.w	80034e4 <DMA_List_Init+0x160>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a83      	ldr	r2, [pc, #524]	; (80035b8 <DMA_List_Init+0x234>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	f000 809a 	beq.w	80034e4 <DMA_List_Init+0x160>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a81      	ldr	r2, [pc, #516]	; (80035bc <DMA_List_Init+0x238>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	f000 8094 	beq.w	80034e4 <DMA_List_Init+0x160>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7f      	ldr	r2, [pc, #508]	; (80035c0 <DMA_List_Init+0x23c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f000 808e 	beq.w	80034e4 <DMA_List_Init+0x160>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a7d      	ldr	r2, [pc, #500]	; (80035c4 <DMA_List_Init+0x240>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	f000 8088 	beq.w	80034e4 <DMA_List_Init+0x160>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7b      	ldr	r2, [pc, #492]	; (80035c8 <DMA_List_Init+0x244>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	f000 8082 	beq.w	80034e4 <DMA_List_Init+0x160>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a79      	ldr	r2, [pc, #484]	; (80035cc <DMA_List_Init+0x248>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d07c      	beq.n	80034e4 <DMA_List_Init+0x160>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a78      	ldr	r2, [pc, #480]	; (80035d0 <DMA_List_Init+0x24c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d077      	beq.n	80034e4 <DMA_List_Init+0x160>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a76      	ldr	r2, [pc, #472]	; (80035d4 <DMA_List_Init+0x250>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d072      	beq.n	80034e4 <DMA_List_Init+0x160>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a75      	ldr	r2, [pc, #468]	; (80035d8 <DMA_List_Init+0x254>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d06d      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a73      	ldr	r2, [pc, #460]	; (80035dc <DMA_List_Init+0x258>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d068      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a72      	ldr	r2, [pc, #456]	; (80035e0 <DMA_List_Init+0x25c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d063      	beq.n	80034e4 <DMA_List_Init+0x160>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a70      	ldr	r2, [pc, #448]	; (80035e4 <DMA_List_Init+0x260>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d05e      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	; (80035e8 <DMA_List_Init+0x264>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d059      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6d      	ldr	r2, [pc, #436]	; (80035ec <DMA_List_Init+0x268>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d054      	beq.n	80034e4 <DMA_List_Init+0x160>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6c      	ldr	r2, [pc, #432]	; (80035f0 <DMA_List_Init+0x26c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d04f      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6a      	ldr	r2, [pc, #424]	; (80035f4 <DMA_List_Init+0x270>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d04a      	beq.n	80034e4 <DMA_List_Init+0x160>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a69      	ldr	r2, [pc, #420]	; (80035f8 <DMA_List_Init+0x274>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d045      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a67      	ldr	r2, [pc, #412]	; (80035fc <DMA_List_Init+0x278>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d040      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a66      	ldr	r2, [pc, #408]	; (8003600 <DMA_List_Init+0x27c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d03b      	beq.n	80034e4 <DMA_List_Init+0x160>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a64      	ldr	r2, [pc, #400]	; (8003604 <DMA_List_Init+0x280>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d036      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a63      	ldr	r2, [pc, #396]	; (8003608 <DMA_List_Init+0x284>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d031      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a61      	ldr	r2, [pc, #388]	; (800360c <DMA_List_Init+0x288>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02c      	beq.n	80034e4 <DMA_List_Init+0x160>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a60      	ldr	r2, [pc, #384]	; (8003610 <DMA_List_Init+0x28c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d027      	beq.n	80034e4 <DMA_List_Init+0x160>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a5e      	ldr	r2, [pc, #376]	; (8003614 <DMA_List_Init+0x290>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d022      	beq.n	80034e4 <DMA_List_Init+0x160>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5d      	ldr	r2, [pc, #372]	; (8003618 <DMA_List_Init+0x294>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01d      	beq.n	80034e4 <DMA_List_Init+0x160>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5b      	ldr	r2, [pc, #364]	; (800361c <DMA_List_Init+0x298>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d018      	beq.n	80034e4 <DMA_List_Init+0x160>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5a      	ldr	r2, [pc, #360]	; (8003620 <DMA_List_Init+0x29c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <DMA_List_Init+0x160>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a58      	ldr	r2, [pc, #352]	; (8003624 <DMA_List_Init+0x2a0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <DMA_List_Init+0x160>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a57      	ldr	r2, [pc, #348]	; (8003628 <DMA_List_Init+0x2a4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d009      	beq.n	80034e4 <DMA_List_Init+0x160>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a55      	ldr	r2, [pc, #340]	; (800362c <DMA_List_Init+0x2a8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <DMA_List_Init+0x160>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a54      	ldr	r2, [pc, #336]	; (8003630 <DMA_List_Init+0x2ac>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <DMA_List_Init+0x164>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <DMA_List_Init+0x166>
 80034e8:	2300      	movs	r3, #0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d004      	beq.n	80034f8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	430a      	orrs	r2, r1
 800350a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800351c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2200      	movs	r2, #0
 8003524:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2200      	movs	r2, #0
 8003534:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a36      	ldr	r2, [pc, #216]	; (8003614 <DMA_List_Init+0x290>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d022      	beq.n	8003586 <DMA_List_Init+0x202>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a34      	ldr	r2, [pc, #208]	; (8003618 <DMA_List_Init+0x294>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01d      	beq.n	8003586 <DMA_List_Init+0x202>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a33      	ldr	r2, [pc, #204]	; (800361c <DMA_List_Init+0x298>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <DMA_List_Init+0x202>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a31      	ldr	r2, [pc, #196]	; (8003620 <DMA_List_Init+0x29c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <DMA_List_Init+0x202>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a30      	ldr	r2, [pc, #192]	; (8003624 <DMA_List_Init+0x2a0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <DMA_List_Init+0x202>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2e      	ldr	r2, [pc, #184]	; (8003628 <DMA_List_Init+0x2a4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <DMA_List_Init+0x202>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a2d      	ldr	r2, [pc, #180]	; (800362c <DMA_List_Init+0x2a8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <DMA_List_Init+0x202>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a2b      	ldr	r2, [pc, #172]	; (8003630 <DMA_List_Init+0x2ac>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <DMA_List_Init+0x206>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <DMA_List_Init+0x208>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2200      	movs	r2, #0
 8003596:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40020050 	.word	0x40020050
 80035b8:	50020050 	.word	0x50020050
 80035bc:	400200d0 	.word	0x400200d0
 80035c0:	500200d0 	.word	0x500200d0
 80035c4:	40020150 	.word	0x40020150
 80035c8:	50020150 	.word	0x50020150
 80035cc:	400201d0 	.word	0x400201d0
 80035d0:	500201d0 	.word	0x500201d0
 80035d4:	40020250 	.word	0x40020250
 80035d8:	50020250 	.word	0x50020250
 80035dc:	400202d0 	.word	0x400202d0
 80035e0:	500202d0 	.word	0x500202d0
 80035e4:	40020350 	.word	0x40020350
 80035e8:	50020350 	.word	0x50020350
 80035ec:	400203d0 	.word	0x400203d0
 80035f0:	500203d0 	.word	0x500203d0
 80035f4:	40020450 	.word	0x40020450
 80035f8:	50020450 	.word	0x50020450
 80035fc:	400204d0 	.word	0x400204d0
 8003600:	500204d0 	.word	0x500204d0
 8003604:	40020550 	.word	0x40020550
 8003608:	50020550 	.word	0x50020550
 800360c:	400205d0 	.word	0x400205d0
 8003610:	500205d0 	.word	0x500205d0
 8003614:	40020650 	.word	0x40020650
 8003618:	50020650 	.word	0x50020650
 800361c:	400206d0 	.word	0x400206d0
 8003620:	500206d0 	.word	0x500206d0
 8003624:	40020750 	.word	0x40020750
 8003628:	50020750 	.word	0x50020750
 800362c:	400207d0 	.word	0x400207d0
 8003630:	500207d0 	.word	0x500207d0

08003634 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8003646:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800364c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8003652:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8003658:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d017      	beq.n	800369a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	051b      	lsls	r3, r3, #20
 8003680:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8003684:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	3b01      	subs	r3, #1
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8003692:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8003694:	431a      	orrs	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	f240 237f 	movw	r3, #639	; 0x27f
 80036a6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80036a8:	431a      	orrs	r2, r3
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b6:	d10c      	bne.n	80036d2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d011      	beq.n	80036e8 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	e00a      	b.n	80036e8 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036da:	d105      	bne.n	80036e8 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00f      	beq.n	8003710 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8003708:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800370a:	431a      	orrs	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003714:	b29a      	uxth	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04e      	beq.n	80037c4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372e:	3b01      	subs	r3, #1
 8003730:	0419      	lsls	r1, r3, #16
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <DMA_List_BuildNode+0x29c>)
 8003734:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8003736:	431a      	orrs	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	2b00      	cmp	r3, #0
 8003742:	da06      	bge.n	8003752 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e005      	b.n	800375e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003762:	2b00      	cmp	r3, #0
 8003764:	da06      	bge.n	8003774 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	e005      	b.n	8003780 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	2b00      	cmp	r3, #0
 8003786:	da06      	bge.n	8003796 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	e005      	b.n	80037a2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	da06      	bge.n	80037b8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	e005      	b.n	80037c4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d059      	beq.n	8003894 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da09      	bge.n	80037fc <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	425b      	negs	r3, r3
 80037ee:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	615a      	str	r2, [r3, #20]
 80037fa:	e005      	b.n	8003808 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003800:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380c:	2b00      	cmp	r3, #0
 800380e:	da0d      	bge.n	800382c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	425b      	negs	r3, r3
 8003816:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	0419      	lsls	r1, r3, #16
 8003820:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <DMA_List_BuildNode+0x2a0>)
 8003822:	400b      	ands	r3, r1
 8003824:	431a      	orrs	r2, r3
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	615a      	str	r2, [r3, #20]
 800382a:	e009      	b.n	8003840 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003834:	0419      	lsls	r1, r3, #16
 8003836:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <DMA_List_BuildNode+0x2a0>)
 8003838:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800383a:	431a      	orrs	r2, r3
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	2b00      	cmp	r3, #0
 8003846:	da08      	bge.n	800385a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	425b      	negs	r3, r3
 800384e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	b29a      	uxth	r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	619a      	str	r2, [r3, #24]
 8003858:	e004      	b.n	8003864 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	2b00      	cmp	r3, #0
 800386a:	da0b      	bge.n	8003884 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	425b      	negs	r3, r3
 8003872:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800387c:	431a      	orrs	r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	619a      	str	r2, [r3, #24]
 8003882:	e007      	b.n	8003894 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800388e:	431a      	orrs	r2, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d006      	beq.n	80038b6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80038b4:	e005      	b.n	80038c2 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	621a      	str	r2, [r3, #32]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	07ff0000 	.word	0x07ff0000
 80038d4:	1fff0000 	.word	0x1fff0000

080038d8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	0c1b      	lsrs	r3, r3, #16
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e00a      	b.n	800391a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e004      	b.n	800391a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	429a      	cmp	r2, r3
 8003924:	d001      	beq.n	800392a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d004      	beq.n	8003958 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e00e      	b.n	8003976 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e006      	b.n	8003976 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8003988:	2302      	movs	r3, #2
 800398a:	e00b      	b.n	80039a4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d007      	beq.n	80039a2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 800399e:	2303      	movs	r3, #3
 80039a0:	e000      	b.n	80039a4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00c      	beq.n	80039e2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <DMA_List_GetCLLRNodeInfo+0x58>)
 80039d2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00f      	beq.n	80039fa <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2207      	movs	r2, #7
 80039de:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80039e0:	e00b      	b.n	80039fa <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <DMA_List_GetCLLRNodeInfo+0x5c>)
 80039ec:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2205      	movs	r2, #5
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	fe010000 	.word	0xfe010000
 8003a0c:	f8010000 	.word	0xf8010000

08003a10 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d142      	bne.n	8003aba <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8003a34:	e01d      	b.n	8003a72 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d107      	bne.n	8003a4c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e00f      	b.n	8003a6c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003a64:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003a68:	4013      	ands	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d3dc      	bcc.n	8003a36 <DMA_List_FindNode+0x26>
 8003a7c:	e029      	b.n	8003ad2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	e00f      	b.n	8003ab4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8003aac:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d206      	bcs.n	8003ad2 <DMA_List_FindNode+0xc2>
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003aca:	4013      	ands	r3, r2
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d1d5      	bne.n	8003a7e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8003ade:	4013      	ands	r3, r2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <DMA_List_FindNode+0xda>
    {
      return 1U;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e02b      	b.n	8003b42 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0c1b      	lsrs	r3, r3, #16
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0c1b      	lsrs	r3, r3, #16
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	461a      	mov	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00f      	beq.n	8003b40 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	461a      	mov	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8003b30:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0c1b      	lsrs	r3, r3, #16
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3724      	adds	r7, #36	; 0x24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	; 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b62:	e1ba      	b.n	8003eda <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2101      	movs	r1, #1
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 81aa 	beq.w	8003ed4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a55      	ldr	r2, [pc, #340]	; (8003cd8 <HAL_GPIO_Init+0x188>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d15d      	bne.n	8003c44 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8003b8e:	2201      	movs	r2, #1
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0201 	and.w	r2, r3, #1
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003bb8:	4a48      	ldr	r2, [pc, #288]	; (8003cdc <HAL_GPIO_Init+0x18c>)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bc0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003bc2:	4a46      	ldr	r2, [pc, #280]	; (8003cdc <HAL_GPIO_Init+0x18c>)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	08da      	lsrs	r2, r3, #3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bda:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	220f      	movs	r2, #15
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	220b      	movs	r2, #11
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	08da      	lsrs	r2, r3, #3
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	3208      	adds	r2, #8
 8003c0e:	69f9      	ldr	r1, [r7, #28]
 8003c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2202      	movs	r2, #2
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e067      	b.n	8003d14 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x104>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b12      	cmp	r3, #18
 8003c52:	d145      	bne.n	8003ce0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	08da      	lsrs	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3208      	adds	r2, #8
 8003c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	2203      	movs	r2, #3
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0203 	and.w	r2, r3, #3
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e01e      	b.n	8003d14 <HAL_GPIO_Init+0x1c4>
 8003cd6:	bf00      	nop
 8003cd8:	46020000 	.word	0x46020000
 8003cdc:	0800c9b4 	.word	0x0800c9b4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 0203 	and.w	r2, r3, #3
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d00b      	beq.n	8003d34 <HAL_GPIO_Init+0x1e4>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d007      	beq.n	8003d34 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d28:	2b11      	cmp	r3, #17
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b12      	cmp	r3, #18
 8003d32:	d130      	bne.n	8003d96 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43db      	mvns	r3, r3
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	4013      	ands	r3, r2
 8003d78:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 0201 	and.w	r2, r3, #1
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d017      	beq.n	8003dce <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	2203      	movs	r2, #3
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	4013      	ands	r3, r2
 8003db4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d07c      	beq.n	8003ed4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003dda:	4a47      	ldr	r2, [pc, #284]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3318      	adds	r3, #24
 8003de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	220f      	movs	r2, #15
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	0a9a      	lsrs	r2, r3, #10
 8003e02:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <HAL_GPIO_Init+0x3ac>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	f002 0203 	and.w	r2, r2, #3
 8003e0c:	00d2      	lsls	r2, r2, #3
 8003e0e:	4093      	lsls	r3, r2
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003e16:	4938      	ldr	r1, [pc, #224]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	3318      	adds	r3, #24
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003e24:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003e40:	69fa      	ldr	r2, [r7, #28]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003e48:	4a2b      	ldr	r2, [pc, #172]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003e72:	4a21      	ldr	r2, [pc, #132]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003e78:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e7e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003e9e:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <HAL_GPIO_Init+0x3a8>)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f ae3d 	bne.w	8003b64 <HAL_GPIO_Init+0x14>
  }
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	3724      	adds	r7, #36	; 0x24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	46022000 	.word	0x46022000
 8003efc:	002f7f7f 	.word	0x002f7f7f

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f42:	887a      	ldrh	r2, [r7, #2]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4013      	ands	r3, r2
 8003f48:	041a      	lsls	r2, r3, #16
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43d9      	mvns	r1, r3
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	400b      	ands	r3, r1
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	619a      	str	r2, [r3, #24]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e081      	b.n	800407a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fb7e 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	e006      	b.n	8003fec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d104      	bne.n	8003ffe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800400c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	461a      	mov	r2, r3
 8004090:	460b      	mov	r3, r1
 8004092:	817b      	strh	r3, [r7, #10]
 8004094:	4613      	mov	r3, r2
 8004096:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	f040 80da 	bne.w	800425a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_I2C_Master_Transmit+0x30>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0d3      	b.n	800425c <HAL_I2C_Master_Transmit+0x1d8>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040bc:	f7fd fd78 	bl	8001bb0 <HAL_GetTick>
 80040c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2319      	movs	r3, #25
 80040c8:	2201      	movs	r2, #1
 80040ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f8f0 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0be      	b.n	800425c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2221      	movs	r2, #33	; 0x21
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2210      	movs	r2, #16
 80040ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	893a      	ldrh	r2, [r7, #8]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2bff      	cmp	r3, #255	; 0xff
 800410e:	d90e      	bls.n	800412e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	22ff      	movs	r2, #255	; 0xff
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	b2da      	uxtb	r2, r3
 800411c:	8979      	ldrh	r1, [r7, #10]
 800411e:	4b51      	ldr	r3, [pc, #324]	; (8004264 <HAL_I2C_Master_Transmit+0x1e0>)
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fa6c 	bl	8004604 <I2C_TransferConfig>
 800412c:	e06c      	b.n	8004208 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	b2da      	uxtb	r2, r3
 800413e:	8979      	ldrh	r1, [r7, #10]
 8004140:	4b48      	ldr	r3, [pc, #288]	; (8004264 <HAL_I2C_Master_Transmit+0x1e0>)
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fa5b 	bl	8004604 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800414e:	e05b      	b.n	8004208 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f8ed 	bl	8004334 <I2C_WaitOnTXISFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e07b      	b.n	800425c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d034      	beq.n	8004208 <HAL_I2C_Master_Transmit+0x184>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d130      	bne.n	8004208 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f87f 	bl	80042b4 <I2C_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e04d      	b.n	800425c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2bff      	cmp	r3, #255	; 0xff
 80041c8:	d90e      	bls.n	80041e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	8979      	ldrh	r1, [r7, #10]
 80041d8:	2300      	movs	r3, #0
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fa0f 	bl	8004604 <I2C_TransferConfig>
 80041e6:	e00f      	b.n	8004208 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	8979      	ldrh	r1, [r7, #10]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f9fe 	bl	8004604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d19e      	bne.n	8004150 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	6a39      	ldr	r1, [r7, #32]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f8cc 	bl	80043b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e01a      	b.n	800425c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2220      	movs	r2, #32
 800422c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6859      	ldr	r1, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_I2C_Master_Transmit+0x1e4>)
 800423a:	400b      	ands	r3, r1
 800423c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	e000      	b.n	800425c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800425a:	2302      	movs	r3, #2
  }
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	80002000 	.word	0x80002000
 8004268:	fe00e800 	.word	0xfe00e800

0800426c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	d103      	bne.n	800428a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d007      	beq.n	80042a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	619a      	str	r2, [r3, #24]
  }
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	e022      	b.n	800430c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d01e      	beq.n	800430c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ce:	f7fd fc6f 	bl	8001bb0 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d113      	bne.n	800430c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e00f      	b.n	800432c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	429a      	cmp	r2, r3
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	429a      	cmp	r2, r3
 8004328:	d0cd      	beq.n	80042c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004340:	e02c      	b.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 f870 	bl	800442c <I2C_IsErrorOccurred>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e02a      	b.n	80043ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d01e      	beq.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fd fc27 	bl	8001bb0 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d113      	bne.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e007      	b.n	80043ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d1cb      	bne.n	8004342 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043c0:	e028      	b.n	8004414 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f830 	bl	800442c <I2C_IsErrorOccurred>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e026      	b.n	8004424 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fd fbeb 	bl	8001bb0 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d113      	bne.n	8004414 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	f043 0220 	orr.w	r2, r3, #32
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e007      	b.n	8004424 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b20      	cmp	r3, #32
 8004420:	d1cf      	bne.n	80043c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d075      	beq.n	8004544 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004460:	e056      	b.n	8004510 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d052      	beq.n	8004510 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fd fba1 	bl	8001bb0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_IsErrorOccurred+0x54>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d147      	bne.n	8004510 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800449e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a2:	d12e      	bne.n	8004502 <I2C_IsErrorOccurred+0xd6>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044aa:	d02a      	beq.n	8004502 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d027      	beq.n	8004502 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044c2:	f7fd fb75 	bl	8001bb0 <HAL_GetTick>
 80044c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c8:	e01b      	b.n	8004502 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044ca:	f7fd fb71 	bl	8001bb0 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b19      	cmp	r3, #25
 80044d6:	d914      	bls.n	8004502 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b20      	cmp	r3, #32
 800450e:	d1dc      	bne.n	80044ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d003      	beq.n	8004526 <I2C_IsErrorOccurred+0xfa>
 800451e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004522:	2b00      	cmp	r3, #0
 8004524:	d09d      	beq.n	8004462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2220      	movs	r2, #32
 8004534:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f043 0304 	orr.w	r3, r3, #4
 800453c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f043 0308 	orr.w	r3, r3, #8
 800457e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00b      	beq.n	80045b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80045b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01c      	beq.n	80045f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff fe56 	bl	800426c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <I2C_IsErrorOccurred+0x1d4>)
 80045cc:	400b      	ands	r3, r1
 80045ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80045f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3728      	adds	r7, #40	; 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	fe00e800 	.word	0xfe00e800

08004604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	4613      	mov	r3, r2
 8004614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800461c:	7a7b      	ldrb	r3, [r7, #9]
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004624:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	4313      	orrs	r3, r2
 800462e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004632:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	0d5b      	lsrs	r3, r3, #21
 800463e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <I2C_TransferConfig+0x60>)
 8004644:	430b      	orrs	r3, r1
 8004646:	43db      	mvns	r3, r3
 8004648:	ea02 0103 	and.w	r1, r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	03ff63ff 	.word	0x03ff63ff

08004668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b20      	cmp	r3, #32
 800467c:	d138      	bne.n	80046f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004688:	2302      	movs	r3, #2
 800468a:	e032      	b.n	80046f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2224      	movs	r2, #36	; 0x24
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6819      	ldr	r1, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046fe:	b480      	push	{r7}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b20      	cmp	r3, #32
 8004712:	d139      	bne.n	8004788 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800471e:	2302      	movs	r3, #2
 8004720:	e033      	b.n	800478a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2224      	movs	r2, #36	; 0x24
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0201 	bic.w	r2, r2, #1
 8004740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004750:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e000      	b.n	800478a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004788:	2302      	movs	r3, #2
  }
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e007      	b.n	80047c6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 0204 	bic.w	r2, r3, #4
 80047be:	4905      	ldr	r1, [pc, #20]	; (80047d4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]
  }

  return status;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40030400 	.word	0x40030400

080047d8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_ICACHE_Enable+0x1c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_ICACHE_Enable+0x1c>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	40030400 	.word	0x40030400

080047f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004800:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004808:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	429a      	cmp	r2, r3
 8004810:	d101      	bne.n	8004816 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	e057      	b.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d90a      	bls.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800481e:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4313      	orrs	r3, r2
 800482a:	4a2a      	ldr	r2, [pc, #168]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800482c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004830:	60d3      	str	r3, [r2, #12]
 8004832:	e007      	b.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004834:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800483c:	4925      	ldr	r1, [pc, #148]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4313      	orrs	r3, r2
 8004842:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a24      	ldr	r2, [pc, #144]	; (80048dc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	099b      	lsrs	r3, r3, #6
 8004850:	2232      	movs	r2, #50	; 0x32
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	4a21      	ldr	r2, [pc, #132]	; (80048dc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	099b      	lsrs	r3, r3, #6
 800485e:	3301      	adds	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004862:	e002      	b.n	800486a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800486a:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_PWREx_ControlVoltageScaling+0x84>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1f3      	bne.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01b      	beq.n	80048ba <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a15      	ldr	r2, [pc, #84]	; (80048dc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004888:	fba2 2303 	umull	r2, r3, r2, r3
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	2232      	movs	r2, #50	; 0x32
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	4a11      	ldr	r2, [pc, #68]	; (80048dc <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	099b      	lsrs	r3, r3, #6
 800489c:	3301      	adds	r3, #1
 800489e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048a0:	e002      	b.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <HAL_PWREx_ControlVoltageScaling+0xc2>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f3      	bne.n	80048a2 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e000      	b.n	80048c6 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	46020800 	.word	0x46020800
 80048d8:	20000018 	.word	0x20000018
 80048dc:	10624dd3 	.word	0x10624dd3

080048e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	46020800 	.word	0x46020800

080048fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800490c:	bf00      	nop
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	46020800 	.word	0x46020800

0800491c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	; 0x38
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	f000 bec3 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004936:	4b9c      	ldr	r3, [pc, #624]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004940:	4b99      	ldr	r3, [pc, #612]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8172 	beq.w	8004c3c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_RCC_OscConfig+0x52>
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	2b0c      	cmp	r3, #12
 8004962:	f040 80e4 	bne.w	8004b2e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	2b01      	cmp	r3, #1
 800496a:	f040 80e0 	bne.w	8004b2e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800496e:	4b8e      	ldr	r3, [pc, #568]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b00      	cmp	r3, #0
 8004978:	d006      	beq.n	8004988 <HAL_RCC_OscConfig+0x6c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f000 be9a 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800498c:	4b86      	ldr	r3, [pc, #536]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <HAL_RCC_OscConfig+0x86>
 8004998:	4b83      	ldr	r3, [pc, #524]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049a0:	e005      	b.n	80049ae <HAL_RCC_OscConfig+0x92>
 80049a2:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 80049a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d255      	bcs.n	8004a5e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 fa0b 	bl	8005dd8 <RCC_SetFlashLatencyFromMSIRange>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f000 be77 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80049ce:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	4a75      	ldr	r2, [pc, #468]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 80049d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049d8:	6093      	str	r3, [r2, #8]
 80049da:	4b73      	ldr	r3, [pc, #460]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	4970      	ldr	r1, [pc, #448]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80049f4:	d309      	bcc.n	8004a0a <HAL_RCC_OscConfig+0xee>
 80049f6:	4b6c      	ldr	r3, [pc, #432]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f023 021f 	bic.w	r2, r3, #31
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	4969      	ldr	r1, [pc, #420]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60cb      	str	r3, [r1, #12]
 8004a08:	e07e      	b.n	8004b08 <HAL_RCC_OscConfig+0x1ec>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	da0a      	bge.n	8004a28 <HAL_RCC_OscConfig+0x10c>
 8004a12:	4b65      	ldr	r3, [pc, #404]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	015b      	lsls	r3, r3, #5
 8004a20:	4961      	ldr	r1, [pc, #388]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60cb      	str	r3, [r1, #12]
 8004a26:	e06f      	b.n	8004b08 <HAL_RCC_OscConfig+0x1ec>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a30:	d30a      	bcc.n	8004a48 <HAL_RCC_OscConfig+0x12c>
 8004a32:	4b5d      	ldr	r3, [pc, #372]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	029b      	lsls	r3, r3, #10
 8004a40:	4959      	ldr	r1, [pc, #356]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60cb      	str	r3, [r1, #12]
 8004a46:	e05f      	b.n	8004b08 <HAL_RCC_OscConfig+0x1ec>
 8004a48:	4b57      	ldr	r3, [pc, #348]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	03db      	lsls	r3, r3, #15
 8004a56:	4954      	ldr	r1, [pc, #336]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60cb      	str	r3, [r1, #12]
 8004a5c:	e054      	b.n	8004b08 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a5e:	4b52      	ldr	r3, [pc, #328]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	4a51      	ldr	r2, [pc, #324]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a68:	6093      	str	r3, [r2, #8]
 8004a6a:	4b4f      	ldr	r3, [pc, #316]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	494c      	ldr	r1, [pc, #304]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004a84:	d309      	bcc.n	8004a9a <HAL_RCC_OscConfig+0x17e>
 8004a86:	4b48      	ldr	r3, [pc, #288]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f023 021f 	bic.w	r2, r3, #31
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	4945      	ldr	r1, [pc, #276]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60cb      	str	r3, [r1, #12]
 8004a98:	e028      	b.n	8004aec <HAL_RCC_OscConfig+0x1d0>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	da0a      	bge.n	8004ab8 <HAL_RCC_OscConfig+0x19c>
 8004aa2:	4b41      	ldr	r3, [pc, #260]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	015b      	lsls	r3, r3, #5
 8004ab0:	493d      	ldr	r1, [pc, #244]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60cb      	str	r3, [r1, #12]
 8004ab6:	e019      	b.n	8004aec <HAL_RCC_OscConfig+0x1d0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d30a      	bcc.n	8004ad8 <HAL_RCC_OscConfig+0x1bc>
 8004ac2:	4b39      	ldr	r3, [pc, #228]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	029b      	lsls	r3, r3, #10
 8004ad0:	4935      	ldr	r1, [pc, #212]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60cb      	str	r3, [r1, #12]
 8004ad6:	e009      	b.n	8004aec <HAL_RCC_OscConfig+0x1d0>
 8004ad8:	4b33      	ldr	r3, [pc, #204]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	03db      	lsls	r3, r3, #15
 8004ae6:	4930      	ldr	r1, [pc, #192]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f96e 	bl	8005dd8 <RCC_SetFlashLatencyFromMSIRange>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f000 bdda 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004b08:	f001 f910 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b0c:	4b27      	ldr	r3, [pc, #156]	; (8004bac <HAL_RCC_OscConfig+0x290>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fd f803 	bl	8001b1c <HAL_InitTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 808a 	beq.w	8004c3a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b2a:	f000 bdc7 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d066      	beq.n	8004c04 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004b36:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b42:	f7fd f835 	bl	8001bb0 <HAL_GetTick>
 8004b46:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b48:	e009      	b.n	8004b5e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b4a:	f7fd f831 	bl	8001bb0 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d902      	bls.n	8004b5e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	f000 bdaf 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0ef      	beq.n	8004b4a <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004b70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b74:	6093      	str	r3, [r2, #8]
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	4909      	ldr	r1, [pc, #36]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004b90:	d30e      	bcc.n	8004bb0 <HAL_RCC_OscConfig+0x294>
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f023 021f 	bic.w	r2, r3, #31
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	4902      	ldr	r1, [pc, #8]	; (8004ba8 <HAL_RCC_OscConfig+0x28c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60cb      	str	r3, [r1, #12]
 8004ba4:	e04a      	b.n	8004c3c <HAL_RCC_OscConfig+0x320>
 8004ba6:	bf00      	nop
 8004ba8:	46020c00 	.word	0x46020c00
 8004bac:	2000001c 	.word	0x2000001c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	da0a      	bge.n	8004bce <HAL_RCC_OscConfig+0x2b2>
 8004bb8:	4b9b      	ldr	r3, [pc, #620]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	015b      	lsls	r3, r3, #5
 8004bc6:	4998      	ldr	r1, [pc, #608]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60cb      	str	r3, [r1, #12]
 8004bcc:	e036      	b.n	8004c3c <HAL_RCC_OscConfig+0x320>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd6:	d30a      	bcc.n	8004bee <HAL_RCC_OscConfig+0x2d2>
 8004bd8:	4b93      	ldr	r3, [pc, #588]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	4990      	ldr	r1, [pc, #576]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60cb      	str	r3, [r1, #12]
 8004bec:	e026      	b.n	8004c3c <HAL_RCC_OscConfig+0x320>
 8004bee:	4b8e      	ldr	r3, [pc, #568]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	03db      	lsls	r3, r3, #15
 8004bfc:	498a      	ldr	r1, [pc, #552]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60cb      	str	r3, [r1, #12]
 8004c02:	e01b      	b.n	8004c3c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004c04:	4b88      	ldr	r3, [pc, #544]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a87      	ldr	r2, [pc, #540]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c10:	f7fc ffce 	bl	8001bb0 <HAL_GetTick>
 8004c14:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c16:	e009      	b.n	8004c2c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c18:	f7fc ffca 	bl	8001bb0 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d902      	bls.n	8004c2c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	f000 bd48 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c2c:	4b7e      	ldr	r3, [pc, #504]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ef      	bne.n	8004c18 <HAL_RCC_OscConfig+0x2fc>
 8004c38:	e000      	b.n	8004c3c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8094 	beq.w	8004d72 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_OscConfig+0x340>
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d110      	bne.n	8004c78 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d10d      	bne.n	8004c78 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	4b72      	ldr	r3, [pc, #456]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8083 	beq.w	8004d70 <HAL_RCC_OscConfig+0x454>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d17e      	bne.n	8004d70 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f000 bd22 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d106      	bne.n	8004c90 <HAL_RCC_OscConfig+0x374>
 8004c82:	4b69      	ldr	r3, [pc, #420]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a68      	ldr	r2, [pc, #416]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e041      	b.n	8004d14 <HAL_RCC_OscConfig+0x3f8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c98:	d112      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x3a4>
 8004c9a:	4b63      	ldr	r3, [pc, #396]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a62      	ldr	r2, [pc, #392]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4b60      	ldr	r3, [pc, #384]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a5f      	ldr	r2, [pc, #380]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4b5d      	ldr	r3, [pc, #372]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a5c      	ldr	r2, [pc, #368]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e029      	b.n	8004d14 <HAL_RCC_OscConfig+0x3f8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004cc8:	d112      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x3d4>
 8004cca:	4b57      	ldr	r3, [pc, #348]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a56      	ldr	r2, [pc, #344]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4b54      	ldr	r3, [pc, #336]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a53      	ldr	r2, [pc, #332]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b51      	ldr	r3, [pc, #324]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a50      	ldr	r2, [pc, #320]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e011      	b.n	8004d14 <HAL_RCC_OscConfig+0x3f8>
 8004cf0:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a4c      	ldr	r2, [pc, #304]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a49      	ldr	r2, [pc, #292]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b47      	ldr	r3, [pc, #284]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a46      	ldr	r2, [pc, #280]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004d0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d014      	beq.n	8004d46 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004d1c:	f7fc ff48 	bl	8001bb0 <HAL_GetTick>
 8004d20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d22:	e009      	b.n	8004d38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fc ff44 	bl	8001bb0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d902      	bls.n	8004d38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	f000 bcc2 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d38:	4b3b      	ldr	r3, [pc, #236]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ef      	beq.n	8004d24 <HAL_RCC_OscConfig+0x408>
 8004d44:	e015      	b.n	8004d72 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004d46:	f7fc ff33 	bl	8001bb0 <HAL_GetTick>
 8004d4a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d4c:	e009      	b.n	8004d62 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4e:	f7fc ff2f 	bl	8001bb0 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b64      	cmp	r3, #100	; 0x64
 8004d5a:	d902      	bls.n	8004d62 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	f000 bcad 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d62:	4b31      	ldr	r3, [pc, #196]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1ef      	bne.n	8004d4e <HAL_RCC_OscConfig+0x432>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d066      	beq.n	8004e4c <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x474>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d11a      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d117      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d90:	4b25      	ldr	r3, [pc, #148]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d006      	beq.n	8004daa <HAL_RCC_OscConfig+0x48e>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d102      	bne.n	8004daa <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f000 bc89 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004daa:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	491b      	ldr	r1, [pc, #108]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dbe:	e045      	b.n	8004e4c <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d024      	beq.n	8004e12 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004dc8:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a16      	ldr	r2, [pc, #88]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004dd4:	f7fc feec 	bl	8001bb0 <HAL_GetTick>
 8004dd8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dda:	e009      	b.n	8004df0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ddc:	f7fc fee8 	bl	8001bb0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d902      	bls.n	8004df0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	f000 bc66 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ef      	beq.n	8004ddc <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	4907      	ldr	r1, [pc, #28]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	610b      	str	r3, [r1, #16]
 8004e10:	e01c      	b.n	8004e4c <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a04      	ldr	r2, [pc, #16]	; (8004e28 <HAL_RCC_OscConfig+0x50c>)
 8004e18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e1c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e1e:	f7fc fec7 	bl	8001bb0 <HAL_GetTick>
 8004e22:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e24:	e00c      	b.n	8004e40 <HAL_RCC_OscConfig+0x524>
 8004e26:	bf00      	nop
 8004e28:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fc fec0 	bl	8001bb0 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d902      	bls.n	8004e40 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	f000 bc3e 	b.w	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e40:	4baf      	ldr	r3, [pc, #700]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ef      	bne.n	8004e2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80c7 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e60:	4ba7      	ldr	r3, [pc, #668]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d111      	bne.n	8004e92 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	4ba4      	ldr	r3, [pc, #656]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e74:	4aa2      	ldr	r2, [pc, #648]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004e76:	f043 0304 	orr.w	r3, r3, #4
 8004e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e7e:	4ba0      	ldr	r3, [pc, #640]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e92:	4b9c      	ldr	r3, [pc, #624]	; (8005104 <HAL_RCC_OscConfig+0x7e8>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d118      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004e9e:	4b99      	ldr	r3, [pc, #612]	; (8005104 <HAL_RCC_OscConfig+0x7e8>)
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	4a98      	ldr	r2, [pc, #608]	; (8005104 <HAL_RCC_OscConfig+0x7e8>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eaa:	f7fc fe81 	bl	8001bb0 <HAL_GetTick>
 8004eae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb2:	f7fc fe7d 	bl	8001bb0 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e3fb      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ec4:	4b8f      	ldr	r3, [pc, #572]	; (8005104 <HAL_RCC_OscConfig+0x7e8>)
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d05f      	beq.n	8004f98 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004ed8:	4b89      	ldr	r3, [pc, #548]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ede:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d037      	beq.n	8004f5e <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d006      	beq.n	8004f06 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e3da      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004f06:	6a3b      	ldr	r3, [r7, #32]
 8004f08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d01b      	beq.n	8004f48 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f10:	4b7b      	ldr	r3, [pc, #492]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f16:	4a7a      	ldr	r2, [pc, #488]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f18:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004f1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004f20:	f7fc fe46 	bl	8001bb0 <HAL_GetTick>
 8004f24:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f28:	f7fc fe42 	bl	8001bb0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e3c0      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f3a:	4b71      	ldr	r3, [pc, #452]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ef      	bne.n	8004f28 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004f48:	4b6d      	ldr	r3, [pc, #436]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	496a      	ldr	r1, [pc, #424]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004f5e:	4b68      	ldr	r3, [pc, #416]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f64:	4a66      	ldr	r2, [pc, #408]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004f6e:	f7fc fe1f 	bl	8001bb0 <HAL_GetTick>
 8004f72:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f76:	f7fc fe1b 	bl	8001bb0 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e399      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004f88:	4b5d      	ldr	r3, [pc, #372]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0ef      	beq.n	8004f76 <HAL_RCC_OscConfig+0x65a>
 8004f96:	e01b      	b.n	8004fd0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004f98:	4b59      	ldr	r3, [pc, #356]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f9e:	4a58      	ldr	r2, [pc, #352]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004fa0:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004fa4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004fa8:	f7fc fe02 	bl	8001bb0 <HAL_GetTick>
 8004fac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb0:	f7fc fdfe 	bl	8001bb0 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e37c      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004fc2:	4b4f      	ldr	r3, [pc, #316]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ef      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd8:	4b49      	ldr	r3, [pc, #292]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fde:	4a48      	ldr	r2, [pc, #288]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004fe0:	f023 0304 	bic.w	r3, r3, #4
 8004fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8112 	beq.w	800521a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffc:	4b40      	ldr	r3, [pc, #256]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8004ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d111      	bne.n	800502e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 800500c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005010:	4a3b      	ldr	r2, [pc, #236]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8005012:	f043 0304 	orr.w	r3, r3, #4
 8005016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800501a:	4b39      	ldr	r3, [pc, #228]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 800501c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005028:	2301      	movs	r3, #1
 800502a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800502e:	4b35      	ldr	r3, [pc, #212]	; (8005104 <HAL_RCC_OscConfig+0x7e8>)
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d118      	bne.n	800506c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800503a:	4b32      	ldr	r3, [pc, #200]	; (8005104 <HAL_RCC_OscConfig+0x7e8>)
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	4a31      	ldr	r2, [pc, #196]	; (8005104 <HAL_RCC_OscConfig+0x7e8>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005046:	f7fc fdb3 	bl	8001bb0 <HAL_GetTick>
 800504a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800504e:	f7fc fdaf 	bl	8001bb0 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e32d      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005060:	4b28      	ldr	r3, [pc, #160]	; (8005104 <HAL_RCC_OscConfig+0x7e8>)
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01f      	beq.n	80050b8 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8005086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800508a:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 800508c:	f043 0304 	orr.w	r3, r3, #4
 8005090:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 8005096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800509a:	4a19      	ldr	r2, [pc, #100]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050a4:	e018      	b.n	80050d8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 80050a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ac:	4a14      	ldr	r2, [pc, #80]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 80050ae:	f043 0301 	orr.w	r3, r3, #1
 80050b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050b6:	e00f      	b.n	80050d8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050b8:	4b11      	ldr	r3, [pc, #68]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 80050ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050be:	4a10      	ldr	r2, [pc, #64]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 80050ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ce:	4a0c      	ldr	r2, [pc, #48]	; (8005100 <HAL_RCC_OscConfig+0x7e4>)
 80050d0:	f023 0304 	bic.w	r3, r3, #4
 80050d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d058      	beq.n	8005192 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80050e0:	f7fc fd66 	bl	8001bb0 <HAL_GetTick>
 80050e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e6:	e00f      	b.n	8005108 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e8:	f7fc fd62 	bl	8001bb0 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d906      	bls.n	8005108 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e2de      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
 80050fe:	bf00      	nop
 8005100:	46020c00 	.word	0x46020c00
 8005104:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005108:	4b9c      	ldr	r3, [pc, #624]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 800510a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0e8      	beq.n	80050e8 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01b      	beq.n	800515a <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005122:	4b96      	ldr	r3, [pc, #600]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005128:	4a94      	ldr	r2, [pc, #592]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 800512a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005132:	e00a      	b.n	800514a <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005134:	f7fc fd3c 	bl	8001bb0 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005142:	4293      	cmp	r3, r2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e2b8      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800514a:	4b8c      	ldr	r3, [pc, #560]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 800514c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0ed      	beq.n	8005134 <HAL_RCC_OscConfig+0x818>
 8005158:	e053      	b.n	8005202 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800515a:	4b88      	ldr	r3, [pc, #544]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 800515c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005160:	4a86      	ldr	r2, [pc, #536]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005166:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800516a:	e00a      	b.n	8005182 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516c:	f7fc fd20 	bl	8001bb0 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e29c      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005182:	4b7e      	ldr	r3, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ed      	bne.n	800516c <HAL_RCC_OscConfig+0x850>
 8005190:	e037      	b.n	8005202 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005192:	f7fc fd0d 	bl	8001bb0 <HAL_GetTick>
 8005196:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005198:	e00a      	b.n	80051b0 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519a:	f7fc fd09 	bl	8001bb0 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e285      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051b0:	4b72      	ldr	r3, [pc, #456]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80051b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1ed      	bne.n	800519a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80051be:	4b6f      	ldr	r3, [pc, #444]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80051c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80051cc:	4b6b      	ldr	r3, [pc, #428]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80051ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051d2:	4a6a      	ldr	r2, [pc, #424]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80051d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7fc fce7 	bl	8001bb0 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e263      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80051f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ed      	bne.n	80051de <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005202:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005206:	2b01      	cmp	r3, #1
 8005208:	d107      	bne.n	800521a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520a:	4b5c      	ldr	r3, [pc, #368]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 800520c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005210:	4a5a      	ldr	r2, [pc, #360]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005212:	f023 0304 	bic.w	r3, r3, #4
 8005216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d036      	beq.n	8005294 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d019      	beq.n	8005262 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800522e:	4b53      	ldr	r3, [pc, #332]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a52      	ldr	r2, [pc, #328]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005238:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800523a:	f7fc fcb9 	bl	8001bb0 <HAL_GetTick>
 800523e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005242:	f7fc fcb5 	bl	8001bb0 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e233      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005254:	4b49      	ldr	r3, [pc, #292]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x926>
 8005260:	e018      	b.n	8005294 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005262:	4b46      	ldr	r3, [pc, #280]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a45      	ldr	r2, [pc, #276]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800526c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800526e:	f7fc fc9f 	bl	8001bb0 <HAL_GetTick>
 8005272:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005276:	f7fc fc9b 	bl	8001bb0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e219      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005288:	4b3c      	ldr	r3, [pc, #240]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f0      	bne.n	8005276 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b00      	cmp	r3, #0
 800529e:	d036      	beq.n	800530e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d019      	beq.n	80052dc <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80052a8:	4b34      	ldr	r3, [pc, #208]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a33      	ldr	r2, [pc, #204]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80052ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052b4:	f7fc fc7c 	bl	8001bb0 <HAL_GetTick>
 80052b8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80052bc:	f7fc fc78 	bl	8001bb0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e1f6      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80052ce:	4b2b      	ldr	r3, [pc, #172]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0x9a0>
 80052da:	e018      	b.n	800530e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a26      	ldr	r2, [pc, #152]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 80052e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052e8:	f7fc fc62 	bl	8001bb0 <HAL_GetTick>
 80052ec:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80052f0:	f7fc fc5e 	bl	8001bb0 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e1dc      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005302:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d07f      	beq.n	800541a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	2b00      	cmp	r3, #0
 8005320:	d062      	beq.n	80053e8 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005322:	4b16      	ldr	r3, [pc, #88]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	4a15      	ldr	r2, [pc, #84]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005328:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800532c:	6093      	str	r3, [r2, #8]
 800532e:	4b13      	ldr	r3, [pc, #76]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	4910      	ldr	r1, [pc, #64]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 800533c:	4313      	orrs	r3, r2
 800533e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005348:	d309      	bcc.n	800535e <HAL_RCC_OscConfig+0xa42>
 800534a:	4b0c      	ldr	r3, [pc, #48]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f023 021f 	bic.w	r2, r3, #31
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	4909      	ldr	r1, [pc, #36]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005358:	4313      	orrs	r3, r2
 800535a:	60cb      	str	r3, [r1, #12]
 800535c:	e02a      	b.n	80053b4 <HAL_RCC_OscConfig+0xa98>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	da0c      	bge.n	8005380 <HAL_RCC_OscConfig+0xa64>
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	015b      	lsls	r3, r3, #5
 8005374:	4901      	ldr	r1, [pc, #4]	; (800537c <HAL_RCC_OscConfig+0xa60>)
 8005376:	4313      	orrs	r3, r2
 8005378:	60cb      	str	r3, [r1, #12]
 800537a:	e01b      	b.n	80053b4 <HAL_RCC_OscConfig+0xa98>
 800537c:	46020c00 	.word	0x46020c00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005388:	d30a      	bcc.n	80053a0 <HAL_RCC_OscConfig+0xa84>
 800538a:	4ba5      	ldr	r3, [pc, #660]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	029b      	lsls	r3, r3, #10
 8005398:	49a1      	ldr	r1, [pc, #644]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800539a:	4313      	orrs	r3, r2
 800539c:	60cb      	str	r3, [r1, #12]
 800539e:	e009      	b.n	80053b4 <HAL_RCC_OscConfig+0xa98>
 80053a0:	4b9f      	ldr	r3, [pc, #636]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	03db      	lsls	r3, r3, #15
 80053ae:	499c      	ldr	r1, [pc, #624]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80053b4:	4b9a      	ldr	r3, [pc, #616]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a99      	ldr	r2, [pc, #612]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80053ba:	f043 0310 	orr.w	r3, r3, #16
 80053be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053c0:	f7fc fbf6 	bl	8001bb0 <HAL_GetTick>
 80053c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80053c8:	f7fc fbf2 	bl	8001bb0 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e170      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80053da:	4b91      	ldr	r3, [pc, #580]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0xaac>
 80053e6:	e018      	b.n	800541a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80053e8:	4b8d      	ldr	r3, [pc, #564]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a8c      	ldr	r2, [pc, #560]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80053ee:	f023 0310 	bic.w	r3, r3, #16
 80053f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80053f4:	f7fc fbdc 	bl	8001bb0 <HAL_GetTick>
 80053f8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80053fc:	f7fc fbd8 	bl	8001bb0 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e156      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800540e:	4b84      	ldr	r3, [pc, #528]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 814b 	beq.w	80056ba <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800542a:	4b7d      	ldr	r3, [pc, #500]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b0c      	cmp	r3, #12
 8005434:	f000 80fa 	beq.w	800562c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	2b02      	cmp	r3, #2
 800543e:	f040 80cc 	bne.w	80055da <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005442:	4b77      	ldr	r3, [pc, #476]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a76      	ldr	r2, [pc, #472]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800544e:	f7fc fbaf 	bl	8001bb0 <HAL_GetTick>
 8005452:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005454:	e008      	b.n	8005468 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005456:	f7fc fbab 	bl	8001bb0 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d901      	bls.n	8005468 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e129      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005468:	4b6d      	ldr	r3, [pc, #436]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1f0      	bne.n	8005456 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005474:	4b6a      	ldr	r3, [pc, #424]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d111      	bne.n	80054a6 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	4b67      	ldr	r3, [pc, #412]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005488:	4a65      	ldr	r2, [pc, #404]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800548a:	f043 0304 	orr.w	r3, r3, #4
 800548e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005492:	4b63      	ldr	r3, [pc, #396]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80054a6:	4b5f      	ldr	r3, [pc, #380]	; (8005624 <HAL_RCC_OscConfig+0xd08>)
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054b2:	d102      	bne.n	80054ba <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80054b4:	2301      	movs	r3, #1
 80054b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80054ba:	4b5a      	ldr	r3, [pc, #360]	; (8005624 <HAL_RCC_OscConfig+0xd08>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4a59      	ldr	r2, [pc, #356]	; (8005624 <HAL_RCC_OscConfig+0xd08>)
 80054c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80054c6:	4b56      	ldr	r3, [pc, #344]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054da:	3a01      	subs	r2, #1
 80054dc:	0212      	lsls	r2, r2, #8
 80054de:	4311      	orrs	r1, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80054e4:	430a      	orrs	r2, r1
 80054e6:	494e      	ldr	r1, [pc, #312]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	628b      	str	r3, [r1, #40]	; 0x28
 80054ec:	4b4c      	ldr	r3, [pc, #304]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80054ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f0:	4b4d      	ldr	r3, [pc, #308]	; (8005628 <HAL_RCC_OscConfig+0xd0c>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054f8:	3a01      	subs	r2, #1
 80054fa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005502:	3a01      	subs	r2, #1
 8005504:	0252      	lsls	r2, r2, #9
 8005506:	b292      	uxth	r2, r2
 8005508:	4311      	orrs	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800550e:	3a01      	subs	r2, #1
 8005510:	0412      	lsls	r2, r2, #16
 8005512:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005516:	4311      	orrs	r1, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800551c:	3a01      	subs	r2, #1
 800551e:	0612      	lsls	r2, r2, #24
 8005520:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005524:	430a      	orrs	r2, r1
 8005526:	493e      	ldr	r1, [pc, #248]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005528:	4313      	orrs	r3, r2
 800552a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800552c:	4b3c      	ldr	r3, [pc, #240]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005532:	f023 0310 	bic.w	r3, r3, #16
 8005536:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005538:	4b39      	ldr	r3, [pc, #228]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005540:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005548:	00d2      	lsls	r2, r2, #3
 800554a:	4935      	ldr	r1, [pc, #212]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800554c:	4313      	orrs	r3, r2
 800554e:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005550:	4b33      	ldr	r3, [pc, #204]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	4a32      	ldr	r2, [pc, #200]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005556:	f043 0310 	orr.w	r3, r3, #16
 800555a:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800555c:	4b30      	ldr	r3, [pc, #192]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	f023 020c 	bic.w	r2, r3, #12
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	492d      	ldr	r1, [pc, #180]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800556a:	4313      	orrs	r3, r2
 800556c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800556e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005572:	2b01      	cmp	r3, #1
 8005574:	d105      	bne.n	8005582 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005576:	4b2b      	ldr	r3, [pc, #172]	; (8005624 <HAL_RCC_OscConfig+0xd08>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <HAL_RCC_OscConfig+0xd08>)
 800557c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005580:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005582:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800558a:	4b25      	ldr	r3, [pc, #148]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800558c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005590:	4a23      	ldr	r2, [pc, #140]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005592:	f023 0304 	bic.w	r3, r3, #4
 8005596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800559a:	4b21      	ldr	r3, [pc, #132]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	4a20      	ldr	r2, [pc, #128]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80055a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055a4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80055a6:	4b1e      	ldr	r3, [pc, #120]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80055ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055b2:	f7fc fafd 	bl	8001bb0 <HAL_GetTick>
 80055b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ba:	f7fc faf9 	bl	8001bb0 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e077      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80055cc:	4b14      	ldr	r3, [pc, #80]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0xc9e>
 80055d8:	e06f      	b.n	80056ba <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 80055e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055e6:	f7fc fae3 	bl	8001bb0 <HAL_GetTick>
 80055ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ee:	f7fc fadf 	bl	8001bb0 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e05d      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f0      	bne.n	80055ee <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800560c:	4b04      	ldr	r3, [pc, #16]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	4a03      	ldr	r2, [pc, #12]	; (8005620 <HAL_RCC_OscConfig+0xd04>)
 8005612:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	6293      	str	r3, [r2, #40]	; 0x28
 800561c:	e04d      	b.n	80056ba <HAL_RCC_OscConfig+0xd9e>
 800561e:	bf00      	nop
 8005620:	46020c00 	.word	0x46020c00
 8005624:	46020800 	.word	0x46020800
 8005628:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800562c:	4b25      	ldr	r3, [pc, #148]	; (80056c4 <HAL_RCC_OscConfig+0xda8>)
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <HAL_RCC_OscConfig+0xda8>)
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	2b01      	cmp	r3, #1
 800563e:	d03a      	beq.n	80056b6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f003 0203 	and.w	r2, r3, #3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800564a:	429a      	cmp	r2, r3
 800564c:	d133      	bne.n	80056b6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d12a      	bne.n	80056b6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	0b1b      	lsrs	r3, r3, #12
 8005664:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800566c:	429a      	cmp	r2, r3
 800566e:	d122      	bne.n	80056b6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800567a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800567c:	429a      	cmp	r2, r3
 800567e:	d11a      	bne.n	80056b6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	0a5b      	lsrs	r3, r3, #9
 8005684:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d111      	bne.n	80056b6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d108      	bne.n	80056b6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	0e1b      	lsrs	r3, r3, #24
 80056a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d001      	beq.n	80056ba <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3738      	adds	r7, #56	; 0x38
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	46020c00 	.word	0x46020c00

080056c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e1d9      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056dc:	4b9b      	ldr	r3, [pc, #620]	; (800594c <HAL_RCC_ClockConfig+0x284>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d910      	bls.n	800570c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b98      	ldr	r3, [pc, #608]	; (800594c <HAL_RCC_ClockConfig+0x284>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f023 020f 	bic.w	r2, r3, #15
 80056f2:	4996      	ldr	r1, [pc, #600]	; (800594c <HAL_RCC_ClockConfig+0x284>)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fa:	4b94      	ldr	r3, [pc, #592]	; (800594c <HAL_RCC_ClockConfig+0x284>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d001      	beq.n	800570c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e1c1      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	d010      	beq.n	800573a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	4b8c      	ldr	r3, [pc, #560]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005724:	429a      	cmp	r2, r3
 8005726:	d908      	bls.n	800573a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005728:	4b89      	ldr	r3, [pc, #548]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	4986      	ldr	r1, [pc, #536]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 8005736:	4313      	orrs	r3, r2
 8005738:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d012      	beq.n	800576c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	4b81      	ldr	r3, [pc, #516]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005754:	429a      	cmp	r2, r3
 8005756:	d909      	bls.n	800576c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005758:	4b7d      	ldr	r3, [pc, #500]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	497a      	ldr	r1, [pc, #488]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 8005768:	4313      	orrs	r3, r2
 800576a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d010      	beq.n	800579a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	4b74      	ldr	r3, [pc, #464]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005784:	429a      	cmp	r2, r3
 8005786:	d908      	bls.n	800579a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005788:	4b71      	ldr	r3, [pc, #452]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	496e      	ldr	r1, [pc, #440]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 8005796:	4313      	orrs	r3, r2
 8005798:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d010      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	4b69      	ldr	r3, [pc, #420]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d908      	bls.n	80057c8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80057b6:	4b66      	ldr	r3, [pc, #408]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 020f 	bic.w	r2, r3, #15
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	4963      	ldr	r1, [pc, #396]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80d2 	beq.w	800597a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80057d6:	2300      	movs	r3, #0
 80057d8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d143      	bne.n	800586a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e2:	4b5b      	ldr	r3, [pc, #364]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80057e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d110      	bne.n	8005812 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80057f0:	4b57      	ldr	r3, [pc, #348]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80057f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f6:	4a56      	ldr	r2, [pc, #344]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80057f8:	f043 0304 	orr.w	r3, r3, #4
 80057fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005800:	4b53      	ldr	r3, [pc, #332]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	60bb      	str	r3, [r7, #8]
 800580c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800580e:	2301      	movs	r3, #1
 8005810:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005812:	f7fc f9cd 	bl	8001bb0 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005818:	4b4e      	ldr	r3, [pc, #312]	; (8005954 <HAL_RCC_ClockConfig+0x28c>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00f      	beq.n	8005844 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005826:	f7fc f9c3 	bl	8001bb0 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e12b      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005838:	4b46      	ldr	r3, [pc, #280]	; (8005954 <HAL_RCC_ClockConfig+0x28c>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005844:	7dfb      	ldrb	r3, [r7, #23]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005850:	4a3f      	ldr	r2, [pc, #252]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 8005852:	f023 0304 	bic.w	r3, r3, #4
 8005856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800585a:	4b3d      	ldr	r3, [pc, #244]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d121      	bne.n	80058aa <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e112      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d107      	bne.n	8005882 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005872:	4b37      	ldr	r3, [pc, #220]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d115      	bne.n	80058aa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e106      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800588a:	4b31      	ldr	r3, [pc, #196]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e0fa      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800589a:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e0f2      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80058aa:	4b29      	ldr	r3, [pc, #164]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f023 0203 	bic.w	r2, r3, #3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	4926      	ldr	r1, [pc, #152]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80058bc:	f7fc f978 	bl	8001bb0 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d112      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ca:	e00a      	b.n	80058e2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058cc:	f7fc f970 	bl	8001bb0 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058da:	4293      	cmp	r3, r2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e0d6      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f003 030c 	and.w	r3, r3, #12
 80058ea:	2b0c      	cmp	r3, #12
 80058ec:	d1ee      	bne.n	80058cc <HAL_RCC_ClockConfig+0x204>
 80058ee:	e044      	b.n	800597a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d112      	bne.n	800591e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058f8:	e00a      	b.n	8005910 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058fa:	f7fc f959 	bl	8001bb0 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	4293      	cmp	r3, r2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e0bf      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005910:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f003 030c 	and.w	r3, r3, #12
 8005918:	2b08      	cmp	r3, #8
 800591a:	d1ee      	bne.n	80058fa <HAL_RCC_ClockConfig+0x232>
 800591c:	e02d      	b.n	800597a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d123      	bne.n	800596e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005926:	e00a      	b.n	800593e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005928:	f7fc f942 	bl	8001bb0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	; 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e0a8      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <HAL_RCC_ClockConfig+0x288>)
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1ee      	bne.n	8005928 <HAL_RCC_ClockConfig+0x260>
 800594a:	e016      	b.n	800597a <HAL_RCC_ClockConfig+0x2b2>
 800594c:	40022000 	.word	0x40022000
 8005950:	46020c00 	.word	0x46020c00
 8005954:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fc f92a 	bl	8001bb0 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e090      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f003 030c 	and.w	r3, r3, #12
 8005976:	2b04      	cmp	r3, #4
 8005978:	d1ee      	bne.n	8005958 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d010      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	4b43      	ldr	r3, [pc, #268]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	429a      	cmp	r2, r3
 8005994:	d208      	bcs.n	80059a8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005996:	4b40      	ldr	r3, [pc, #256]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 020f 	bic.w	r2, r3, #15
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	493d      	ldr	r1, [pc, #244]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059a8:	4b3c      	ldr	r3, [pc, #240]	; (8005a9c <HAL_RCC_ClockConfig+0x3d4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d210      	bcs.n	80059d8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <HAL_RCC_ClockConfig+0x3d4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 020f 	bic.w	r2, r3, #15
 80059be:	4937      	ldr	r1, [pc, #220]	; (8005a9c <HAL_RCC_ClockConfig+0x3d4>)
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b35      	ldr	r3, [pc, #212]	; (8005a9c <HAL_RCC_ClockConfig+0x3d4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e05b      	b.n	8005a90 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d010      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d208      	bcs.n	8005a06 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80059f4:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4925      	ldr	r1, [pc, #148]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d012      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	4b20      	ldr	r3, [pc, #128]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	091b      	lsrs	r3, r3, #4
 8005a1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d209      	bcs.n	8005a38 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005a24:	4b1c      	ldr	r3, [pc, #112]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	4919      	ldr	r1, [pc, #100]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d010      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d208      	bcs.n	8005a66 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005a54:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	490d      	ldr	r1, [pc, #52]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005a66:	f000 f859 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <HAL_RCC_ClockConfig+0x3d0>)
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	490a      	ldr	r1, [pc, #40]	; (8005aa0 <HAL_RCC_ClockConfig+0x3d8>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7c:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <HAL_RCC_ClockConfig+0x3dc>)
 8005a7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a80:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_RCC_ClockConfig+0x3e0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fc f849 	bl	8001b1c <HAL_InitTick>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	46020c00 	.word	0x46020c00
 8005a9c:	40022000 	.word	0x40022000
 8005aa0:	0800c95c 	.word	0x0800c95c
 8005aa4:	20000018 	.word	0x20000018
 8005aa8:	2000001c 	.word	0x2000001c

08005aac <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08a      	sub	sp, #40	; 0x28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 8005ab8:	4b16      	ldr	r3, [pc, #88]	; (8005b14 <HAL_RCC_MCOConfig+0x68>)
 8005aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005abe:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <HAL_RCC_MCOConfig+0x68>)
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ac8:	4b12      	ldr	r3, [pc, #72]	; (8005b14 <HAL_RCC_MCOConfig+0x68>)
 8005aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 8005ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ada:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8005adc:	2302      	movs	r3, #2
 8005ade:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8005aec:	f107 0314 	add.w	r3, r7, #20
 8005af0:	4619      	mov	r1, r3
 8005af2:	4809      	ldr	r0, [pc, #36]	; (8005b18 <HAL_RCC_MCOConfig+0x6c>)
 8005af4:	f7fe f82c 	bl	8003b50 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <HAL_RCC_MCOConfig+0x68>)
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	430b      	orrs	r3, r1
 8005b06:	4903      	ldr	r1, [pc, #12]	; (8005b14 <HAL_RCC_MCOConfig+0x68>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61cb      	str	r3, [r1, #28]
}
 8005b0c:	bf00      	nop
 8005b0e:	3728      	adds	r7, #40	; 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	46020c00 	.word	0x46020c00
 8005b18:	42020000 	.word	0x42020000

08005b1c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b08b      	sub	sp, #44	; 0x2c
 8005b20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b2a:	4b7b      	ldr	r3, [pc, #492]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
 8005b32:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b34:	4b78      	ldr	r3, [pc, #480]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	f003 0303 	and.w	r3, r3, #3
 8005b3c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0x34>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b0c      	cmp	r3, #12
 8005b48:	d121      	bne.n	8005b8e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d11e      	bne.n	8005b8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005b50:	4b71      	ldr	r3, [pc, #452]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d107      	bne.n	8005b6c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005b5c:	4b6e      	ldr	r3, [pc, #440]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b62:	0b1b      	lsrs	r3, r3, #12
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6a:	e005      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005b6c:	4b6a      	ldr	r3, [pc, #424]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	0f1b      	lsrs	r3, r3, #28
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b78:	4a68      	ldr	r2, [pc, #416]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b8c:	e00d      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b8e:	4b62      	ldr	r3, [pc, #392]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f003 030c 	and.w	r3, r3, #12
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d102      	bne.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b9a:	4b61      	ldr	r3, [pc, #388]	; (8005d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	e004      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d101      	bne.n	8005baa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ba6:	4b5e      	ldr	r3, [pc, #376]	; (8005d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ba8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	f040 80ac 	bne.w	8005d0a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005bb2:	4b59      	ldr	r3, [pc, #356]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005bbc:	4b56      	ldr	r3, [pc, #344]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005bca:	4b53      	ldr	r3, [pc, #332]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005bd6:	4b50      	ldr	r3, [pc, #320]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 8086 	beq.w	8005d06 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0xec>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d022      	beq.n	8005c4c <HAL_RCC_GetSysClockFreq+0x130>
 8005c06:	e043      	b.n	8005c90 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005d24 <HAL_RCC_GetSysClockFreq+0x208>
 8005c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1a:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c2a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c2e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005d28 <HAL_RCC_GetSysClockFreq+0x20c>
 8005c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c46:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005c4a:	e046      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005d24 <HAL_RCC_GetSysClockFreq+0x208>
 8005c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c5e:	4b2e      	ldr	r3, [pc, #184]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c6e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c72:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005d28 <HAL_RCC_GetSysClockFreq+0x20c>
 8005c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005c8e:	e024      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cb8:	ed97 6a01 	vldr	s12, [r7, #4]
 8005cbc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005d28 <HAL_RCC_GetSysClockFreq+0x20c>
 8005cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005cd8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005cda:	4b0f      	ldr	r3, [pc, #60]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	0e1b      	lsrs	r3, r3, #24
 8005ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfe:	ee17 3a90 	vmov	r3, s15
 8005d02:	623b      	str	r3, [r7, #32]
 8005d04:	e001      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	372c      	adds	r7, #44	; 0x2c
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	46020c00 	.word	0x46020c00
 8005d1c:	0800c974 	.word	0x0800c974
 8005d20:	00f42400 	.word	0x00f42400
 8005d24:	4b742400 	.word	0x4b742400
 8005d28:	46000000 	.word	0x46000000

08005d2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d30:	f7ff fef4 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8005d34:	4602      	mov	r2, r0
 8005d36:	4b07      	ldr	r3, [pc, #28]	; (8005d54 <HAL_RCC_GetHCLKFreq+0x28>)
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	4906      	ldr	r1, [pc, #24]	; (8005d58 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005d40:	5ccb      	ldrb	r3, [r1, r3]
 8005d42:	fa22 f303 	lsr.w	r3, r2, r3
 8005d46:	4a05      	ldr	r2, [pc, #20]	; (8005d5c <HAL_RCC_GetHCLKFreq+0x30>)
 8005d48:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005d4a:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <HAL_RCC_GetHCLKFreq+0x30>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	46020c00 	.word	0x46020c00
 8005d58:	0800c95c 	.word	0x0800c95c
 8005d5c:	20000018 	.word	0x20000018

08005d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005d64:	f7ff ffe2 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	091b      	lsrs	r3, r3, #4
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	46020c00 	.word	0x46020c00
 8005d84:	0800c96c 	.word	0x0800c96c

08005d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005d8c:	f7ff ffce 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	0a1b      	lsrs	r3, r3, #8
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4903      	ldr	r1, [pc, #12]	; (8005dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	46020c00 	.word	0x46020c00
 8005dac:	0800c96c 	.word	0x0800c96c

08005db0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005db4:	f7ff ffba 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	091b      	lsrs	r3, r3, #4
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4903      	ldr	r1, [pc, #12]	; (8005dd4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005dc6:	5ccb      	ldrb	r3, [r1, r3]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	46020c00 	.word	0x46020c00
 8005dd4:	0800c96c 	.word	0x0800c96c

08005dd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005de0:	4b3e      	ldr	r3, [pc, #248]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005dee:	f7fe fd77 	bl	80048e0 <HAL_PWREx_GetVoltageRange>
 8005df2:	6178      	str	r0, [r7, #20]
 8005df4:	e019      	b.n	8005e2a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfc:	4a37      	ldr	r2, [pc, #220]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005dfe:	f043 0304 	orr.w	r3, r3, #4
 8005e02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005e06:	4b35      	ldr	r3, [pc, #212]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e14:	f7fe fd64 	bl	80048e0 <HAL_PWREx_GetVoltageRange>
 8005e18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e1a:	4b30      	ldr	r3, [pc, #192]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e20:	4a2e      	ldr	r2, [pc, #184]	; (8005edc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005e22:	f023 0304 	bic.w	r3, r3, #4
 8005e26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e30:	d003      	beq.n	8005e3a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e38:	d109      	bne.n	8005e4e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e40:	d202      	bcs.n	8005e48 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005e42:	2301      	movs	r3, #1
 8005e44:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005e46:	e033      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005e4c:	e030      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e54:	d208      	bcs.n	8005e68 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d102      	bne.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005e5e:	2303      	movs	r3, #3
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e025      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e035      	b.n	8005ed4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e6e:	d90f      	bls.n	8005e90 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e7c:	d902      	bls.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e015      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005e84:	2301      	movs	r3, #1
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	e012      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	e00f      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e96:	d109      	bne.n	8005eac <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9e:	d102      	bne.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	e004      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	e001      	b.n	8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005eac:	2301      	movs	r3, #1
 8005eae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f023 020f 	bic.w	r2, r3, #15
 8005eb8:	4909      	ldr	r1, [pc, #36]	; (8005ee0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005ec0:	4b07      	ldr	r3, [pc, #28]	; (8005ee0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d001      	beq.n	8005ed2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	46020c00 	.word	0x46020c00
 8005ee0:	40022000 	.word	0x40022000

08005ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee8:	b0ba      	sub	sp, #232	; 0xe8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f002 0401 	and.w	r4, r2, #1
 8005f08:	2500      	movs	r5, #0
 8005f0a:	ea54 0305 	orrs.w	r3, r4, r5
 8005f0e:	d00b      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005f10:	4bcb      	ldr	r3, [pc, #812]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f16:	f023 0103 	bic.w	r1, r3, #3
 8005f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f20:	4ac7      	ldr	r2, [pc, #796]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f22:	430b      	orrs	r3, r1
 8005f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f002 0802 	and.w	r8, r2, #2
 8005f34:	f04f 0900 	mov.w	r9, #0
 8005f38:	ea58 0309 	orrs.w	r3, r8, r9
 8005f3c:	d00b      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005f3e:	4bc0      	ldr	r3, [pc, #768]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f44:	f023 010c 	bic.w	r1, r3, #12
 8005f48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	4abc      	ldr	r2, [pc, #752]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f50:	430b      	orrs	r3, r1
 8005f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f002 0a04 	and.w	sl, r2, #4
 8005f62:	f04f 0b00 	mov.w	fp, #0
 8005f66:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f6a:	d00b      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005f6c:	4bb4      	ldr	r3, [pc, #720]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f72:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7c:	4ab0      	ldr	r2, [pc, #704]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f002 0308 	and.w	r3, r2, #8
 8005f90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	d00b      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005fa4:	4ba6      	ldr	r3, [pc, #664]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb4:	4aa2      	ldr	r2, [pc, #648]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f002 0310 	and.w	r3, r2, #16
 8005fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005fdc:	4b98      	ldr	r3, [pc, #608]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fe2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	4a94      	ldr	r2, [pc, #592]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f002 0320 	and.w	r3, r2, #32
 8006000:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006004:	2300      	movs	r3, #0
 8006006:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800600a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800600e:	460b      	mov	r3, r1
 8006010:	4313      	orrs	r3, r2
 8006012:	d00b      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006014:	4b8a      	ldr	r3, [pc, #552]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800601a:	f023 0107 	bic.w	r1, r3, #7
 800601e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006024:	4a86      	ldr	r2, [pc, #536]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006026:	430b      	orrs	r3, r1
 8006028:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800602c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800603c:	2300      	movs	r3, #0
 800603e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006042:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006046:	460b      	mov	r3, r1
 8006048:	4313      	orrs	r3, r2
 800604a:	d00b      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800604c:	4b7c      	ldr	r3, [pc, #496]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800604e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006052:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800605c:	4a78      	ldr	r2, [pc, #480]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800605e:	430b      	orrs	r3, r1
 8006060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006064:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800607a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800607e:	460b      	mov	r3, r1
 8006080:	4313      	orrs	r3, r2
 8006082:	d00b      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006084:	4b6e      	ldr	r3, [pc, #440]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800608a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800608e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006094:	4a6a      	ldr	r2, [pc, #424]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006096:	430b      	orrs	r3, r1
 8006098:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800609c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80060a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ac:	2300      	movs	r3, #0
 80060ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060b2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4313      	orrs	r3, r2
 80060ba:	d00b      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80060bc:	4b60      	ldr	r3, [pc, #384]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060cc:	4a5c      	ldr	r2, [pc, #368]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ce:	430b      	orrs	r3, r1
 80060d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060dc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80060e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060e4:	2300      	movs	r3, #0
 80060e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060ea:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80060ee:	460b      	mov	r3, r1
 80060f0:	4313      	orrs	r3, r2
 80060f2:	d00b      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80060f4:	4b52      	ldr	r3, [pc, #328]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060fa:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80060fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006104:	4a4e      	ldr	r2, [pc, #312]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006106:	430b      	orrs	r3, r1
 8006108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800610c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800611c:	2300      	movs	r3, #0
 800611e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006122:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006126:	460b      	mov	r3, r1
 8006128:	4313      	orrs	r3, r2
 800612a:	d00b      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800612c:	4b44      	ldr	r3, [pc, #272]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800612e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006132:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800613a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800613c:	4a40      	ldr	r2, [pc, #256]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800613e:	430b      	orrs	r3, r1
 8006140:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800615a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800615e:	460b      	mov	r3, r1
 8006160:	4313      	orrs	r3, r2
 8006162:	d00b      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006164:	4b36      	ldr	r3, [pc, #216]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800616a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800616e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006174:	4a32      	ldr	r2, [pc, #200]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006176:	430b      	orrs	r3, r1
 8006178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800617c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800618c:	2300      	movs	r3, #0
 800618e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006192:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006196:	460b      	mov	r3, r1
 8006198:	4313      	orrs	r3, r2
 800619a:	d00c      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800619c:	4b28      	ldr	r3, [pc, #160]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800619e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ae:	4a24      	ldr	r2, [pc, #144]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061b0:	430b      	orrs	r3, r1
 80061b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80061c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80061c4:	2300      	movs	r3, #0
 80061c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80061cc:	460b      	mov	r3, r1
 80061ce:	4313      	orrs	r3, r2
 80061d0:	d04f      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80061d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	2b80      	cmp	r3, #128	; 0x80
 80061dc:	d02d      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80061de:	2b80      	cmp	r3, #128	; 0x80
 80061e0:	d827      	bhi.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061e2:	2b60      	cmp	r3, #96	; 0x60
 80061e4:	d02e      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80061e6:	2b60      	cmp	r3, #96	; 0x60
 80061e8:	d823      	bhi.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d006      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x318>
 80061ee:	2b40      	cmp	r3, #64	; 0x40
 80061f0:	d81f      	bhi.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x326>
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d011      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80061fa:	e01a      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061fc:	4b10      	ldr	r3, [pc, #64]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	4a0f      	ldr	r2, [pc, #60]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006206:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006208:	e01d      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800620a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800620e:	3308      	adds	r3, #8
 8006210:	4618      	mov	r0, r3
 8006212:	f002 f981 	bl	8008518 <RCCEx_PLL2_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800621c:	e013      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800621e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006222:	332c      	adds	r3, #44	; 0x2c
 8006224:	4618      	mov	r0, r3
 8006226:	f002 fa0f 	bl	8008648 <RCCEx_PLL3_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006230:	e009      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006238:	e005      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800623a:	bf00      	nop
 800623c:	e003      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800623e:	bf00      	nop
 8006240:	46020c00 	.word	0x46020c00
        break;
 8006244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006246:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10d      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800624e:	4bb6      	ldr	r3, [pc, #728]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006250:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006254:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800625c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006260:	4ab1      	ldr	r2, [pc, #708]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006262:	430b      	orrs	r3, r1
 8006264:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006268:	e003      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800626e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800627e:	673b      	str	r3, [r7, #112]	; 0x70
 8006280:	2300      	movs	r3, #0
 8006282:	677b      	str	r3, [r7, #116]	; 0x74
 8006284:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006288:	460b      	mov	r3, r1
 800628a:	4313      	orrs	r3, r2
 800628c:	d053      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800628e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800629a:	d033      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800629c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a0:	d82c      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x418>
 80062a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a6:	d02f      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80062a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ac:	d826      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x418>
 80062ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b2:	d008      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b8:	d820      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x418>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d011      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80062c4:	e01a      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062c6:	4b98      	ldr	r3, [pc, #608]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ca:	4a97      	ldr	r2, [pc, #604]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062d2:	e01a      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d8:	3308      	adds	r3, #8
 80062da:	4618      	mov	r0, r3
 80062dc:	f002 f91c 	bl	8008518 <RCCEx_PLL2_Config>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062e6:	e010      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ec:	332c      	adds	r3, #44	; 0x2c
 80062ee:	4618      	mov	r0, r3
 80062f0:	f002 f9aa 	bl	8008648 <RCCEx_PLL3_Config>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062fa:	e006      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006302:	e002      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800630a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10d      	bne.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006312:	4b85      	ldr	r3, [pc, #532]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006314:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006318:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800631c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006324:	4a80      	ldr	r2, [pc, #512]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006326:	430b      	orrs	r3, r1
 8006328:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800632c:	e003      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006332:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006342:	66bb      	str	r3, [r7, #104]	; 0x68
 8006344:	2300      	movs	r3, #0
 8006346:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006348:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800634c:	460b      	mov	r3, r1
 800634e:	4313      	orrs	r3, r2
 8006350:	d046      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800635a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800635e:	d028      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006360:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006364:	d821      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800636a:	d022      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800636c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006370:	d81b      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006372:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006376:	d01c      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006378:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800637c:	d815      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800637e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006382:	d008      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006388:	d80f      	bhi.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d011      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800638e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006392:	d00e      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006394:	e009      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800639a:	3308      	adds	r3, #8
 800639c:	4618      	mov	r0, r3
 800639e:	f002 f8bb 	bl	8008518 <RCCEx_PLL2_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80063a8:	e004      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80063b0:	e000      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80063b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10d      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80063bc:	4b5a      	ldr	r3, [pc, #360]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063c2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80063c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063ce:	4a56      	ldr	r2, [pc, #344]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063d0:	430b      	orrs	r3, r1
 80063d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063d6:	e003      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80063dc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80063e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80063ec:	663b      	str	r3, [r7, #96]	; 0x60
 80063ee:	2300      	movs	r3, #0
 80063f0:	667b      	str	r3, [r7, #100]	; 0x64
 80063f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d03f      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80063fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	2b04      	cmp	r3, #4
 8006406:	d81e      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	0800644f 	.word	0x0800644f
 8006414:	08006425 	.word	0x08006425
 8006418:	08006433 	.word	0x08006433
 800641c:	0800644f 	.word	0x0800644f
 8006420:	0800644f 	.word	0x0800644f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006424:	4b40      	ldr	r3, [pc, #256]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	4a3f      	ldr	r2, [pc, #252]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800642a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800642e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006430:	e00e      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006436:	332c      	adds	r3, #44	; 0x2c
 8006438:	4618      	mov	r0, r3
 800643a:	f002 f905 	bl	8008648 <RCCEx_PLL3_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006444:	e004      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800644c:	e000      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800644e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006450:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10d      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006458:	4b33      	ldr	r3, [pc, #204]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800645a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800645e:	f023 0107 	bic.w	r1, r3, #7
 8006462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646a:	4a2f      	ldr	r2, [pc, #188]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800646c:	430b      	orrs	r3, r1
 800646e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006472:	e003      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006478:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800647c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006488:	65bb      	str	r3, [r7, #88]	; 0x58
 800648a:	2300      	movs	r3, #0
 800648c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800648e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006492:	460b      	mov	r3, r1
 8006494:	4313      	orrs	r3, r2
 8006496:	d04d      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006498:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800649c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064a4:	d028      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80064a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064aa:	d821      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80064ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064b0:	d024      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x618>
 80064b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064b6:	d81b      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80064b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064bc:	d00e      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80064be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c2:	d815      	bhi.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01b      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064cc:	d110      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064ce:	4b16      	ldr	r3, [pc, #88]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	4a15      	ldr	r2, [pc, #84]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80064da:	e012      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e0:	332c      	adds	r3, #44	; 0x2c
 80064e2:	4618      	mov	r0, r3
 80064e4:	f002 f8b0 	bl	8008648 <RCCEx_PLL3_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80064ee:	e008      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80064f6:	e004      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80064f8:	bf00      	nop
 80064fa:	e002      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80064fc:	bf00      	nop
 80064fe:	e000      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006500:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006502:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d110      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800650c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006510:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800651c:	4a02      	ldr	r2, [pc, #8]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800651e:	430b      	orrs	r3, r1
 8006520:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006524:	e006      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006526:	bf00      	nop
 8006528:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006530:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006540:	653b      	str	r3, [r7, #80]	; 0x50
 8006542:	2300      	movs	r3, #0
 8006544:	657b      	str	r3, [r7, #84]	; 0x54
 8006546:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800654a:	460b      	mov	r3, r1
 800654c:	4313      	orrs	r3, r2
 800654e:	f000 80b5 	beq.w	80066bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006552:	2300      	movs	r3, #0
 8006554:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006558:	4b9d      	ldr	r3, [pc, #628]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800655a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d113      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006566:	4b9a      	ldr	r3, [pc, #616]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800656c:	4a98      	ldr	r2, [pc, #608]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800656e:	f043 0304 	orr.w	r3, r3, #4
 8006572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006576:	4b96      	ldr	r3, [pc, #600]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800658e:	4b91      	ldr	r3, [pc, #580]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	4a90      	ldr	r2, [pc, #576]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800659a:	f7fb fb09 	bl	8001bb0 <HAL_GetTick>
 800659e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065a2:	e00b      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065a4:	f7fb fb04 	bl	8001bb0 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d903      	bls.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065ba:	e005      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80065bc:	4b85      	ldr	r3, [pc, #532]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ed      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80065c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d165      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065d0:	4b7f      	ldr	r3, [pc, #508]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80065de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d023      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80065e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80065ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01b      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065f6:	4b76      	ldr	r3, [pc, #472]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006604:	4b72      	ldr	r3, [pc, #456]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800660a:	4a71      	ldr	r2, [pc, #452]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800660c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006610:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006614:	4b6e      	ldr	r3, [pc, #440]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800661a:	4a6d      	ldr	r2, [pc, #436]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800661c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006620:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006624:	4a6a      	ldr	r2, [pc, #424]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d019      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663a:	f7fb fab9 	bl	8001bb0 <HAL_GetTick>
 800663e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006642:	e00d      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006644:	f7fb fab4 	bl	8001bb0 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	f241 3388 	movw	r3, #5000	; 0x1388
 8006654:	429a      	cmp	r2, r3
 8006656:	d903      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800665e:	e006      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006660:	4b5b      	ldr	r3, [pc, #364]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0ea      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800666e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10d      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006676:	4b56      	ldr	r3, [pc, #344]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800667c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006684:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006688:	4a51      	ldr	r2, [pc, #324]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800668a:	430b      	orrs	r3, r1
 800668c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006690:	e008      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006692:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006696:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800669a:	e003      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800669c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066a0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066a4:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d107      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ac:	4b48      	ldr	r3, [pc, #288]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b2:	4a47      	ldr	r2, [pc, #284]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066b4:	f023 0304 	bic.w	r3, r3, #4
 80066b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80066bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80066c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ca:	2300      	movs	r3, #0
 80066cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80066d2:	460b      	mov	r3, r1
 80066d4:	4313      	orrs	r3, r2
 80066d6:	d042      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80066d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066e0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066e4:	d022      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80066e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066ea:	d81b      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80066ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066f0:	d011      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80066f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066f6:	d815      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d019      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80066fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006700:	d110      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006706:	3308      	adds	r3, #8
 8006708:	4618      	mov	r0, r3
 800670a:	f001 ff05 	bl	8008518 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006714:	e00d      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006716:	4b2e      	ldr	r3, [pc, #184]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	4a2d      	ldr	r2, [pc, #180]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800671c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006720:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006722:	e006      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800672a:	e002      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800672c:	bf00      	nop
 800672e:	e000      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006730:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006732:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10d      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800673a:	4b25      	ldr	r3, [pc, #148]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800673c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006740:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800674c:	4a20      	ldr	r2, [pc, #128]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800674e:	430b      	orrs	r3, r1
 8006750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006754:	e003      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006756:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800675a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800675e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800676a:	643b      	str	r3, [r7, #64]	; 0x40
 800676c:	2300      	movs	r3, #0
 800676e:	647b      	str	r3, [r7, #68]	; 0x44
 8006770:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006774:	460b      	mov	r3, r1
 8006776:	4313      	orrs	r3, r2
 8006778:	d032      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800677a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006786:	d00b      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678c:	d804      	bhi.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d007      	beq.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800679e:	e004      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80067a0:	bf00      	nop
 80067a2:	e002      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80067a4:	bf00      	nop
 80067a6:	e000      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80067a8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d112      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80067b2:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80067c4:	4a02      	ldr	r2, [pc, #8]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80067c6:	430b      	orrs	r3, r1
 80067c8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80067cc:	e008      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80067ce:	bf00      	nop
 80067d0:	46020c00 	.word	0x46020c00
 80067d4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067dc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80067e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80067ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ee:	2300      	movs	r3, #0
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	d00c      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80067fc:	4b98      	ldr	r3, [pc, #608]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006802:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800680a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800680e:	4a94      	ldr	r2, [pc, #592]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006810:	430b      	orrs	r3, r1
 8006812:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
 8006824:	2300      	movs	r3, #0
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
 8006828:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800682c:	460b      	mov	r3, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d019      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800683a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800683e:	d105      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006840:	4b87      	ldr	r3, [pc, #540]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	4a86      	ldr	r2, [pc, #536]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800684a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800684c:	4b84      	ldr	r3, [pc, #528]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800684e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006852:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006856:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800685a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800685e:	4a80      	ldr	r2, [pc, #512]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006860:	430b      	orrs	r3, r1
 8006862:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
 8006874:	2300      	movs	r3, #0
 8006876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006878:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800687c:	460b      	mov	r3, r1
 800687e:	4313      	orrs	r3, r2
 8006880:	d00c      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006882:	4b77      	ldr	r3, [pc, #476]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800688c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006894:	4972      	ldr	r1, [pc, #456]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800689c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80068a8:	623b      	str	r3, [r7, #32]
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
 80068ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d00c      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80068b8:	4b69      	ldr	r3, [pc, #420]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80068ca:	4965      	ldr	r1, [pc, #404]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80068d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]
 80068e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068e8:	460b      	mov	r3, r1
 80068ea:	4313      	orrs	r3, r2
 80068ec:	d00c      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80068ee:	4b5c      	ldr	r3, [pc, #368]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068f4:	f023 0218 	bic.w	r2, r3, #24
 80068f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006900:	4957      	ldr	r1, [pc, #348]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006902:	4313      	orrs	r3, r2
 8006904:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006908:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800691e:	460b      	mov	r3, r1
 8006920:	4313      	orrs	r3, r2
 8006922:	d032      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006928:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800692c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006930:	d105      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006932:	4b4b      	ldr	r3, [pc, #300]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	4a4a      	ldr	r2, [pc, #296]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800693c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800693e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006946:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800694a:	d108      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800694c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006950:	3308      	adds	r3, #8
 8006952:	4618      	mov	r0, r3
 8006954:	f001 fde0 	bl	8008518 <RCCEx_PLL2_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800695e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10d      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006966:	4b3e      	ldr	r3, [pc, #248]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006968:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800696c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006978:	4939      	ldr	r1, [pc, #228]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006980:	e003      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006982:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006986:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800698a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006996:	60bb      	str	r3, [r7, #8]
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069a0:	460b      	mov	r3, r1
 80069a2:	4313      	orrs	r3, r2
 80069a4:	d03a      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80069a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069b2:	d00e      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80069b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069b8:	d815      	bhi.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d017      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80069be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069c2:	d110      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069c4:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ce:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80069d0:	e00e      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069d6:	3308      	adds	r3, #8
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 fd9d 	bl	8008518 <RCCEx_PLL2_Config>
 80069de:	4603      	mov	r3, r0
 80069e0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80069e4:	e004      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069ec:	e000      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80069ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10d      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80069f8:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0a:	4915      	ldr	r1, [pc, #84]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006a12:	e003      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a14:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a18:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a32:	460b      	mov	r3, r1
 8006a34:	4313      	orrs	r3, r2
 8006a36:	d00c      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a4a:	4905      	ldr	r1, [pc, #20]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006a52:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	37e8      	adds	r7, #232	; 0xe8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a60:	46020c00 	.word	0x46020c00

08006a64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b089      	sub	sp, #36	; 0x24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006a6c:	4bac      	ldr	r3, [pc, #688]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a74:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a76:	4baa      	ldr	r3, [pc, #680]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006a80:	4ba7      	ldr	r3, [pc, #668]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	0a1b      	lsrs	r3, r3, #8
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006a8e:	4ba4      	ldr	r3, [pc, #656]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006a98:	4ba1      	ldr	r3, [pc, #644]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	08db      	lsrs	r3, r3, #3
 8006a9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 8123 	beq.w	8006d02 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d062      	beq.n	8006b88 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	f200 8081 	bhi.w	8006bcc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d024      	beq.n	8006b1a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d17a      	bne.n	8006bcc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	ee07 3a90 	vmov	s15, r3
 8006adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ae8:	4b8d      	ldr	r3, [pc, #564]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006af8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006afc:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b18:	e08f      	b.n	8006c3a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b1a:	4b81      	ldr	r3, [pc, #516]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d005      	beq.n	8006b32 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006b26:	4b7e      	ldr	r3, [pc, #504]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	0f1b      	lsrs	r3, r3, #28
 8006b2c:	f003 030f 	and.w	r3, r3, #15
 8006b30:	e006      	b.n	8006b40 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006b32:	4b7b      	ldr	r3, [pc, #492]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b38:	041b      	lsls	r3, r3, #16
 8006b3a:	0f1b      	lsrs	r3, r3, #28
 8006b3c:	f003 030f 	and.w	r3, r3, #15
 8006b40:	4a7a      	ldr	r2, [pc, #488]	; (8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b6a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b86:	e058      	b.n	8006c3a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b92:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006d24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9a:	4b61      	ldr	r3, [pc, #388]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bae:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bca:	e036      	b.n	8006c3a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006bcc:	4b54      	ldr	r3, [pc, #336]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006bd8:	4b51      	ldr	r3, [pc, #324]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	0f1b      	lsrs	r3, r3, #28
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	e006      	b.n	8006bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006be4:	4b4e      	ldr	r3, [pc, #312]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	0f1b      	lsrs	r3, r3, #28
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	4a4e      	ldr	r2, [pc, #312]	; (8006d2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	ee07 3a90 	vmov	s15, r3
 8006c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c18:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c1c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c38:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006c3a:	4b39      	ldr	r3, [pc, #228]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d017      	beq.n	8006c76 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4a:	0a5b      	lsrs	r3, r3, #9
 8006c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c6c:	ee17 2a90 	vmov	r2, s15
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e002      	b.n	8006c7c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006c7c:	4b28      	ldr	r3, [pc, #160]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d017      	beq.n	8006cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c88:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8c:	0c1b      	lsrs	r3, r3, #16
 8006c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cae:	ee17 2a90 	vmov	r2, s15
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	605a      	str	r2, [r3, #4]
 8006cb6:	e002      	b.n	8006cbe <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006cbe:	4b18      	ldr	r3, [pc, #96]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d017      	beq.n	8006cfa <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cca:	4b15      	ldr	r3, [pc, #84]	; (8006d20 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cce:	0e1b      	lsrs	r3, r3, #24
 8006cd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd4:	ee07 3a90 	vmov	s15, r3
 8006cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ce0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ce4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf0:	ee17 2a90 	vmov	r2, s15
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006cf8:	e00c      	b.n	8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	e008      	b.n	8006d14 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	3724      	adds	r7, #36	; 0x24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	46020c00 	.word	0x46020c00
 8006d24:	4b742400 	.word	0x4b742400
 8006d28:	46000000 	.word	0x46000000
 8006d2c:	0800c974 	.word	0x0800c974

08006d30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b089      	sub	sp, #36	; 0x24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006d38:	4bac      	ldr	r3, [pc, #688]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d40:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006d42:	4baa      	ldr	r3, [pc, #680]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006d4c:	4ba7      	ldr	r3, [pc, #668]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	0a1b      	lsrs	r3, r3, #8
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	3301      	adds	r3, #1
 8006d58:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006d5a:	4ba4      	ldr	r3, [pc, #656]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	f003 0310 	and.w	r3, r3, #16
 8006d62:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d64:	4ba1      	ldr	r3, [pc, #644]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	08db      	lsrs	r3, r3, #3
 8006d6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8123 	beq.w	8006fce <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d062      	beq.n	8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	f200 8081 	bhi.w	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d024      	beq.n	8006de6 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d17a      	bne.n	8006e98 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dac:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006db0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db4:	4b8d      	ldr	r3, [pc, #564]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dc8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006dcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006de0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de4:	e08f      	b.n	8006f06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006de6:	4b81      	ldr	r3, [pc, #516]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006df2:	4b7e      	ldr	r3, [pc, #504]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	0f1b      	lsrs	r3, r3, #28
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	e006      	b.n	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006dfe:	4b7b      	ldr	r3, [pc, #492]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	0f1b      	lsrs	r3, r3, #28
 8006e08:	f003 030f 	and.w	r3, r3, #15
 8006e0c:	4a7a      	ldr	r2, [pc, #488]	; (8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	ee07 3a90 	vmov	s15, r3
 8006e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e36:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e52:	e058      	b.n	8006f06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b61      	ldr	r3, [pc, #388]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e96:	e036      	b.n	8006f06 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006e98:	4b54      	ldr	r3, [pc, #336]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006ea4:	4b51      	ldr	r3, [pc, #324]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	0f1b      	lsrs	r3, r3, #28
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	e006      	b.n	8006ebe <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006eb0:	4b4e      	ldr	r3, [pc, #312]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eb6:	041b      	lsls	r3, r3, #16
 8006eb8:	0f1b      	lsrs	r3, r3, #28
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	4a4e      	ldr	r2, [pc, #312]	; (8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ee8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f04:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006f06:	4b39      	ldr	r3, [pc, #228]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d017      	beq.n	8006f42 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f12:	4b36      	ldr	r3, [pc, #216]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f16:	0a5b      	lsrs	r3, r3, #9
 8006f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f28:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f38:	ee17 2a90 	vmov	r2, s15
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e002      	b.n	8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006f48:	4b28      	ldr	r3, [pc, #160]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d017      	beq.n	8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f54:	4b25      	ldr	r3, [pc, #148]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f58:	0c1b      	lsrs	r3, r3, #16
 8006f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f5e:	ee07 3a90 	vmov	s15, r3
 8006f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7a:	ee17 2a90 	vmov	r2, s15
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	e002      	b.n	8006f8a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006f8a:	4b18      	ldr	r3, [pc, #96]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d017      	beq.n	8006fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f96:	4b15      	ldr	r3, [pc, #84]	; (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	0e1b      	lsrs	r3, r3, #24
 8006f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa0:	ee07 3a90 	vmov	s15, r3
 8006fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fac:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fbc:	ee17 2a90 	vmov	r2, s15
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fc4:	e00c      	b.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	609a      	str	r2, [r3, #8]
}
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	609a      	str	r2, [r3, #8]
}
 8006fe0:	bf00      	nop
 8006fe2:	3724      	adds	r7, #36	; 0x24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	46020c00 	.word	0x46020c00
 8006ff0:	4b742400 	.word	0x4b742400
 8006ff4:	46000000 	.word	0x46000000
 8006ff8:	0800c974 	.word	0x0800c974

08006ffc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b089      	sub	sp, #36	; 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007004:	4bac      	ldr	r3, [pc, #688]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800700e:	4baa      	ldr	r3, [pc, #680]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007018:	4ba7      	ldr	r3, [pc, #668]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	3301      	adds	r3, #1
 8007024:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8007026:	4ba4      	ldr	r3, [pc, #656]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	f003 0310 	and.w	r3, r3, #16
 800702e:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007030:	4ba1      	ldr	r3, [pc, #644]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007034:	08db      	lsrs	r3, r3, #3
 8007036:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	fb02 f303 	mul.w	r3, r2, r3
 8007040:	ee07 3a90 	vmov	s15, r3
 8007044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007048:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 8123 	beq.w	800729a <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d062      	beq.n	8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b03      	cmp	r3, #3
 800705e:	f200 8081 	bhi.w	8007164 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d024      	beq.n	80070b2 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d17a      	bne.n	8007164 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007078:	eddf 6a90 	vldr	s13, [pc, #576]	; 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800707c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007080:	4b8d      	ldr	r3, [pc, #564]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007088:	ee07 3a90 	vmov	s15, r3
 800708c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007090:	ed97 6a02 	vldr	s12, [r7, #8]
 8007094:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007098:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800709c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80070a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ac:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80070b0:	e08f      	b.n	80071d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80070b2:	4b81      	ldr	r3, [pc, #516]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80070be:	4b7e      	ldr	r3, [pc, #504]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	0f1b      	lsrs	r3, r3, #28
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	e006      	b.n	80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80070ca:	4b7b      	ldr	r3, [pc, #492]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070d0:	041b      	lsls	r3, r3, #16
 80070d2:	0f1b      	lsrs	r3, r3, #28
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	4a7a      	ldr	r2, [pc, #488]	; (80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80070da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	ee07 3a90 	vmov	s15, r3
 80070ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007102:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800710a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007112:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800711e:	e058      	b.n	80071d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80072bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800712e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007132:	4b61      	ldr	r3, [pc, #388]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007142:	ed97 6a02 	vldr	s12, [r7, #8]
 8007146:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800714a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800714e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007156:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800715a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800715e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007162:	e036      	b.n	80071d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007164:	4b54      	ldr	r3, [pc, #336]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007170:	4b51      	ldr	r3, [pc, #324]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	0f1b      	lsrs	r3, r3, #28
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	e006      	b.n	800718a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800717c:	4b4e      	ldr	r3, [pc, #312]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800717e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	0f1b      	lsrs	r3, r3, #28
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	4a4e      	ldr	r2, [pc, #312]	; (80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80072c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80071b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80071c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071d0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80071d2:	4b39      	ldr	r3, [pc, #228]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d017      	beq.n	800720e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071de:	4b36      	ldr	r3, [pc, #216]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	0a5b      	lsrs	r3, r3, #9
 80071e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e8:	ee07 3a90 	vmov	s15, r3
 80071ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80071f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071f4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80071fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007204:	ee17 2a90 	vmov	r2, s15
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	e002      	b.n	8007214 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007214:	4b28      	ldr	r3, [pc, #160]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d017      	beq.n	8007250 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007220:	4b25      	ldr	r3, [pc, #148]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007224:	0c1b      	lsrs	r3, r3, #16
 8007226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007236:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800723a:	edd7 6a07 	vldr	s13, [r7, #28]
 800723e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007246:	ee17 2a90 	vmov	r2, s15
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	e002      	b.n	8007256 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007256:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d017      	beq.n	8007292 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007266:	0e1b      	lsrs	r3, r3, #24
 8007268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007278:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800727c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007288:	ee17 2a90 	vmov	r2, s15
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007290:	e00c      	b.n	80072ac <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	609a      	str	r2, [r3, #8]
}
 8007298:	e008      	b.n	80072ac <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	609a      	str	r2, [r3, #8]
}
 80072ac:	bf00      	nop
 80072ae:	3724      	adds	r7, #36	; 0x24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	46020c00 	.word	0x46020c00
 80072bc:	4b742400 	.word	0x4b742400
 80072c0:	46000000 	.word	0x46000000
 80072c4:	0800c974 	.word	0x0800c974

080072c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08e      	sub	sp, #56	; 0x38
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80072d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80072da:	430b      	orrs	r3, r1
 80072dc:	d145      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072de:	4ba7      	ldr	r3, [pc, #668]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80072ea:	4ba4      	ldr	r3, [pc, #656]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d108      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072fe:	d104      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
 8007306:	f001 b8fc 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800730a:	4b9c      	ldr	r3, [pc, #624]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800730c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007318:	d114      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007320:	d110      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007322:	4b96      	ldr	r3, [pc, #600]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007330:	d103      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007332:	23fa      	movs	r3, #250	; 0xfa
 8007334:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007336:	f001 b8e4 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800733a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007340:	f001 b8df 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007344:	4b8d      	ldr	r3, [pc, #564]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007350:	d107      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007358:	d103      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800735a:	4b89      	ldr	r3, [pc, #548]	; (8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
 800735e:	f001 b8d0 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	637b      	str	r3, [r7, #52]	; 0x34
 8007366:	f001 b8cc 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800736a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007372:	430b      	orrs	r3, r1
 8007374:	d151      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007376:	4b81      	ldr	r3, [pc, #516]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007378:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800737c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007380:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	2b80      	cmp	r3, #128	; 0x80
 8007386:	d035      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	2b80      	cmp	r3, #128	; 0x80
 800738c:	d841      	bhi.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	2b60      	cmp	r3, #96	; 0x60
 8007392:	d02a      	beq.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	2b60      	cmp	r3, #96	; 0x60
 8007398:	d83b      	bhi.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d009      	beq.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d835      	bhi.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00c      	beq.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d012      	beq.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80073b2:	e02e      	b.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff fb53 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073c2:	f001 b89e 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073c6:	f107 0318 	add.w	r3, r7, #24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fcb0 	bl	8006d30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073d4:	f001 b895 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fe0d 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e6:	f001 b88c 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073f0:	f001 b887 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073f4:	4b61      	ldr	r3, [pc, #388]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007400:	d103      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007402:	4b60      	ldr	r3, [pc, #384]	; (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007404:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007406:	f001 b87c 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800740e:	f001 b878 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007416:	f001 b874 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800741a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800741e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007422:	430b      	orrs	r3, r1
 8007424:	d158      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007426:	4b55      	ldr	r3, [pc, #340]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007428:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800742c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007430:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007438:	d03b      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007440:	d846      	bhi.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007448:	d02e      	beq.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007450:	d83e      	bhi.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007458:	d00b      	beq.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007460:	d836      	bhi.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800746e:	d012      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007470:	e02e      	b.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff faf4 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007480:	f001 b83f 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007484:	f107 0318 	add.w	r3, r7, #24
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff fc51 	bl	8006d30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007492:	f001 b836 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007496:	f107 030c 	add.w	r3, r7, #12
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fdae 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a4:	f001 b82d 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80074a8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80074ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074ae:	f001 b828 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074b2:	4b32      	ldr	r3, [pc, #200]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074be:	d103      	bne.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80074c0:	4b30      	ldr	r3, [pc, #192]	; (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074c4:	f001 b81d 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074cc:	f001 b819 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074d4:	f001 b815 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80074d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074dc:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80074e0:	430b      	orrs	r3, r1
 80074e2:	d126      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80074e4:	4b25      	ldr	r3, [pc, #148]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80074f0:	4b22      	ldr	r3, [pc, #136]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074fc:	d106      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d103      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007504:	4b1f      	ldr	r3, [pc, #124]	; (8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
 8007508:	f000 bffb 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800750c:	4b1b      	ldr	r3, [pc, #108]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007518:	d107      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007520:	d103      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007522:	4b19      	ldr	r3, [pc, #100]	; (8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
 8007526:	f000 bfec 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
 800752e:	f000 bfe8 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007536:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800753a:	430b      	orrs	r3, r1
 800753c:	d164      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800753e:	4b0f      	ldr	r3, [pc, #60]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007544:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007548:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007550:	d03d      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007558:	d852      	bhi.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007560:	d014      	beq.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007568:	d84a      	bhi.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01f      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007576:	d012      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007578:	e042      	b.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800757a:	bf00      	nop
 800757c:	46020c00 	.word	0x46020c00
 8007580:	0007a120 	.word	0x0007a120
 8007584:	00f42400 	.word	0x00f42400
 8007588:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800758c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007590:	4618      	mov	r0, r3
 8007592:	f7ff fa67 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759a:	f000 bfb2 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800759e:	f107 0318 	add.w	r3, r7, #24
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff fbc4 	bl	8006d30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075ac:	f000 bfa9 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80075b0:	4bab      	ldr	r3, [pc, #684]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075bc:	d103      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80075be:	4ba9      	ldr	r3, [pc, #676]	; (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80075c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075c2:	f000 bf9e 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075ca:	f000 bf9a 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075ce:	4ba4      	ldr	r3, [pc, #656]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80075da:	4ba1      	ldr	r3, [pc, #644]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	0e1b      	lsrs	r3, r3, #24
 80075e0:	f003 030f 	and.w	r3, r3, #15
 80075e4:	e006      	b.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80075e6:	4b9e      	ldr	r3, [pc, #632]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	0e1b      	lsrs	r3, r3, #24
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	4a9c      	ldr	r2, [pc, #624]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80075f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075fc:	f000 bf81 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007604:	f000 bf7d 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007610:	430b      	orrs	r3, r1
 8007612:	d175      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007614:	4b92      	ldr	r3, [pc, #584]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007616:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800761a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800761e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	2b00      	cmp	r3, #0
 8007624:	d15b      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007626:	4b8e      	ldr	r3, [pc, #568]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800762c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007630:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007638:	d034      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007640:	d849      	bhi.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007648:	d00b      	beq.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007650:	d841      	bhi.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d016      	beq.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800765e:	d009      	beq.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007660:	e039      	b.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff f9fc 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007670:	f000 bf47 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007674:	f107 0318 	add.w	r3, r7, #24
 8007678:	4618      	mov	r0, r3
 800767a:	f7ff fb59 	bl	8006d30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007682:	f000 bf3e 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007686:	4b76      	ldr	r3, [pc, #472]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800768e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007692:	d103      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007694:	4b73      	ldr	r3, [pc, #460]	; (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007696:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007698:	f000 bf33 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80076a0:	f000 bf2f 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076a4:	4b6e      	ldr	r3, [pc, #440]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d005      	beq.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80076b0:	4b6b      	ldr	r3, [pc, #428]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	e006      	b.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80076bc:	4b68      	ldr	r3, [pc, #416]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	0e1b      	lsrs	r3, r3, #24
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	4a67      	ldr	r2, [pc, #412]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80076cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80076d2:	f000 bf16 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80076da:	f000 bf12 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076e4:	d108      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff f9ba 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	637b      	str	r3, [r7, #52]	; 0x34
 80076f4:	f000 bf05 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	637b      	str	r3, [r7, #52]	; 0x34
 80076fc:	f000 bf01 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007704:	1e51      	subs	r1, r2, #1
 8007706:	430b      	orrs	r3, r1
 8007708:	d136      	bne.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800770a:	4b55      	ldr	r3, [pc, #340]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800770c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	2b00      	cmp	r3, #0
 800771a:	d104      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800771c:	f7fe fb34 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8007720:	6378      	str	r0, [r7, #52]	; 0x34
 8007722:	f000 beee 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	2b01      	cmp	r3, #1
 800772a:	d104      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800772c:	f7fe f9f6 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8007730:	6378      	str	r0, [r7, #52]	; 0x34
 8007732:	f000 bee6 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007736:	4b4a      	ldr	r3, [pc, #296]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800773e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007742:	d106      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	2b02      	cmp	r3, #2
 8007748:	d103      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800774a:	4b48      	ldr	r3, [pc, #288]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
 800774e:	f000 bed8 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007752:	4b43      	ldr	r3, [pc, #268]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007754:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d107      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	2b03      	cmp	r3, #3
 8007764:	d104      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8007766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
 800776c:	f000 bec9 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
 8007774:	f000 bec5 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777c:	1e91      	subs	r1, r2, #2
 800777e:	430b      	orrs	r3, r1
 8007780:	d136      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007782:	4b37      	ldr	r3, [pc, #220]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007788:	f003 030c 	and.w	r3, r3, #12
 800778c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007794:	f7fe fae4 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007798:	6378      	str	r0, [r7, #52]	; 0x34
 800779a:	f000 beb2 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d104      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077a4:	f7fe f9ba 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 80077a8:	6378      	str	r0, [r7, #52]	; 0x34
 80077aa:	f000 beaa 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80077ae:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ba:	d106      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d103      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 80077c2:	4b2a      	ldr	r3, [pc, #168]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
 80077c6:	f000 be9c 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80077ca:	4b25      	ldr	r3, [pc, #148]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d107      	bne.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	2b0c      	cmp	r3, #12
 80077dc:	d104      	bne.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80077de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
 80077e4:	f000 be8d 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	f000 be89 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80077f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f4:	1f11      	subs	r1, r2, #4
 80077f6:	430b      	orrs	r3, r1
 80077f8:	d13e      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80077fa:	4b19      	ldr	r3, [pc, #100]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007800:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007804:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	2b00      	cmp	r3, #0
 800780a:	d104      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800780c:	f7fe faa8 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007810:	6378      	str	r0, [r7, #52]	; 0x34
 8007812:	f000 be76 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	2b10      	cmp	r3, #16
 800781a:	d104      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800781c:	f7fe f97e 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8007820:	6378      	str	r0, [r7, #52]	; 0x34
 8007822:	f000 be6e 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007826:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800782e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007832:	d106      	bne.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	2b20      	cmp	r3, #32
 8007838:	d103      	bne.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800783a:	4b0c      	ldr	r3, [pc, #48]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800783c:	637b      	str	r3, [r7, #52]	; 0x34
 800783e:	f000 be60 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007842:	4b07      	ldr	r3, [pc, #28]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007848:	f003 0302 	and.w	r3, r3, #2
 800784c:	2b02      	cmp	r3, #2
 800784e:	d10f      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2b30      	cmp	r3, #48	; 0x30
 8007854:	d10c      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8007856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785a:	637b      	str	r3, [r7, #52]	; 0x34
 800785c:	f000 be51 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007860:	46020c00 	.word	0x46020c00
 8007864:	02dc6c00 	.word	0x02dc6c00
 8007868:	0800c974 	.word	0x0800c974
 800786c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
 8007874:	f000 be45 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787c:	f1a2 0108 	sub.w	r1, r2, #8
 8007880:	430b      	orrs	r3, r1
 8007882:	d136      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007884:	4b9f      	ldr	r3, [pc, #636]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800788a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800788e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	2b00      	cmp	r3, #0
 8007894:	d104      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007896:	f7fe fa63 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 800789a:	6378      	str	r0, [r7, #52]	; 0x34
 800789c:	f000 be31 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d104      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078a6:	f7fe f939 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 80078aa:	6378      	str	r0, [r7, #52]	; 0x34
 80078ac:	f000 be29 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80078b0:	4b94      	ldr	r3, [pc, #592]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078bc:	d106      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	2b80      	cmp	r3, #128	; 0x80
 80078c2:	d103      	bne.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 80078c4:	4b90      	ldr	r3, [pc, #576]	; (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078c6:	637b      	str	r3, [r7, #52]	; 0x34
 80078c8:	f000 be1b 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80078cc:	4b8d      	ldr	r3, [pc, #564]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d107      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	2bc0      	cmp	r3, #192	; 0xc0
 80078de:	d104      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80078e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
 80078e6:	f000 be0c 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
 80078ee:	f000 be08 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80078f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f6:	f1a2 0110 	sub.w	r1, r2, #16
 80078fa:	430b      	orrs	r3, r1
 80078fc:	d139      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80078fe:	4b81      	ldr	r3, [pc, #516]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007908:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fe fa26 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007914:	6378      	str	r0, [r7, #52]	; 0x34
 8007916:	f000 bdf4 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007920:	d104      	bne.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007922:	f7fe f8fb 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8007926:	6378      	str	r0, [r7, #52]	; 0x34
 8007928:	f000 bdeb 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800792c:	4b75      	ldr	r3, [pc, #468]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007938:	d107      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007940:	d103      	bne.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007942:	4b71      	ldr	r3, [pc, #452]	; (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
 8007946:	f000 bddc 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800794a:	4b6e      	ldr	r3, [pc, #440]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800794c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d108      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800795e:	d104      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
 8007966:	f000 bdcc 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
 800796e:	f000 bdc8 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007976:	f1a2 0120 	sub.w	r1, r2, #32
 800797a:	430b      	orrs	r3, r1
 800797c:	d158      	bne.n	8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800797e:	4b61      	ldr	r3, [pc, #388]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007990:	f7fe fa0e 	bl	8005db0 <HAL_RCC_GetPCLK3Freq>
 8007994:	6378      	str	r0, [r7, #52]	; 0x34
 8007996:	f000 bdb4 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	2b01      	cmp	r3, #1
 800799e:	d104      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80079a0:	f7fe f8bc 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 80079a4:	6378      	str	r0, [r7, #52]	; 0x34
 80079a6:	f000 bdac 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80079aa:	4b56      	ldr	r3, [pc, #344]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b6:	d106      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d103      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80079be:	4b52      	ldr	r3, [pc, #328]	; (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
 80079c2:	f000 bd9e 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80079c6:	4b4f      	ldr	r3, [pc, #316]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d107      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d104      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80079da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079de:	637b      	str	r3, [r7, #52]	; 0x34
 80079e0:	f000 bd8f 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80079e4:	4b47      	ldr	r3, [pc, #284]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0320 	and.w	r3, r3, #32
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d11b      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d118      	bne.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079f6:	4b43      	ldr	r3, [pc, #268]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007a02:	4b40      	ldr	r3, [pc, #256]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	0e1b      	lsrs	r3, r3, #24
 8007a08:	f003 030f 	and.w	r3, r3, #15
 8007a0c:	e006      	b.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007a0e:	4b3d      	ldr	r3, [pc, #244]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a14:	041b      	lsls	r3, r3, #16
 8007a16:	0e1b      	lsrs	r3, r3, #24
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	4a3b      	ldr	r2, [pc, #236]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
 8007a24:	f000 bd6d 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2c:	f000 bd69 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a34:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	d169      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007a3c:	4b31      	ldr	r3, [pc, #196]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a46:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4e:	d104      	bne.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a50:	f7fe f864 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8007a54:	6378      	str	r0, [r7, #52]	; 0x34
 8007a56:	f000 bd54 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a60:	d108      	bne.n	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a62:	f107 0318 	add.w	r3, r7, #24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff f962 	bl	8006d30 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a70:	f000 bd47 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d104      	bne.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007a7a:	f7fe f957 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8007a7e:	6378      	str	r0, [r7, #52]	; 0x34
 8007a80:	f000 bd3f 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007a8a:	d118      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007a8c:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007a98:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	0f1b      	lsrs	r3, r3, #28
 8007a9e:	f003 030f 	and.w	r3, r3, #15
 8007aa2:	e006      	b.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007aa4:	4b17      	ldr	r3, [pc, #92]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	0f1b      	lsrs	r3, r3, #28
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aba:	f000 bd22 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007abe:	4b11      	ldr	r3, [pc, #68]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007aca:	d107      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ad2:	d103      	bne.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad8:	f000 bd13 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007adc:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae8:	d107      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007af0:	d103      	bne.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007af4:	637b      	str	r3, [r7, #52]	; 0x34
 8007af6:	f000 bd04 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
 8007afe:	f000 bd00 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007b02:	bf00      	nop
 8007b04:	46020c00 	.word	0x46020c00
 8007b08:	00f42400 	.word	0x00f42400
 8007b0c:	0800c974 	.word	0x0800c974
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b14:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	d14e      	bne.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007b1c:	4ba8      	ldr	r3, [pc, #672]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d841      	bhi.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b6d 	.word	0x08007b6d
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b5b 	.word	0x08007b5b
 8007b40:	08007b77 	.word	0x08007b77
 8007b44:	08007b81 	.word	0x08007b81
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe ff89 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b56:	f000 bcd4 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b5a:	f107 030c 	add.w	r3, r7, #12
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff fa4c 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b68:	f000 bccb 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007b6c:	f7fe f8de 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8007b70:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b72:	f000 bcc6 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b76:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b7c:	f000 bcc1 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b80:	4b8f      	ldr	r3, [pc, #572]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007b8c:	4b8c      	ldr	r3, [pc, #560]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	0e1b      	lsrs	r3, r3, #24
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	e006      	b.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007b98:	4b89      	ldr	r3, [pc, #548]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b9e:	041b      	lsls	r3, r3, #16
 8007ba0:	0e1b      	lsrs	r3, r3, #24
 8007ba2:	f003 030f 	and.w	r3, r3, #15
 8007ba6:	4a87      	ldr	r2, [pc, #540]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bae:	f000 bca8 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bb6:	f000 bca4 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bbe:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007bc2:	430b      	orrs	r3, r1
 8007bc4:	d15d      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007bc6:	4b7e      	ldr	r3, [pc, #504]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007bcc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007bd0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bd8:	d036      	beq.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007be0:	d84b      	bhi.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007be8:	d029      	beq.n	8007c3e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bf0:	d843      	bhi.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf8:	d013      	beq.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c00:	d83b      	bhi.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d015      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0e:	d134      	bne.n	8007c7a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe ff25 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c1e:	f000 bc70 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c22:	f107 030c 	add.w	r3, r7, #12
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7ff f9e8 	bl	8006ffc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c30:	f000 bc67 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007c34:	f7fe f87a 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8007c38:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c3a:	f000 bc62 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c3e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c44:	f000 bc5d 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c48:	4b5d      	ldr	r3, [pc, #372]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007c54:	4b5a      	ldr	r3, [pc, #360]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	0e1b      	lsrs	r3, r3, #24
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	e006      	b.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007c60:	4b57      	ldr	r3, [pc, #348]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	0e1b      	lsrs	r3, r3, #24
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	4a55      	ldr	r2, [pc, #340]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c76:	f000 bc44 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c7e:	f000 bc40 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c86:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007c8a:	430b      	orrs	r3, r1
 8007c8c:	d14a      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c8e:	4b4c      	ldr	r3, [pc, #304]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c98:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ca0:	f7fe f85e 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007ca4:	6378      	str	r0, [r7, #52]	; 0x34
 8007ca6:	f000 bc2c 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb0:	d104      	bne.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cb2:	f7fd ff33 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8007cb6:	6378      	str	r0, [r7, #52]	; 0x34
 8007cb8:	f000 bc23 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007cbc:	4b40      	ldr	r3, [pc, #256]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc8:	d107      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cd0:	d103      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007cd2:	4b3d      	ldr	r3, [pc, #244]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd6:	f000 bc14 	b.w	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007cda:	4b39      	ldr	r3, [pc, #228]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b20      	cmp	r3, #32
 8007ce4:	d11b      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cec:	d117      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cee:	4b34      	ldr	r3, [pc, #208]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d005      	beq.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007cfa:	4b31      	ldr	r3, [pc, #196]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	0e1b      	lsrs	r3, r3, #24
 8007d00:	f003 030f 	and.w	r3, r3, #15
 8007d04:	e006      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007d06:	4b2e      	ldr	r3, [pc, #184]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d0c:	041b      	lsls	r3, r3, #16
 8007d0e:	0e1b      	lsrs	r3, r3, #24
 8007d10:	f003 030f 	and.w	r3, r3, #15
 8007d14:	4a2b      	ldr	r2, [pc, #172]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1c:	e3f1      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	637b      	str	r3, [r7, #52]	; 0x34
 8007d22:	e3ee      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d28:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	d14d      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007d30:	4b23      	ldr	r3, [pc, #140]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d3a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d103      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d42:	f7fe f80d 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007d46:	6378      	str	r0, [r7, #52]	; 0x34
 8007d48:	e3db      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d50:	d103      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d52:	f7fd fee3 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8007d56:	6378      	str	r0, [r7, #52]	; 0x34
 8007d58:	e3d3      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007d5a:	4b19      	ldr	r3, [pc, #100]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d66:	d106      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6e:	d102      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007d70:	4b15      	ldr	r3, [pc, #84]	; (8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007d72:	637b      	str	r3, [r7, #52]	; 0x34
 8007d74:	e3c5      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d11b      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d88:	d117      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d8a:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d005      	beq.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007d96:	4b0a      	ldr	r3, [pc, #40]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	0e1b      	lsrs	r3, r3, #24
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	e006      	b.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007da2:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007da8:	041b      	lsls	r3, r3, #16
 8007daa:	0e1b      	lsrs	r3, r3, #24
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	4a04      	ldr	r2, [pc, #16]	; (8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db6:	637b      	str	r3, [r7, #52]	; 0x34
 8007db8:	e3a3      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dbe:	e3a0      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007dc0:	46020c00 	.word	0x46020c00
 8007dc4:	0800c974 	.word	0x0800c974
 8007dc8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dd0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007dd4:	430b      	orrs	r3, r1
 8007dd6:	d148      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007dd8:	4b9d      	ldr	r3, [pc, #628]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007dde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007de2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	2bc0      	cmp	r3, #192	; 0xc0
 8007de8:	d024      	beq.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	2bc0      	cmp	r3, #192	; 0xc0
 8007dee:	d839      	bhi.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	2b80      	cmp	r3, #128	; 0x80
 8007df4:	d00d      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	2b80      	cmp	r3, #128	; 0x80
 8007dfa:	d833      	bhi.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2b40      	cmp	r3, #64	; 0x40
 8007e06:	d011      	beq.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007e08:	e02c      	b.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007e0a:	f7fd ffd1 	bl	8005db0 <HAL_RCC_GetPCLK3Freq>
 8007e0e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007e10:	e377      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e12:	4b8f      	ldr	r3, [pc, #572]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1e:	d102      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007e20:	4b8c      	ldr	r3, [pc, #560]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e24:	e36d      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e2a:	e36a      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007e2c:	f7fd fe76 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8007e30:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007e32:	e366      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007e34:	4b86      	ldr	r3, [pc, #536]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007e40:	4b83      	ldr	r3, [pc, #524]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	0f1b      	lsrs	r3, r3, #28
 8007e46:	f003 030f 	and.w	r3, r3, #15
 8007e4a:	e006      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007e4c:	4b80      	ldr	r3, [pc, #512]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e52:	041b      	lsls	r3, r3, #16
 8007e54:	0f1b      	lsrs	r3, r3, #28
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	4a7f      	ldr	r2, [pc, #508]	; (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e62:	e34e      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e68:	e34b      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e6e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007e72:	430b      	orrs	r3, r1
 8007e74:	d147      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007e76:	4b76      	ldr	r3, [pc, #472]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e80:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d103      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e88:	f7fd ff6a 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8007e8c:	6378      	str	r0, [r7, #52]	; 0x34
 8007e8e:	e338      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e96:	d103      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e98:	f7fd fe40 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8007e9c:	6378      	str	r0, [r7, #52]	; 0x34
 8007e9e:	e330      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007ea0:	4b6b      	ldr	r3, [pc, #428]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eac:	d106      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb4:	d102      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007eb6:	4b67      	ldr	r3, [pc, #412]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eba:	e322      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007ebc:	4b64      	ldr	r3, [pc, #400]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d11b      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ece:	d117      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ed0:	4b5f      	ldr	r3, [pc, #380]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d005      	beq.n	8007ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007edc:	4b5c      	ldr	r3, [pc, #368]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	0e1b      	lsrs	r3, r3, #24
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	e006      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007ee8:	4b59      	ldr	r3, [pc, #356]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	0e1b      	lsrs	r3, r3, #24
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	4a58      	ldr	r2, [pc, #352]	; (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007efc:	637b      	str	r3, [r7, #52]	; 0x34
 8007efe:	e300      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
 8007f04:	e2fd      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007f06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f0a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	d15b      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007f12:	4b4f      	ldr	r3, [pc, #316]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d117      	bne.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f24:	4b4a      	ldr	r3, [pc, #296]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007f30:	4b47      	ldr	r3, [pc, #284]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	0e1b      	lsrs	r3, r3, #24
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	e006      	b.n	8007f4a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007f3c:	4b44      	ldr	r3, [pc, #272]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	0e1b      	lsrs	r3, r3, #24
 8007f46:	f003 030f 	and.w	r3, r3, #15
 8007f4a:	4a43      	ldr	r2, [pc, #268]	; (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
 8007f52:	e2d6      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007f54:	4b3e      	ldr	r3, [pc, #248]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f62:	d112      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6a:	d10e      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f6c:	4b38      	ldr	r3, [pc, #224]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f7a:	d102      	bne.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007f7c:	23fa      	movs	r3, #250	; 0xfa
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f80:	e2bf      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f82:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f86:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f88:	e2bb      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007f8a:	4b31      	ldr	r3, [pc, #196]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f96:	d106      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f9e:	d102      	bne.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007fa0:	4b2c      	ldr	r3, [pc, #176]	; (8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa4:	e2ad      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007fa6:	4b2a      	ldr	r3, [pc, #168]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fac:	f003 0302 	and.w	r3, r3, #2
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d107      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fba:	d103      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007fbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc2:	e29e      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc8:	e29b      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fce:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	d162      	bne.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007fd6:	4b1e      	ldr	r3, [pc, #120]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fe0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d117      	bne.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fe8:	4b19      	ldr	r3, [pc, #100]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d005      	beq.n	8008000 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007ff4:	4b16      	ldr	r3, [pc, #88]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	0e1b      	lsrs	r3, r3, #24
 8007ffa:	f003 030f 	and.w	r3, r3, #15
 8007ffe:	e006      	b.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8008000:	4b13      	ldr	r3, [pc, #76]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008006:	041b      	lsls	r3, r3, #16
 8008008:	0e1b      	lsrs	r3, r3, #24
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	4a12      	ldr	r2, [pc, #72]	; (8008058 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8008010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
 8008016:	e274      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008018:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800801a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800801e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008026:	d119      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800802e:	d115      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800803e:	d102      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8008040:	23fa      	movs	r3, #250	; 0xfa
 8008042:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008044:	e25d      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008046:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800804c:	e259      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800804e:	bf00      	nop
 8008050:	46020c00 	.word	0x46020c00
 8008054:	00f42400 	.word	0x00f42400
 8008058:	0800c974 	.word	0x0800c974
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800805c:	4b9d      	ldr	r3, [pc, #628]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008068:	d106      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008070:	d102      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8008072:	4b99      	ldr	r3, [pc, #612]	; (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008074:	637b      	str	r3, [r7, #52]	; 0x34
 8008076:	e244      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008078:	4b96      	ldr	r3, [pc, #600]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800807a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b02      	cmp	r3, #2
 8008084:	d107      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800808c:	d103      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800808e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
 8008094:	e235      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	637b      	str	r3, [r7, #52]	; 0x34
 800809a:	e232      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800809c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080a0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80080a4:	430b      	orrs	r3, r1
 80080a6:	d147      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80080a8:	4b8a      	ldr	r3, [pc, #552]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080ae:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80080b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80080ba:	f7fd fe51 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 80080be:	6378      	str	r0, [r7, #52]	; 0x34
 80080c0:	e21f      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80080c2:	4b84      	ldr	r3, [pc, #528]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080d0:	d112      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080d8:	d10e      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80080da:	4b7e      	ldr	r3, [pc, #504]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080e8:	d102      	bne.n	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80080ea:	23fa      	movs	r3, #250	; 0xfa
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80080ee:	e208      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80080f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80080f6:	e204      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80080f8:	4b76      	ldr	r3, [pc, #472]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008104:	d106      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800810c:	d102      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800810e:	4b72      	ldr	r3, [pc, #456]	; (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008110:	637b      	str	r3, [r7, #52]	; 0x34
 8008112:	e1f6      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008114:	4b6f      	ldr	r3, [pc, #444]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b02      	cmp	r3, #2
 8008120:	d107      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008128:	d103      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800812a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
 8008130:	e1e7      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
 8008136:	e1e4      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800813c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008140:	430b      	orrs	r3, r1
 8008142:	d12d      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008144:	4b63      	ldr	r3, [pc, #396]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800814a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800814e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008150:	4b60      	ldr	r3, [pc, #384]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800815c:	d105      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	2b00      	cmp	r3, #0
 8008162:	d102      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008164:	4b5c      	ldr	r3, [pc, #368]	; (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
 8008168:	e1cb      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008170:	d107      	bne.n	8008182 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fc74 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817e:	637b      	str	r3, [r7, #52]	; 0x34
 8008180:	e1bf      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008188:	d107      	bne.n	800819a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818a:	f107 0318 	add.w	r3, r7, #24
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fdce 	bl	8006d30 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	e1b3      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
 800819e:	e1b0      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80081a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80081a8:	430b      	orrs	r3, r1
 80081aa:	d14d      	bne.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80081ac:	4b49      	ldr	r3, [pc, #292]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80081b6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081be:	d028      	beq.n	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80081c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081c6:	d83c      	bhi.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081ce:	d013      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081d6:	d834      	bhi.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d004      	beq.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081e4:	d004      	beq.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80081e6:	e02c      	b.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80081e8:	f7fd fdce 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 80081ec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081ee:	e188      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80081f0:	f7fd fc94 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 80081f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081f6:	e184      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081f8:	4b36      	ldr	r3, [pc, #216]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008204:	d102      	bne.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8008206:	4b34      	ldr	r3, [pc, #208]	; (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800820a:	e17a      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008210:	e177      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008212:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d005      	beq.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800821e:	4b2d      	ldr	r3, [pc, #180]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	0e1b      	lsrs	r3, r3, #24
 8008224:	f003 030f 	and.w	r3, r3, #15
 8008228:	e006      	b.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800822a:	4b2a      	ldr	r3, [pc, #168]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800822c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008230:	041b      	lsls	r3, r3, #16
 8008232:	0e1b      	lsrs	r3, r3, #24
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	4a28      	ldr	r2, [pc, #160]	; (80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800823a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800823e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008240:	e15f      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008246:	e15c      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800824c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008250:	430b      	orrs	r3, r1
 8008252:	d154      	bne.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008254:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800825a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800825e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008266:	d028      	beq.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800826e:	d843      	bhi.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008276:	d013      	beq.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800827e:	d83b      	bhi.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800828c:	d004      	beq.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800828e:	e033      	b.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008290:	f7fd fd66 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8008294:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008296:	e134      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008298:	f7fd fc40 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 800829c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800829e:	e130      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082a0:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ac:	d102      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80082ae:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082b2:	e126      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082b8:	e123      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082ba:	4b06      	ldr	r3, [pc, #24]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00c      	beq.n	80082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80082c6:	4b03      	ldr	r3, [pc, #12]	; (80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	0e1b      	lsrs	r3, r3, #24
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	e00d      	b.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80082d2:	bf00      	nop
 80082d4:	46020c00 	.word	0x46020c00
 80082d8:	00f42400 	.word	0x00f42400
 80082dc:	0800c974 	.word	0x0800c974
 80082e0:	4b8a      	ldr	r3, [pc, #552]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	0e1b      	lsrs	r3, r3, #24
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	4a88      	ldr	r2, [pc, #544]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80082f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082f6:	e104      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082fc:	e101      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80082fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008302:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8008306:	430b      	orrs	r3, r1
 8008308:	d16e      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800830a:	4b80      	ldr	r3, [pc, #512]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800830c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008310:	f003 0318 	and.w	r3, r3, #24
 8008314:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	2b18      	cmp	r3, #24
 800831a:	d862      	bhi.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800831c:	a201      	add	r2, pc, #4	; (adr r2, 8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800831e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008322:	bf00      	nop
 8008324:	08008389 	.word	0x08008389
 8008328:	080083e3 	.word	0x080083e3
 800832c:	080083e3 	.word	0x080083e3
 8008330:	080083e3 	.word	0x080083e3
 8008334:	080083e3 	.word	0x080083e3
 8008338:	080083e3 	.word	0x080083e3
 800833c:	080083e3 	.word	0x080083e3
 8008340:	080083e3 	.word	0x080083e3
 8008344:	08008391 	.word	0x08008391
 8008348:	080083e3 	.word	0x080083e3
 800834c:	080083e3 	.word	0x080083e3
 8008350:	080083e3 	.word	0x080083e3
 8008354:	080083e3 	.word	0x080083e3
 8008358:	080083e3 	.word	0x080083e3
 800835c:	080083e3 	.word	0x080083e3
 8008360:	080083e3 	.word	0x080083e3
 8008364:	08008399 	.word	0x08008399
 8008368:	080083e3 	.word	0x080083e3
 800836c:	080083e3 	.word	0x080083e3
 8008370:	080083e3 	.word	0x080083e3
 8008374:	080083e3 	.word	0x080083e3
 8008378:	080083e3 	.word	0x080083e3
 800837c:	080083e3 	.word	0x080083e3
 8008380:	080083e3 	.word	0x080083e3
 8008384:	080083b3 	.word	0x080083b3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008388:	f7fd fd12 	bl	8005db0 <HAL_RCC_GetPCLK3Freq>
 800838c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800838e:	e0b8      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008390:	f7fd fbc4 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8008394:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008396:	e0b4      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008398:	4b5c      	ldr	r3, [pc, #368]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a4:	d102      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80083a6:	4b5b      	ldr	r3, [pc, #364]	; (8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80083a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083aa:	e0aa      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083b0:	e0a7      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083b2:	4b56      	ldr	r3, [pc, #344]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d005      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80083be:	4b53      	ldr	r3, [pc, #332]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	0e1b      	lsrs	r3, r3, #24
 80083c4:	f003 030f 	and.w	r3, r3, #15
 80083c8:	e006      	b.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80083ca:	4b50      	ldr	r3, [pc, #320]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083d0:	041b      	lsls	r3, r3, #16
 80083d2:	0e1b      	lsrs	r3, r3, #24
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	4a4d      	ldr	r2, [pc, #308]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80083da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083e0:	e08f      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083e6:	e08c      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80083e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ec:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80083f0:	430b      	orrs	r3, r1
 80083f2:	d14c      	bne.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80083f4:	4b45      	ldr	r3, [pc, #276]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80083fe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008406:	d013      	beq.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8008408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800840e:	d83b      	bhi.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008416:	d013      	beq.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800841e:	d833      	bhi.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008422:	2b00      	cmp	r3, #0
 8008424:	d014      	beq.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800842c:	d014      	beq.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800842e:	e02b      	b.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008430:	f107 0318 	add.w	r3, r7, #24
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fc7b 	bl	8006d30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800843e:	e060      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fb0d 	bl	8006a64 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800844e:	e058      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008450:	f7fd fb64 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8008454:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008456:	e054      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008458:	4b2c      	ldr	r3, [pc, #176]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008464:	4b29      	ldr	r3, [pc, #164]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	0e1b      	lsrs	r3, r3, #24
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	e006      	b.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008470:	4b26      	ldr	r3, [pc, #152]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008476:	041b      	lsls	r3, r3, #16
 8008478:	0e1b      	lsrs	r3, r3, #24
 800847a:	f003 030f 	and.w	r3, r3, #15
 800847e:	4a24      	ldr	r2, [pc, #144]	; (8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008486:	e03c      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800848c:	e039      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800848e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008492:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008496:	430b      	orrs	r3, r1
 8008498:	d131      	bne.n	80084fe <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800849a:	4b1c      	ldr	r3, [pc, #112]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800849c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084a4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80084a6:	4b19      	ldr	r3, [pc, #100]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d106      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80084ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
 80084c0:	e01f      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80084c2:	4b12      	ldr	r3, [pc, #72]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084d0:	d112      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d8:	d10e      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084e8:	d102      	bne.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80084ea:	23fa      	movs	r3, #250	; 0xfa
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084ee:	e008      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80084f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084f6:	e004      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	637b      	str	r3, [r7, #52]	; 0x34
 80084fc:	e001      	b.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80084fe:	2300      	movs	r3, #0
 8008500:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008504:	4618      	mov	r0, r3
 8008506:	3738      	adds	r7, #56	; 0x38
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	46020c00 	.word	0x46020c00
 8008510:	0800c974 	.word	0x0800c974
 8008514:	00f42400 	.word	0x00f42400

08008518 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008520:	4b47      	ldr	r3, [pc, #284]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a46      	ldr	r2, [pc, #280]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 8008526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800852a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800852c:	f7f9 fb40 	bl	8001bb0 <HAL_GetTick>
 8008530:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008532:	e008      	b.n	8008546 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008534:	f7f9 fb3c 	bl	8001bb0 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e077      	b.n	8008636 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008546:	4b3e      	ldr	r3, [pc, #248]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f0      	bne.n	8008534 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008552:	4b3b      	ldr	r3, [pc, #236]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 8008554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008556:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	6811      	ldr	r1, [r2, #0]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6852      	ldr	r2, [r2, #4]
 8008566:	3a01      	subs	r2, #1
 8008568:	0212      	lsls	r2, r2, #8
 800856a:	430a      	orrs	r2, r1
 800856c:	4934      	ldr	r1, [pc, #208]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 800856e:	4313      	orrs	r3, r2
 8008570:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008572:	4b33      	ldr	r3, [pc, #204]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 8008574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008576:	4b33      	ldr	r3, [pc, #204]	; (8008644 <RCCEx_PLL2_Config+0x12c>)
 8008578:	4013      	ands	r3, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	6892      	ldr	r2, [r2, #8]
 800857e:	3a01      	subs	r2, #1
 8008580:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	68d2      	ldr	r2, [r2, #12]
 8008588:	3a01      	subs	r2, #1
 800858a:	0252      	lsls	r2, r2, #9
 800858c:	b292      	uxth	r2, r2
 800858e:	4311      	orrs	r1, r2
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6912      	ldr	r2, [r2, #16]
 8008594:	3a01      	subs	r2, #1
 8008596:	0412      	lsls	r2, r2, #16
 8008598:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800859c:	4311      	orrs	r1, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6952      	ldr	r2, [r2, #20]
 80085a2:	3a01      	subs	r2, #1
 80085a4:	0612      	lsls	r2, r2, #24
 80085a6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80085aa:	430a      	orrs	r2, r1
 80085ac:	4924      	ldr	r1, [pc, #144]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80085b2:	4b23      	ldr	r3, [pc, #140]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	f023 020c 	bic.w	r2, r3, #12
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	4920      	ldr	r1, [pc, #128]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085c0:	4313      	orrs	r3, r2
 80085c2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80085c4:	4b1e      	ldr	r3, [pc, #120]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	491c      	ldr	r1, [pc, #112]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80085d2:	4b1b      	ldr	r3, [pc, #108]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d6:	4a1a      	ldr	r2, [pc, #104]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085d8:	f023 0310 	bic.w	r3, r3, #16
 80085dc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085de:	4b18      	ldr	r3, [pc, #96]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	69d2      	ldr	r2, [r2, #28]
 80085ee:	00d2      	lsls	r2, r2, #3
 80085f0:	4913      	ldr	r1, [pc, #76]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	4a11      	ldr	r2, [pc, #68]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 80085fc:	f043 0310 	orr.w	r3, r3, #16
 8008600:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a0e      	ldr	r2, [pc, #56]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 8008608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800860c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800860e:	f7f9 facf 	bl	8001bb0 <HAL_GetTick>
 8008612:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008614:	e008      	b.n	8008628 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008616:	f7f9 facb 	bl	8001bb0 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e006      	b.n	8008636 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <RCCEx_PLL2_Config+0x128>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f0      	beq.n	8008616 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008634:	2300      	movs	r3, #0

}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	46020c00 	.word	0x46020c00
 8008644:	80800000 	.word	0x80800000

08008648 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008650:	4b47      	ldr	r3, [pc, #284]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a46      	ldr	r2, [pc, #280]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008656:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800865a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800865c:	f7f9 faa8 	bl	8001bb0 <HAL_GetTick>
 8008660:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008662:	e008      	b.n	8008676 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008664:	f7f9 faa4 	bl	8001bb0 <HAL_GetTick>
 8008668:	4602      	mov	r2, r0
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d901      	bls.n	8008676 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008672:	2303      	movs	r3, #3
 8008674:	e077      	b.n	8008766 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008676:	4b3e      	ldr	r3, [pc, #248]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1f0      	bne.n	8008664 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008682:	4b3b      	ldr	r3, [pc, #236]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6811      	ldr	r1, [r2, #0]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	6852      	ldr	r2, [r2, #4]
 8008696:	3a01      	subs	r2, #1
 8008698:	0212      	lsls	r2, r2, #8
 800869a:	430a      	orrs	r2, r1
 800869c:	4934      	ldr	r1, [pc, #208]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	630b      	str	r3, [r1, #48]	; 0x30
 80086a2:	4b33      	ldr	r3, [pc, #204]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 80086a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086a6:	4b33      	ldr	r3, [pc, #204]	; (8008774 <RCCEx_PLL3_Config+0x12c>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	6892      	ldr	r2, [r2, #8]
 80086ae:	3a01      	subs	r2, #1
 80086b0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	68d2      	ldr	r2, [r2, #12]
 80086b8:	3a01      	subs	r2, #1
 80086ba:	0252      	lsls	r2, r2, #9
 80086bc:	b292      	uxth	r2, r2
 80086be:	4311      	orrs	r1, r2
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6912      	ldr	r2, [r2, #16]
 80086c4:	3a01      	subs	r2, #1
 80086c6:	0412      	lsls	r2, r2, #16
 80086c8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80086cc:	4311      	orrs	r1, r2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6952      	ldr	r2, [r2, #20]
 80086d2:	3a01      	subs	r2, #1
 80086d4:	0612      	lsls	r2, r2, #24
 80086d6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80086da:	430a      	orrs	r2, r1
 80086dc:	4924      	ldr	r1, [pc, #144]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80086e2:	4b23      	ldr	r3, [pc, #140]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 80086e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e6:	f023 020c 	bic.w	r2, r3, #12
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	4920      	ldr	r1, [pc, #128]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80086f4:	4b1e      	ldr	r3, [pc, #120]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 80086f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a1b      	ldr	r3, [r3, #32]
 80086fc:	491c      	ldr	r1, [pc, #112]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008702:	4b1b      	ldr	r3, [pc, #108]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008706:	4a1a      	ldr	r2, [pc, #104]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008708:	f023 0310 	bic.w	r3, r3, #16
 800870c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800870e:	4b18      	ldr	r3, [pc, #96]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008712:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008716:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	69d2      	ldr	r2, [r2, #28]
 800871e:	00d2      	lsls	r2, r2, #3
 8008720:	4913      	ldr	r1, [pc, #76]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008722:	4313      	orrs	r3, r2
 8008724:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008726:	4b12      	ldr	r3, [pc, #72]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872a:	4a11      	ldr	r2, [pc, #68]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 800872c:	f043 0310 	orr.w	r3, r3, #16
 8008730:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008732:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a0e      	ldr	r2, [pc, #56]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 8008738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800873e:	f7f9 fa37 	bl	8001bb0 <HAL_GetTick>
 8008742:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008744:	e008      	b.n	8008758 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008746:	f7f9 fa33 	bl	8001bb0 <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d901      	bls.n	8008758 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e006      	b.n	8008766 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008758:	4b05      	ldr	r3, [pc, #20]	; (8008770 <RCCEx_PLL3_Config+0x128>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0f0      	beq.n	8008746 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	46020c00 	.word	0x46020c00
 8008774:	80800000 	.word	0x80800000

08008778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e042      	b.n	8008810 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008790:	2b00      	cmp	r3, #0
 8008792:	d106      	bne.n	80087a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7f8 ffdd 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2224      	movs	r2, #36	; 0x24
 80087a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0201 	bic.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8d2 	bl	8008964 <UART_SetConfig>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e022      	b.n	8008810 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa68 	bl	8008ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 faef 	bl	8008dec <UART_CheckIdleState>
 800880e:	4603      	mov	r3, r0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	; 0x28
 800881c:	af02      	add	r7, sp, #8
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	4613      	mov	r3, r2
 8008826:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800882e:	2b20      	cmp	r3, #32
 8008830:	f040 8092 	bne.w	8008958 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <HAL_UART_Transmit+0x28>
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e08a      	b.n	800895a <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_UART_Transmit+0x3a>
 800884e:	2302      	movs	r3, #2
 8008850:	e083      	b.n	800895a <HAL_UART_Transmit+0x142>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008864:	2b80      	cmp	r3, #128	; 0x80
 8008866:	d107      	bne.n	8008878 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689a      	ldr	r2, [r3, #8]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008876:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2221      	movs	r2, #33	; 0x21
 8008884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008888:	f7f9 f992 	bl	8001bb0 <HAL_GetTick>
 800888c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	88fa      	ldrh	r2, [r7, #6]
 8008892:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	88fa      	ldrh	r2, [r7, #6]
 800889a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a6:	d108      	bne.n	80088ba <HAL_UART_Transmit+0xa2>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	61bb      	str	r3, [r7, #24]
 80088b8:	e003      	b.n	80088c2 <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80088ca:	e02c      	b.n	8008926 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2200      	movs	r2, #0
 80088d4:	2180      	movs	r1, #128	; 0x80
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fad3 	bl	8008e82 <UART_WaitOnFlagUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e039      	b.n	800895a <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10b      	bne.n	8008904 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	3302      	adds	r3, #2
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	e007      	b.n	8008914 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	3301      	adds	r3, #1
 8008912:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800891a:	b29b      	uxth	r3, r3
 800891c:	3b01      	subs	r3, #1
 800891e:	b29a      	uxth	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1cc      	bne.n	80088cc <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2200      	movs	r2, #0
 800893a:	2140      	movs	r1, #64	; 0x40
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 faa0 	bl	8008e82 <UART_WaitOnFlagUntilTimeout>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e006      	b.n	800895a <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2220      	movs	r2, #32
 8008950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	e000      	b.n	800895a <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8008958:	2302      	movs	r3, #2
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008968:	b094      	sub	sp, #80	; 0x50
 800896a:	af00      	add	r7, sp, #0
 800896c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	4b7e      	ldr	r3, [pc, #504]	; (8008b74 <UART_SetConfig+0x210>)
 800897a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800897c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	431a      	orrs	r2, r3
 8008986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	431a      	orrs	r2, r3
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898e:	69db      	ldr	r3, [r3, #28]
 8008990:	4313      	orrs	r3, r2
 8008992:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4977      	ldr	r1, [pc, #476]	; (8008b78 <UART_SetConfig+0x214>)
 800899c:	4019      	ands	r1, r3
 800899e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a4:	430b      	orrs	r3, r1
 80089a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	68d9      	ldr	r1, [r3, #12]
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	ea40 0301 	orr.w	r3, r0, r1
 80089be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4b6a      	ldr	r3, [pc, #424]	; (8008b74 <UART_SetConfig+0x210>)
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d009      	beq.n	80089e4 <UART_SetConfig+0x80>
 80089d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	4b69      	ldr	r3, [pc, #420]	; (8008b7c <UART_SetConfig+0x218>)
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d004      	beq.n	80089e4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	6a1a      	ldr	r2, [r3, #32]
 80089de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e0:	4313      	orrs	r3, r2
 80089e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80089ee:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f8:	430b      	orrs	r3, r1
 80089fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a02:	f023 000f 	bic.w	r0, r3, #15
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	ea40 0301 	orr.w	r3, r0, r1
 8008a12:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	4b59      	ldr	r3, [pc, #356]	; (8008b80 <UART_SetConfig+0x21c>)
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d102      	bne.n	8008a24 <UART_SetConfig+0xc0>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a22:	e029      	b.n	8008a78 <UART_SetConfig+0x114>
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	4b56      	ldr	r3, [pc, #344]	; (8008b84 <UART_SetConfig+0x220>)
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d102      	bne.n	8008a34 <UART_SetConfig+0xd0>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a32:	e021      	b.n	8008a78 <UART_SetConfig+0x114>
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	4b53      	ldr	r3, [pc, #332]	; (8008b88 <UART_SetConfig+0x224>)
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d102      	bne.n	8008a44 <UART_SetConfig+0xe0>
 8008a3e:	2304      	movs	r3, #4
 8008a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a42:	e019      	b.n	8008a78 <UART_SetConfig+0x114>
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	4b50      	ldr	r3, [pc, #320]	; (8008b8c <UART_SetConfig+0x228>)
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d102      	bne.n	8008a54 <UART_SetConfig+0xf0>
 8008a4e:	2308      	movs	r3, #8
 8008a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a52:	e011      	b.n	8008a78 <UART_SetConfig+0x114>
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	4b4d      	ldr	r3, [pc, #308]	; (8008b90 <UART_SetConfig+0x22c>)
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d102      	bne.n	8008a64 <UART_SetConfig+0x100>
 8008a5e:	2310      	movs	r3, #16
 8008a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a62:	e009      	b.n	8008a78 <UART_SetConfig+0x114>
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	4b42      	ldr	r3, [pc, #264]	; (8008b74 <UART_SetConfig+0x210>)
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d102      	bne.n	8008a74 <UART_SetConfig+0x110>
 8008a6e:	2320      	movs	r3, #32
 8008a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a72:	e001      	b.n	8008a78 <UART_SetConfig+0x114>
 8008a74:	2300      	movs	r3, #0
 8008a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	4b3d      	ldr	r3, [pc, #244]	; (8008b74 <UART_SetConfig+0x210>)
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d005      	beq.n	8008a8e <UART_SetConfig+0x12a>
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4b3d      	ldr	r3, [pc, #244]	; (8008b7c <UART_SetConfig+0x218>)
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	f040 8085 	bne.w	8008b98 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a90:	2200      	movs	r2, #0
 8008a92:	623b      	str	r3, [r7, #32]
 8008a94:	627a      	str	r2, [r7, #36]	; 0x24
 8008a96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a9a:	f7fe fc15 	bl	80072c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a9e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 80e8 	beq.w	8008c78 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	4a39      	ldr	r2, [pc, #228]	; (8008b94 <UART_SetConfig+0x230>)
 8008aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	005b      	lsls	r3, r3, #1
 8008ac4:	4413      	add	r3, r2
 8008ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d305      	bcc.n	8008ad8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d903      	bls.n	8008ae0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008ade:	e048      	b.n	8008b72 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	61bb      	str	r3, [r7, #24]
 8008ae6:	61fa      	str	r2, [r7, #28]
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	4a29      	ldr	r2, [pc, #164]	; (8008b94 <UART_SetConfig+0x230>)
 8008aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	2200      	movs	r2, #0
 8008af6:	613b      	str	r3, [r7, #16]
 8008af8:	617a      	str	r2, [r7, #20]
 8008afa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008afe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b02:	f7f8 f855 	bl	8000bb0 <__aeabi_uldivmod>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	f04f 0200 	mov.w	r2, #0
 8008b12:	f04f 0300 	mov.w	r3, #0
 8008b16:	020b      	lsls	r3, r1, #8
 8008b18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b1c:	0202      	lsls	r2, r0, #8
 8008b1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b20:	6849      	ldr	r1, [r1, #4]
 8008b22:	0849      	lsrs	r1, r1, #1
 8008b24:	2000      	movs	r0, #0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4605      	mov	r5, r0
 8008b2a:	eb12 0804 	adds.w	r8, r2, r4
 8008b2e:	eb43 0905 	adc.w	r9, r3, r5
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	60bb      	str	r3, [r7, #8]
 8008b3a:	60fa      	str	r2, [r7, #12]
 8008b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b40:	4640      	mov	r0, r8
 8008b42:	4649      	mov	r1, r9
 8008b44:	f7f8 f834 	bl	8000bb0 <__aeabi_uldivmod>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b56:	d308      	bcc.n	8008b6a <UART_SetConfig+0x206>
 8008b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b5e:	d204      	bcs.n	8008b6a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b66:	60da      	str	r2, [r3, #12]
 8008b68:	e003      	b.n	8008b72 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008b70:	e082      	b.n	8008c78 <UART_SetConfig+0x314>
 8008b72:	e081      	b.n	8008c78 <UART_SetConfig+0x314>
 8008b74:	46002400 	.word	0x46002400
 8008b78:	cfff69f3 	.word	0xcfff69f3
 8008b7c:	56002400 	.word	0x56002400
 8008b80:	40013800 	.word	0x40013800
 8008b84:	40004400 	.word	0x40004400
 8008b88:	40004800 	.word	0x40004800
 8008b8c:	40004c00 	.word	0x40004c00
 8008b90:	40005000 	.word	0x40005000
 8008b94:	0800ca34 	.word	0x0800ca34
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ba0:	d13c      	bne.n	8008c1c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bae:	f7fe fb8b 	bl	80072c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bb2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d05e      	beq.n	8008c78 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbe:	4a39      	ldr	r2, [pc, #228]	; (8008ca4 <UART_SetConfig+0x340>)
 8008bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bcc:	005a      	lsls	r2, r3, #1
 8008bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	085b      	lsrs	r3, r3, #1
 8008bd4:	441a      	add	r2, r3
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be2:	2b0f      	cmp	r3, #15
 8008be4:	d916      	bls.n	8008c14 <UART_SetConfig+0x2b0>
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bec:	d212      	bcs.n	8008c14 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	f023 030f 	bic.w	r3, r3, #15
 8008bf6:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfa:	085b      	lsrs	r3, r3, #1
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008c06:	4313      	orrs	r3, r2
 8008c08:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008c10:	60da      	str	r2, [r3, #12]
 8008c12:	e031      	b.n	8008c78 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c1a:	e02d      	b.n	8008c78 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1e:	2200      	movs	r2, #0
 8008c20:	469a      	mov	sl, r3
 8008c22:	4693      	mov	fp, r2
 8008c24:	4650      	mov	r0, sl
 8008c26:	4659      	mov	r1, fp
 8008c28:	f7fe fb4e 	bl	80072c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c2c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d021      	beq.n	8008c78 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c38:	4a1a      	ldr	r2, [pc, #104]	; (8008ca4 <UART_SetConfig+0x340>)
 8008c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c42:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	085b      	lsrs	r3, r3, #1
 8008c4c:	441a      	add	r2, r3
 8008c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c56:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5a:	2b0f      	cmp	r3, #15
 8008c5c:	d909      	bls.n	8008c72 <UART_SetConfig+0x30e>
 8008c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c64:	d205      	bcs.n	8008c72 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60da      	str	r2, [r3, #12]
 8008c70:	e002      	b.n	8008c78 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	2201      	movs	r2, #1
 8008c84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c90:	2200      	movs	r2, #0
 8008c92:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008c94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3750      	adds	r7, #80	; 0x50
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ca2:	bf00      	nop
 8008ca4:	0800ca34 	.word	0x0800ca34

08008ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00a      	beq.n	8008cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd6:	f003 0302 	and.w	r3, r3, #2
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00a      	beq.n	8008d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	430a      	orrs	r2, r1
 8008d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1a:	f003 0308 	and.w	r3, r3, #8
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00a      	beq.n	8008d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	430a      	orrs	r2, r1
 8008d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3c:	f003 0310 	and.w	r3, r3, #16
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00a      	beq.n	8008d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	f003 0320 	and.w	r3, r3, #32
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00a      	beq.n	8008d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d01a      	beq.n	8008dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008da6:	d10a      	bne.n	8008dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	605a      	str	r2, [r3, #4]
  }
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dfc:	f7f8 fed8 	bl	8001bb0 <HAL_GetTick>
 8008e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0308 	and.w	r3, r3, #8
 8008e0c:	2b08      	cmp	r3, #8
 8008e0e:	d10e      	bne.n	8008e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f82f 	bl	8008e82 <UART_WaitOnFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e025      	b.n	8008e7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d10e      	bne.n	8008e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f819 	bl	8008e82 <UART_WaitOnFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e00f      	b.n	8008e7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b09c      	sub	sp, #112	; 0x70
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	603b      	str	r3, [r7, #0]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e92:	e0a9      	b.n	8008fe8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	f000 80a5 	beq.w	8008fe8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e9e:	f7f8 fe87 	bl	8001bb0 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d302      	bcc.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d140      	bne.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ec8:	667b      	str	r3, [r7, #100]	; 0x64
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ed4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ed8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e6      	bne.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef8:	f023 0301 	bic.w	r3, r3, #1
 8008efc:	663b      	str	r3, [r7, #96]	; 0x60
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008f06:	64ba      	str	r2, [r7, #72]	; 0x48
 8008f08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e5      	bne.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e069      	b.n	800900a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d051      	beq.n	8008fe8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f52:	d149      	bne.n	8008fe8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e6      	bne.n	8008f5e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f023 0301 	bic.w	r3, r3, #1
 8008fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3308      	adds	r3, #8
 8008fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fb0:	623a      	str	r2, [r7, #32]
 8008fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	69f9      	ldr	r1, [r7, #28]
 8008fb6:	6a3a      	ldr	r2, [r7, #32]
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e5      	bne.n	8008f90 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e010      	b.n	800900a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	69da      	ldr	r2, [r3, #28]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2301      	moveq	r3, #1
 8008ffa:	2300      	movne	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	461a      	mov	r2, r3
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	429a      	cmp	r2, r3
 8009004:	f43f af46 	beq.w	8008e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3770      	adds	r7, #112	; 0x70
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009012:	b480      	push	{r7}
 8009014:	b085      	sub	sp, #20
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009020:	2b01      	cmp	r3, #1
 8009022:	d101      	bne.n	8009028 <HAL_UARTEx_DisableFifoMode+0x16>
 8009024:	2302      	movs	r3, #2
 8009026:	e027      	b.n	8009078 <HAL_UARTEx_DisableFifoMode+0x66>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2224      	movs	r2, #36	; 0x24
 8009034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0201 	bic.w	r2, r2, #1
 800904e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2220      	movs	r2, #32
 800906a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009098:	2302      	movs	r3, #2
 800909a:	e02d      	b.n	80090f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2224      	movs	r2, #36	; 0x24
 80090a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0201 	bic.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f84f 	bl	800917c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009114:	2302      	movs	r3, #2
 8009116:	e02d      	b.n	8009174 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2224      	movs	r2, #36	; 0x24
 8009124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 0201 	bic.w	r2, r2, #1
 800913e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f811 	bl	800917c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009188:	2b00      	cmp	r3, #0
 800918a:	d108      	bne.n	800919e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800919c:	e031      	b.n	8009202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800919e:	2308      	movs	r3, #8
 80091a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091a2:	2308      	movs	r3, #8
 80091a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	0e5b      	lsrs	r3, r3, #25
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	f003 0307 	and.w	r3, r3, #7
 80091b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	0f5b      	lsrs	r3, r3, #29
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	7b3a      	ldrb	r2, [r7, #12]
 80091ca:	4911      	ldr	r1, [pc, #68]	; (8009210 <UARTEx_SetNbDataToProcess+0x94>)
 80091cc:	5c8a      	ldrb	r2, [r1, r2]
 80091ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091d2:	7b3a      	ldrb	r2, [r7, #12]
 80091d4:	490f      	ldr	r1, [pc, #60]	; (8009214 <UARTEx_SetNbDataToProcess+0x98>)
 80091d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80091dc:	b29a      	uxth	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	7b7a      	ldrb	r2, [r7, #13]
 80091e8:	4909      	ldr	r1, [pc, #36]	; (8009210 <UARTEx_SetNbDataToProcess+0x94>)
 80091ea:	5c8a      	ldrb	r2, [r1, r2]
 80091ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091f0:	7b7a      	ldrb	r2, [r7, #13]
 80091f2:	4908      	ldr	r1, [pc, #32]	; (8009214 <UARTEx_SetNbDataToProcess+0x98>)
 80091f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009202:	bf00      	nop
 8009204:	3714      	adds	r7, #20
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	0800ca4c 	.word	0x0800ca4c
 8009214:	0800ca54 	.word	0x0800ca54

08009218 <OV9712_Init>:

/************************************************************************
 *                      Local Function Definitions                      *
 ***********************************************************************/
void OV9712_Init(OV9712_t *ov9712, camera_params_t * params, I2C_Handle_t *i2c_port, DCMI_Handle_t *dcmi_port, OV9712_pins_t *pins)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
	memcpy( &ov9712->params, params, sizeof(camera_params_t) );
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	3310      	adds	r3, #16
 800922a:	2210      	movs	r2, #16
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fcca 	bl	8009bc8 <memcpy>
	ov9712->params.buffer_size = ov9712->params.width * ov9712->params.height * ov9712->params.depth / 2;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8a1b      	ldrh	r3, [r3, #16]
 8009238:	461a      	mov	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	8a5b      	ldrh	r3, [r3, #18]
 800923e:	fb02 f303 	mul.w	r3, r2, r3
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	7d12      	ldrb	r2, [r2, #20]
 8009246:	fb02 f303 	mul.w	r3, r2, r3
 800924a:	0fda      	lsrs	r2, r3, #31
 800924c:	4413      	add	r3, r2
 800924e:	105b      	asrs	r3, r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	839a      	strh	r2, [r3, #28]
	ov9712->i2c = i2c_port;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	605a      	str	r2, [r3, #4]
	ov9712->dcmi = dcmi_port;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	609a      	str	r2, [r3, #8]
	ov9712->pins = pins;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009266:	60da      	str	r2, [r3, #12]

	PlatformFunctions.CAM.Start_DMA(ov9712->dcmi, DCMI_MODE_CONTINUOUS, (uint32_t)ov9712->params.buffer, (uint32_t)ov9712->params.buffer_size);
 8009268:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <OV9712_Init+0xb0>)
 800926a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6898      	ldr	r0, [r3, #8]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	461a      	mov	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8b9b      	ldrh	r3, [r3, #28]
 800927a:	2100      	movs	r1, #0
 800927c:	47a0      	blx	r4
	OV9712_Functions.Enable(ov9712);
 800927e:	4b13      	ldr	r3, [pc, #76]	; (80092cc <OV9712_Init+0xb4>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	4798      	blx	r3
	HAL_Delay(50);
 8009286:	2032      	movs	r0, #50	; 0x32
 8009288:	f7f8 fc9e 	bl	8001bc8 <HAL_Delay>
	hw_register_t reg;
	for (int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++) {
 800928c:	2300      	movs	r3, #0
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e010      	b.n	80092b4 <OV9712_Init+0x9c>
		reg = OV9712_regs[i];
 8009292:	4a0f      	ldr	r2, [pc, #60]	; (80092d0 <OV9712_Init+0xb8>)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800929a:	823b      	strh	r3, [r7, #16]
		if (reg.Address == ENDR)
 800929c:	7c3b      	ldrb	r3, [r7, #16]
 800929e:	2bff      	cmp	r3, #255	; 0xff
 80092a0:	d00c      	beq.n	80092bc <OV9712_Init+0xa4>
			break;
		OV9712_Functions.Write(ov9712, reg.Address, reg.Value);
 80092a2:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <OV9712_Init+0xb4>)
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	7c39      	ldrb	r1, [r7, #16]
 80092a8:	7c7a      	ldrb	r2, [r7, #17]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	4798      	blx	r3
	for (int i = 0; i < sizeof(OV9712_regs) / sizeof(OV9712_regs[0]); i++) {
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3301      	adds	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	2b0c      	cmp	r3, #12
 80092b8:	d9eb      	bls.n	8009292 <OV9712_Init+0x7a>
	}
}
 80092ba:	e000      	b.n	80092be <OV9712_Init+0xa6>
			break;
 80092bc:	bf00      	nop
}
 80092be:	bf00      	nop
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd90      	pop	{r4, r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20000024 	.word	0x20000024
 80092cc:	20000090 	.word	0x20000090
 80092d0:	200000a4 	.word	0x200000a4

080092d4 <OV9712_Write>:
void OV9712_Write(OV9712_t *ov9712, uint8_t r, uint8_t v)
{
 80092d4:	b590      	push	{r4, r7, lr}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af02      	add	r7, sp, #8
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
 80092e0:	4613      	mov	r3, r2
 80092e2:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2] = { r, v };
 80092e4:	78fb      	ldrb	r3, [r7, #3]
 80092e6:	733b      	strb	r3, [r7, #12]
 80092e8:	78bb      	ldrb	r3, [r7, #2]
 80092ea:	737b      	strb	r3, [r7, #13]
	PlatformFunctions.I2C.Transmit(ov9712->i2c, ov9712->address, data, 2, 100);
 80092ec:	4b08      	ldr	r3, [pc, #32]	; (8009310 <OV9712_Write+0x3c>)
 80092ee:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6858      	ldr	r0, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	b299      	uxth	r1, r3
 80092fa:	f107 020c 	add.w	r2, r7, #12
 80092fe:	2364      	movs	r3, #100	; 0x64
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	2302      	movs	r3, #2
 8009304:	47a0      	blx	r4
}
 8009306:	bf00      	nop
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	bd90      	pop	{r4, r7, pc}
 800930e:	bf00      	nop
 8009310:	20000024 	.word	0x20000024

08009314 <OV9712_Enable>:

void OV9712_Enable(OV9712_t *ov9712)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	if (ov9712->pins == NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d02a      	beq.n	800937a <OV9712_Enable+0x66>
		return;
	PlatformFunctions.GPIO.Write( &ov9712->pins->RESET, GPIO_PIN_SET );
 8009324:	4b17      	ldr	r3, [pc, #92]	; (8009384 <OV9712_Enable+0x70>)
 8009326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	68d2      	ldr	r2, [r2, #12]
 800932c:	2101      	movs	r1, #1
 800932e:	4610      	mov	r0, r2
 8009330:	4798      	blx	r3
	PlatformFunctions.GPIO.Write( &ov9712->pins->LOW_VOLTAGE, GPIO_PIN_SET );
 8009332:	4b14      	ldr	r3, [pc, #80]	; (8009384 <OV9712_Enable+0x70>)
 8009334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	68d2      	ldr	r2, [r2, #12]
 800933a:	3208      	adds	r2, #8
 800933c:	2101      	movs	r1, #1
 800933e:	4610      	mov	r0, r2
 8009340:	4798      	blx	r3
	PlatformFunctions.GPIO.Write( &ov9712->pins->POWER_DOWN, GPIO_PIN_RESET );
 8009342:	4b10      	ldr	r3, [pc, #64]	; (8009384 <OV9712_Enable+0x70>)
 8009344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	68d2      	ldr	r2, [r2, #12]
 800934a:	3210      	adds	r2, #16
 800934c:	2100      	movs	r1, #0
 800934e:	4610      	mov	r0, r2
 8009350:	4798      	blx	r3
	PlatformFunctions.GPIO.SetPortMode( &ov9712->pins->MASTER_CLOCK, GPIO_MODE_AF_PP );
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <OV9712_Enable+0x70>)
 8009354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	68d2      	ldr	r2, [r2, #12]
 800935a:	3218      	adds	r2, #24
 800935c:	2102      	movs	r1, #2
 800935e:	4610      	mov	r0, r2
 8009360:	4798      	blx	r3
	if (PlatformFunctions.CAM.Resume( ov9712->dcmi ) != HAL_OK)
 8009362:	4b08      	ldr	r3, [pc, #32]	; (8009384 <OV9712_Enable+0x70>)
 8009364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	6892      	ldr	r2, [r2, #8]
 800936a:	4610      	mov	r0, r2
 800936c:	4798      	blx	r3
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d003      	beq.n	800937c <OV9712_Enable+0x68>
	{
		Error_Handler();
 8009374:	f7f8 f88e 	bl	8001494 <Error_Handler>
 8009378:	e000      	b.n	800937c <OV9712_Enable+0x68>
		return;
 800937a:	bf00      	nop
	}
}
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	20000024 	.word	0x20000024

08009388 <OV9712_Disable>:

void OV9712_Disable(OV9712_t *ov9712)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	if (ov9712->pins == NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d023      	beq.n	80093e0 <OV9712_Disable+0x58>
		return;
	PlatformFunctions.GPIO.Write(&ov9712->pins->LOW_VOLTAGE, GPIO_PIN_RESET);
 8009398:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <OV9712_Disable+0x60>)
 800939a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	68d2      	ldr	r2, [r2, #12]
 80093a0:	3208      	adds	r2, #8
 80093a2:	2100      	movs	r1, #0
 80093a4:	4610      	mov	r0, r2
 80093a6:	4798      	blx	r3
	PlatformFunctions.GPIO.Write(&ov9712->pins->POWER_DOWN, GPIO_PIN_SET);
 80093a8:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <OV9712_Disable+0x60>)
 80093aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68d2      	ldr	r2, [r2, #12]
 80093b0:	3210      	adds	r2, #16
 80093b2:	2101      	movs	r1, #1
 80093b4:	4610      	mov	r0, r2
 80093b6:	4798      	blx	r3
	PlatformFunctions.GPIO.SetPortMode(&ov9712->pins->MASTER_CLOCK, GPIO_MODE_INPUT);
 80093b8:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <OV9712_Disable+0x60>)
 80093ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	68d2      	ldr	r2, [r2, #12]
 80093c0:	3218      	adds	r2, #24
 80093c2:	2100      	movs	r1, #0
 80093c4:	4610      	mov	r0, r2
 80093c6:	4798      	blx	r3
	if (PlatformFunctions.CAM.Suspend(ov9712->dcmi) != HAL_OK)
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <OV9712_Disable+0x60>)
 80093ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6892      	ldr	r2, [r2, #8]
 80093d0:	4610      	mov	r0, r2
 80093d2:	4798      	blx	r3
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <OV9712_Disable+0x5a>
	{
		Error_Handler();
 80093da:	f7f8 f85b 	bl	8001494 <Error_Handler>
 80093de:	e000      	b.n	80093e2 <OV9712_Disable+0x5a>
		return;
 80093e0:	bf00      	nop
	}
}
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20000024 	.word	0x20000024

080093ec <OV9712_Reset>:

void OV9712_Reset(OV9712_t *ov9712)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	PlatformFunctions.GPIO.Write(&ov9712->pins->RESET, GPIO_PIN_RESET);
 80093f4:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <OV9712_Reset+0x34>)
 80093f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	68d2      	ldr	r2, [r2, #12]
 80093fc:	2100      	movs	r1, #0
 80093fe:	4610      	mov	r0, r2
 8009400:	4798      	blx	r3
	HAL_Delay(1000);
 8009402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009406:	f7f8 fbdf 	bl	8001bc8 <HAL_Delay>
	PlatformFunctions.GPIO.Write(&ov9712->pins->RESET, GPIO_PIN_SET);
 800940a:	4b05      	ldr	r3, [pc, #20]	; (8009420 <OV9712_Reset+0x34>)
 800940c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	68d2      	ldr	r2, [r2, #12]
 8009412:	2101      	movs	r1, #1
 8009414:	4610      	mov	r0, r2
 8009416:	4798      	blx	r3
}
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	20000024 	.word	0x20000024

08009424 <InitializePlatform>:
/***************************************************************************************/
/*                                  Core Routines                                      */
/***************************************************************************************/
/* INITIALIZING State Routine */
void InitializePlatform( void )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
//    SpoofDensityMap( y, CAPTURE_HEIGHT );
//    DrawDensityMap( x, CAPTURE_WIDTH );
//    DrawDensityMap( y, CAPTURE_HEIGHT );
//    PrintDensityMaps( x, CAPTURE_WIDTH, y, CAPTURE_HEIGHT );

    PlatformFunctions.Init( &Platform, HOST_COMM_PROTOCOL, (generic_handle_t)Master.IOs->HOST_DEFAULT_CHANNEL );
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <InitializePlatform+0x18>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a04      	ldr	r2, [pc, #16]	; (8009440 <InitializePlatform+0x1c>)
 800942e:	6812      	ldr	r2, [r2, #0]
 8009430:	6852      	ldr	r2, [r2, #4]
 8009432:	2102      	movs	r1, #2
 8009434:	4803      	ldr	r0, [pc, #12]	; (8009444 <InitializePlatform+0x20>)
 8009436:	4798      	blx	r3
}
 8009438:	bf00      	nop
 800943a:	bd80      	pop	{r7, pc}
 800943c:	200000c0 	.word	0x200000c0
 8009440:	2001fab0 	.word	0x2001fab0
 8009444:	2001faa8 	.word	0x2001faa8

08009448 <ConnectToHost>:

/* CONNECTING_TO_HOST State Routine */
void ConnectToHost( void )
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
  while( PlatformFunctions.Host.Command( PING_HOST, NEEDED ) != OK )
  {
    PlatformFunctions.Wait( HOST_COMMAND_WAIT_TIME );
  }
#endif
}
 800944c:	bf00      	nop
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
	...

08009458 <ConfigureApplication>:

/* CONFIGURING State Routine */
void ConfigureApplication( void )
{
 8009458:	b590      	push	{r4, r7, lr}
 800945a:	b083      	sub	sp, #12
 800945c:	af02      	add	r7, sp, #8
#ifdef __OV9712__
  OV9712_Functions.Init( &OV9712, &camera_params, Master.IOs->CAMERA_COMM_CHANNEL, Master.IOs->CAMERA_DATA_CHANNEL, &Default_OV9712_Pins );
 800945e:	4b08      	ldr	r3, [pc, #32]	; (8009480 <ConfigureApplication+0x28>)
 8009460:	681c      	ldr	r4, [r3, #0]
 8009462:	4b08      	ldr	r3, [pc, #32]	; (8009484 <ConfigureApplication+0x2c>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	4b06      	ldr	r3, [pc, #24]	; (8009484 <ConfigureApplication+0x2c>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	4906      	ldr	r1, [pc, #24]	; (8009488 <ConfigureApplication+0x30>)
 8009470:	9100      	str	r1, [sp, #0]
 8009472:	4906      	ldr	r1, [pc, #24]	; (800948c <ConfigureApplication+0x34>)
 8009474:	4806      	ldr	r0, [pc, #24]	; (8009490 <ConfigureApplication+0x38>)
 8009476:	47a0      	blx	r4
#endif
#ifdef __RHO__
  RhoSystem.Functions.Perform.ConnectToInterface( &PlatformFunctions, &Platform.CameraFlags );
  RhoSystem.Functions.Perform.Initialize( CAMERA_PORT, UART_TX_PORT );
#endif
}
 8009478:	bf00      	nop
 800947a:	3704      	adds	r7, #4
 800947c:	46bd      	mov	sp, r7
 800947e:	bd90      	pop	{r4, r7, pc}
 8009480:	2000012c 	.word	0x2000012c
 8009484:	2001fab0 	.word	0x2001fab0
 8009488:	20000140 	.word	0x20000140
 800948c:	20000180 	.word	0x20000180
 8009490:	20000160 	.word	0x20000160

08009494 <ExitInitialization>:

/* READY State Routine */
void ExitInitialization( void )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	af00      	add	r7, sp, #0
#ifdef __RHO__
  RhoSystem.Functions.Perform.Activate();
#endif
	if( SystemFunctions.State.IsIn( &System, READY ) )
 8009498:	4b08      	ldr	r3, [pc, #32]	; (80094bc <ExitInitialization+0x28>)
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	2104      	movs	r1, #4
 800949e:	4808      	ldr	r0, [pc, #32]	; (80094c0 <ExitInitialization+0x2c>)
 80094a0:	4798      	blx	r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <ExitInitialization+0x1c>
		MasterFunctions.Run();
 80094a8:	4b06      	ldr	r3, [pc, #24]	; (80094c4 <ExitInitialization+0x30>)
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	4798      	blx	r3
	else
		PlatformFunctions.Wait(250);
}
 80094ae:	e003      	b.n	80094b8 <ExitInitialization+0x24>
		PlatformFunctions.Wait(250);
 80094b0:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <ExitInitialization+0x34>)
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	20fa      	movs	r0, #250	; 0xfa
 80094b6:	4798      	blx	r3
}
 80094b8:	bf00      	nop
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000198 	.word	0x20000198
 80094c0:	20000190 	.word	0x20000190
 80094c4:	200001b8 	.word	0x200001b8
 80094c8:	200000c0 	.word	0x200000c0

080094cc <ApplicationCore>:

/* ACTIVE State Routine */
inline void ApplicationCore( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
#ifdef __RHO__
    RhoSystem.Functions.Perform.CoreProcess();
#else
#warning "No application core."
#endif
}
 80094d0:	bf00      	nop
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
	...

080094dc <SystemError>:

/* SYS_ERROR State Routine */
void SystemError( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
    LOG( ALWAYS, "System error! Resetting in" );
 80094e2:	2304      	movs	r3, #4
 80094e4:	71fb      	strb	r3, [r7, #7]
 80094e6:	e005      	b.n	80094f4 <SystemError+0x18>
 80094e8:	2009      	movs	r0, #9
 80094ea:	f001 f807 	bl	800a4fc <putchar>
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	3301      	adds	r3, #1
 80094f2:	71fb      	strb	r3, [r7, #7]
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	2b03      	cmp	r3, #3
 80094f8:	d9f6      	bls.n	80094e8 <SystemError+0xc>
 80094fa:	480e      	ldr	r0, [pc, #56]	; (8009534 <SystemError+0x58>)
 80094fc:	f000 ffe6 	bl	800a4cc <iprintf>
    for( uint8_t i = 3 ; i > 0; i-- )
 8009500:	2303      	movs	r3, #3
 8009502:	71bb      	strb	r3, [r7, #6]
 8009504:	e00c      	b.n	8009520 <SystemError+0x44>
    {
        LOG_BARE( ALWAYS, " %d", i );
 8009506:	79bb      	ldrb	r3, [r7, #6]
 8009508:	4619      	mov	r1, r3
 800950a:	480b      	ldr	r0, [pc, #44]	; (8009538 <SystemError+0x5c>)
 800950c:	f000 ffde 	bl	800a4cc <iprintf>
        PlatformFunctions.Wait(1000);
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <SystemError+0x60>)
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009518:	4798      	blx	r3
    for( uint8_t i = 3 ; i > 0; i-- )
 800951a:	79bb      	ldrb	r3, [r7, #6]
 800951c:	3b01      	subs	r3, #1
 800951e:	71bb      	strb	r3, [r7, #6]
 8009520:	79bb      	ldrb	r3, [r7, #6]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1ef      	bne.n	8009506 <SystemError+0x2a>
    }
    PlatformFunctions.Reset();
 8009526:	4b05      	ldr	r3, [pc, #20]	; (800953c <SystemError+0x60>)
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	4798      	blx	r3
}
 800952c:	bf00      	nop
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	0800c8d8 	.word	0x0800c8d8
 8009538:	0800c8f4 	.word	0x0800c8f4
 800953c:	200000c0 	.word	0x200000c0

08009540 <Master_Connect>:

/***************************************************************************************/
/*                                Master Initialize                                    */
/***************************************************************************************/
void Master_Connect( master_ios_t * ios )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
	Master.IOs = ios;
 8009548:	4a07      	ldr	r2, [pc, #28]	; (8009568 <Master_Connect+0x28>)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800954e:	2201      	movs	r2, #1
 8009550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009554:	4805      	ldr	r0, [pc, #20]	; (800956c <Master_Connect+0x2c>)
 8009556:	f7fa fcd3 	bl	8003f00 <HAL_GPIO_WritePin>
	MasterFunctions.Init();
 800955a:	4b05      	ldr	r3, [pc, #20]	; (8009570 <Master_Connect+0x30>)
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	4798      	blx	r3
}
 8009560:	bf00      	nop
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	2001fab0 	.word	0x2001fab0
 800956c:	42020400 	.word	0x42020400
 8009570:	200001b8 	.word	0x200001b8

08009574 <Master_Init>:

void Master_Init( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
	/* Initialize state manager */
	SystemFunctions.Init( &System, &global_states_list );
 8009578:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <Master_Init+0x3c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	490d      	ldr	r1, [pc, #52]	; (80095b4 <Master_Init+0x40>)
 800957e:	480e      	ldr	r0, [pc, #56]	; (80095b8 <Master_Init+0x44>)
 8009580:	4798      	blx	r3

	/* Initialize core platform */
	SystemFunctions.State.Enter( &System, INITIALIZING );
 8009582:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <Master_Init+0x3c>)
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2101      	movs	r1, #1
 8009588:	480b      	ldr	r0, [pc, #44]	; (80095b8 <Master_Init+0x44>)
 800958a:	4798      	blx	r3

	/* Connect to host, this is critical for finishing initialization hence endless loop */
	SystemFunctions.State.Enter( &System, CONNECTING_TO_HOST );
 800958c:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <Master_Init+0x3c>)
 800958e:	691b      	ldr	r3, [r3, #16]
 8009590:	2102      	movs	r1, #2
 8009592:	4809      	ldr	r0, [pc, #36]	; (80095b8 <Master_Init+0x44>)
 8009594:	4798      	blx	r3

	/* Configure application items */
	SystemFunctions.State.Enter( &System, CONFIGURING );
 8009596:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <Master_Init+0x3c>)
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2103      	movs	r1, #3
 800959c:	4806      	ldr	r0, [pc, #24]	; (80095b8 <Master_Init+0x44>)
 800959e:	4798      	blx	r3

	/* Exit initialization, enter run */
	SystemFunctions.State.Enter( &System, READY );
 80095a0:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <Master_Init+0x3c>)
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	2104      	movs	r1, #4
 80095a6:	4804      	ldr	r0, [pc, #16]	; (80095b8 <Master_Init+0x44>)
 80095a8:	4798      	blx	r3
}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000198 	.word	0x20000198
 80095b4:	200001c4 	.word	0x200001c4
 80095b8:	20000190 	.word	0x20000190

080095bc <HAL_DCMI_FrameEventCallback>:


__IO uint32_t frame_captured = 0;
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  frame_captured++;
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <HAL_DCMI_FrameEventCallback+0x20>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	3301      	adds	r3, #1
 80095ca:	4a04      	ldr	r2, [pc, #16]	; (80095dc <HAL_DCMI_FrameEventCallback+0x20>)
 80095cc:	6013      	str	r3, [r2, #0]
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	2001faa4 	.word	0x2001faa4

080095e0 <HAL_DCMI_ErrorCallback>:
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  frame_captured++;
 80095e8:	4b05      	ldr	r3, [pc, #20]	; (8009600 <HAL_DCMI_ErrorCallback+0x20>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3301      	adds	r3, #1
 80095ee:	4a04      	ldr	r2, [pc, #16]	; (8009600 <HAL_DCMI_ErrorCallback+0x20>)
 80095f0:	6013      	str	r3, [r2, #0]
}
 80095f2:	bf00      	nop
 80095f4:	370c      	adds	r7, #12
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	2001faa4 	.word	0x2001faa4

08009604 <Master_Run>:

/***************************************************************************************/
/*                                   Master Run                                        */
/***************************************************************************************/
void Master_Run( void )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	af00      	add	r7, sp, #0
	SystemFunctions.State.Set( &System, ACTIVE );
 8009608:	4b0b      	ldr	r3, [pc, #44]	; (8009638 <Master_Run+0x34>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	2105      	movs	r1, #5
 800960e:	480b      	ldr	r0, [pc, #44]	; (800963c <Master_Run+0x38>)
 8009610:	4798      	blx	r3
	PlatformFunctions.CAM.Resume( OV9712.dcmi );
 8009612:	4b0b      	ldr	r3, [pc, #44]	; (8009640 <Master_Run+0x3c>)
 8009614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009616:	4a0b      	ldr	r2, [pc, #44]	; (8009644 <Master_Run+0x40>)
 8009618:	6892      	ldr	r2, [r2, #8]
 800961a:	4610      	mov	r0, r2
 800961c:	4798      	blx	r3
	while(1)
	{
		if( frame_captured != 0 )
 800961e:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <Master_Run+0x44>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0fb      	beq.n	800961e <Master_Run+0x1a>
		{
			frame_captured = 0;
 8009626:	4b08      	ldr	r3, [pc, #32]	; (8009648 <Master_Run+0x44>)
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800962c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009630:	4806      	ldr	r0, [pc, #24]	; (800964c <Master_Run+0x48>)
 8009632:	f7fa fc7d 	bl	8003f30 <HAL_GPIO_TogglePin>
		if( frame_captured != 0 )
 8009636:	e7f2      	b.n	800961e <Master_Run+0x1a>
 8009638:	20000198 	.word	0x20000198
 800963c:	20000190 	.word	0x20000190
 8009640:	200000c0 	.word	0x200000c0
 8009644:	20000160 	.word	0x20000160
 8009648:	2001faa4 	.word	0x2001faa4
 800964c:	42020400 	.word	0x42020400

08009650 <InitPlatform>:

/************************************************************************
 *                      Local Function Definitions                      *
 ***********************************************************************/
void InitPlatform( platform_t * platform, protocol_t host_communication_protocol, generic_handle_t host_communication_handle )
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	460b      	mov	r3, r1
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	72fb      	strb	r3, [r7, #11]
  *platform = (platform_t){ host_communication_protocol, host_communication_handle };
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	7afa      	ldrb	r2, [r7, #11]
 8009662:	701a      	strb	r2, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	605a      	str	r2, [r3, #4]
}
 800966a:	bf00      	nop
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <WritePin>:

void WritePin( GPIO_t * gpio, uint16_t val )
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	807b      	strh	r3, [r7, #2]
  PLATFORM_SPECIFIC(WritePin)( gpio->port, gpio->pin, val );
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	889b      	ldrh	r3, [r3, #4]
 800968a:	887a      	ldrh	r2, [r7, #2]
 800968c:	b2d2      	uxtb	r2, r2
 800968e:	4619      	mov	r1, r3
 8009690:	f000 fa40 	bl	8009b14 <STM_WritePin>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <SetPortMode>:

void SetPortMode(GPIO_t * gpio, uint16_t val )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	807b      	strh	r3, [r7, #2]
  PLATFORM_SPECIFIC(SetPortMode)( gpio->port, gpio->pin, val );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	889b      	ldrh	r3, [r3, #4]
 80096b0:	887a      	ldrh	r2, [r7, #2]
 80096b2:	b2d2      	uxtb	r2, r2
 80096b4:	4619      	mov	r1, r3
 80096b6:	f000 fa02 	bl	8009abe <STM_SetPortMode>
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <PerformHostCommand>:

platform_status_enum PerformHostCommand(
  host_command_type_enum command,
  platform_wait_priority_level_enum priority )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	460a      	mov	r2, r1
 80096ce:	71fb      	strb	r3, [r7, #7]
 80096d0:	4613      	mov	r3, r2
 80096d2:	71bb      	strb	r3, [r7, #6]
  platform_status_enum status = NO_STATUS;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]
  uint16_t return_data = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	81bb      	strh	r3, [r7, #12]
  host_command_t packet = { HOST_ADDRESS, THIS_ID, priority, command };
 80096dc:	2301      	movs	r3, #1
 80096de:	723b      	strb	r3, [r7, #8]
 80096e0:	2301      	movs	r3, #1
 80096e2:	727b      	strb	r3, [r7, #9]
 80096e4:	79bb      	ldrb	r3, [r7, #6]
 80096e6:	72bb      	strb	r3, [r7, #10]
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	72fb      	strb	r3, [r7, #11]
  for( uint8_t i = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73bb      	strb	r3, [r7, #14]
 80096f0:	e025      	b.n	800973e <PerformHostCommand+0x7a>
    i < HOST_COMM_RETRIES
    && status != OK;
    i++ )
  {
    switch( command )
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d117      	bne.n	8009728 <PerformHostCommand+0x64>
    {
      case PING_HOST:
        return_data = PlatformFunctions.Host.Transmit( (uint8_t *)&packet, sizeof(host_command_t) );
 80096f8:	4b16      	ldr	r3, [pc, #88]	; (8009754 <PerformHostCommand+0x90>)
 80096fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fc:	f107 0208 	add.w	r2, r7, #8
 8009700:	2104      	movs	r1, #4
 8009702:	4610      	mov	r0, r2
 8009704:	4798      	blx	r3
 8009706:	4603      	mov	r3, r0
 8009708:	81bb      	strh	r3, [r7, #12]
        if( return_data == 0 )
 800970a:	89bb      	ldrh	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d102      	bne.n	8009716 <PerformHostCommand+0x52>
        {
          status = FAILURE;
 8009710:	2302      	movs	r3, #2
 8009712:	73fb      	strb	r3, [r7, #15]
          continue;
 8009714:	e010      	b.n	8009738 <PerformHostCommand+0x74>
        }
//        return_data = PlatformFunctions.Host.Receive( /* Enter correct buffer */ );
        if( return_data == 0 )
 8009716:	89bb      	ldrh	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d102      	bne.n	8009722 <PerformHostCommand+0x5e>
        {
          status = INVALID_OUTPUT;
 800971c:	2304      	movs	r3, #4
 800971e:	73fb      	strb	r3, [r7, #15]
          continue;
 8009720:	e00a      	b.n	8009738 <PerformHostCommand+0x74>
        }
        status = OK;
 8009722:	2301      	movs	r3, #1
 8009724:	73fb      	strb	r3, [r7, #15]
        break;
 8009726:	e002      	b.n	800972e <PerformHostCommand+0x6a>
      default:
        status = INVALID_INPUT;
 8009728:	2303      	movs	r3, #3
 800972a:	73fb      	strb	r3, [r7, #15]
        break;
 800972c:	bf00      	nop
    }
    PlatformFunctions.Wait( HOST_COMMAND_RETRY_TIME );
 800972e:	4b09      	ldr	r3, [pc, #36]	; (8009754 <PerformHostCommand+0x90>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009736:	4798      	blx	r3
    i++ )
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	3301      	adds	r3, #1
 800973c:	73bb      	strb	r3, [r7, #14]
  for( uint8_t i = 0;
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b02      	cmp	r3, #2
 8009742:	d802      	bhi.n	800974a <PerformHostCommand+0x86>
    && status != OK;
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d1d3      	bne.n	80096f2 <PerformHostCommand+0x2e>
  }
  return status;
 800974a:	7bfb      	ldrb	r3, [r7, #15]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	20000204 	.word	0x20000204

08009758 <TransmitToHost>:

uint8_t TransmitToHost( uint8_t * buffer, uint16_t length )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	807b      	strh	r3, [r7, #2]
#if HOST_COMMUNICATION_PROTOCOL == USART
  return PlatformFunctions.USART.Transmit( (UART_Handle_t *)Platform.HostHandle, buffer, length );
 8009764:	4b05      	ldr	r3, [pc, #20]	; (800977c <TransmitToHost+0x24>)
 8009766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009768:	4a05      	ldr	r2, [pc, #20]	; (8009780 <TransmitToHost+0x28>)
 800976a:	6850      	ldr	r0, [r2, #4]
 800976c:	887a      	ldrh	r2, [r7, #2]
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	4798      	blx	r3
 8009772:	4603      	mov	r3, r0
#elif HOST_COMMUNICATION_PROTOCOL == USB
  return CDC_Transmit_FS(buffer, length);
#else
#error "Invalid host communication protocol!"
#endif
}
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	20000204 	.word	0x20000204
 8009780:	2001faa8 	.word	0x2001faa8

08009784 <ReceiveFromHost>:
uint16_t ReceiveFromHost( uint8_t * buffer )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  #if HOST_COMMUNICATION_PROTOCOL == USART
    return PlatformFunctions.USART.Receive( (UART_Handle_t *)Platform.HostHandle, buffer );
 800978c:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <ReceiveFromHost+0x20>)
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	4a05      	ldr	r2, [pc, #20]	; (80097a8 <ReceiveFromHost+0x24>)
 8009792:	6852      	ldr	r2, [r2, #4]
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	4610      	mov	r0, r2
 8009798:	4798      	blx	r3
 800979a:	4603      	mov	r3, r0
    PlatformFunctions.I2C.Receive( (I2C_Handle_t *)Platform.HostHandle, HOST_ADDRESS, data, len );
    return 1;
  #else
  #error "Invalid host communication protocol!"
  #endif
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000204 	.word	0x20000204
 80097a8:	2001faa8 	.word	0x2001faa8

080097ac <InitSystem>:
#include "system.h"

void InitSystem(
  system_t * system,
  system_states_list_t * state_list )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  system->state_list = state_list;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	605a      	str	r2, [r3, #4]
  SystemFunctions.State.Set( system, system->state );
 80097bc:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <InitSystem+0x28>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	7852      	ldrb	r2, [r2, #1]
 80097c4:	4611      	mov	r1, r2
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	4798      	blx	r3
}
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	2000028c 	.word	0x2000028c

080097d8 <NextStateSystem>:

void NextStateSystem( system_t * system )
{
 80097d8:	b590      	push	{r4, r7, lr}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  SystemFunctions.State.Enter( system, SystemFunctions.State.Get(system)->next );
 80097e0:	4b07      	ldr	r3, [pc, #28]	; (8009800 <NextStateSystem+0x28>)
 80097e2:	691c      	ldr	r4, [r3, #16]
 80097e4:	4b06      	ldr	r3, [pc, #24]	; (8009800 <NextStateSystem+0x28>)
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
 80097ec:	4603      	mov	r3, r0
 80097ee:	785b      	ldrb	r3, [r3, #1]
 80097f0:	4619      	mov	r1, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	47a0      	blx	r4
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd90      	pop	{r4, r7, pc}
 80097fe:	bf00      	nop
 8009800:	2000028c 	.word	0x2000028c

08009804 <GetStateSystem>:

system_state_t * GetStateSystem( system_t * system )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  return SystemFunctions.State.GetFromList( system, system->state );
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <GetStateSystem+0x20>)
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	7852      	ldrb	r2, [r2, #1]
 8009814:	4611      	mov	r1, r2
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
 800981a:	4603      	mov	r3, r0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	2000028c 	.word	0x2000028c

08009828 <SetStateSystem>:

void SetStateSystem( system_t * system, system_state_enum new_state )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
	if( new_state >= NUM_SYSTEM_STATES )
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	2b07      	cmp	r3, #7
 8009838:	d81c      	bhi.n	8009874 <SetStateSystem+0x4c>
		return;
  if( system->state != new_state )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	785b      	ldrb	r3, [r3, #1]
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	429a      	cmp	r2, r3
 8009842:	d013      	beq.n	800986c <SetStateSystem+0x44>
  {
	  LOG(STATE_DEBUG, "Entering %s\r\n", system_state_enum_strings[new_state]);
 8009844:	2303      	movs	r3, #3
 8009846:	73fb      	strb	r3, [r7, #15]
 8009848:	e005      	b.n	8009856 <SetStateSystem+0x2e>
 800984a:	2009      	movs	r0, #9
 800984c:	f000 fe56 	bl	800a4fc <putchar>
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	3301      	adds	r3, #1
 8009854:	73fb      	strb	r3, [r7, #15]
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	2b03      	cmp	r3, #3
 800985a:	d9f6      	bls.n	800984a <SetStateSystem+0x22>
 800985c:	78fb      	ldrb	r3, [r7, #3]
 800985e:	4a07      	ldr	r2, [pc, #28]	; (800987c <SetStateSystem+0x54>)
 8009860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009864:	4619      	mov	r1, r3
 8009866:	4806      	ldr	r0, [pc, #24]	; (8009880 <SetStateSystem+0x58>)
 8009868:	f000 fe30 	bl	800a4cc <iprintf>
  }
  system->state = new_state;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	78fa      	ldrb	r2, [r7, #3]
 8009870:	705a      	strb	r2, [r3, #1]
 8009872:	e000      	b.n	8009876 <SetStateSystem+0x4e>
		return;
 8009874:	bf00      	nop
}
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20000270 	.word	0x20000270
 8009880:	0800c94c 	.word	0x0800c94c

08009884 <PerformStateSystem>:

void PerformStateSystem( system_t * system )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  void (*routine)(void) = SystemFunctions.State.Get(system)->routine;
 800988c:	4b07      	ldr	r3, [pc, #28]	; (80098ac <PerformStateSystem+0x28>)
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	4798      	blx	r3
 8009894:	4603      	mov	r3, r0
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	60fb      	str	r3, [r7, #12]
  if( routine != NULL ) routine();
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <PerformStateSystem+0x20>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4798      	blx	r3
}
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	2000028c 	.word	0x2000028c

080098b0 <EnterStateSystem>:

void EnterStateSystem( system_t * system, system_state_enum new_state )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
  SystemFunctions.State.Set( system, new_state );
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <EnterStateSystem+0x28>)
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	78fa      	ldrb	r2, [r7, #3]
 80098c2:	4611      	mov	r1, r2
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	4798      	blx	r3
  SystemFunctions.State.Perform( system );
 80098c8:	4b03      	ldr	r3, [pc, #12]	; (80098d8 <EnterStateSystem+0x28>)
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	4798      	blx	r3
}
 80098d0:	bf00      	nop
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	2000028c 	.word	0x2000028c

080098dc <IsInStateSystem>:

bool IsInStateSystem( system_t * system, system_state_enum check_state )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  return ( SystemFunctions.State.Get( system )->state == check_state );
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <IsInStateSystem+0x2c>)
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
 80098f0:	4603      	mov	r3, r0
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	78fa      	ldrb	r2, [r7, #3]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	bf0c      	ite	eq
 80098fa:	2301      	moveq	r3, #1
 80098fc:	2300      	movne	r3, #0
 80098fe:	b2db      	uxtb	r3, r3
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	2000028c 	.word	0x2000028c

0800990c <GetStateFromListSystem>:

system_state_t * GetStateFromListSystem( system_t * system, system_state_enum state )
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	70fb      	strb	r3, [r7, #3]
    system_state_t * state_type;
    /* Cycle state list to find specified state.
        If not found, return is ERROR_STATE */
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 8009918:	2300      	movs	r3, #0
 800991a:	72fb      	strb	r3, [r7, #11]
 800991c:	e00d      	b.n	800993a <GetStateFromListSystem+0x2e>
    {
        state_type = &(*system->state_list)[i];
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	7afb      	ldrb	r3, [r7, #11]
 8009924:	00db      	lsls	r3, r3, #3
 8009926:	4413      	add	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]
        if( state_type->state == state ) break;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	429a      	cmp	r2, r3
 8009932:	d006      	beq.n	8009942 <GetStateFromListSystem+0x36>
    for( uint8_t i = 0; i < SYS_ERROR; i++ )
 8009934:	7afb      	ldrb	r3, [r7, #11]
 8009936:	3301      	adds	r3, #1
 8009938:	72fb      	strb	r3, [r7, #11]
 800993a:	7afb      	ldrb	r3, [r7, #11]
 800993c:	2b06      	cmp	r3, #6
 800993e:	d9ee      	bls.n	800991e <GetStateFromListSystem+0x12>
 8009940:	e000      	b.n	8009944 <GetStateFromListSystem+0x38>
        if( state_type->state == state ) break;
 8009942:	bf00      	nop
    }
    return state_type;
 8009944:	68fb      	ldr	r3, [r7, #12]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <__NVIC_SystemReset>:
{
 8009954:	b480      	push	{r7}
 8009956:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009958:	f3bf 8f4f 	dsb	sy
}
 800995c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800995e:	4b06      	ldr	r3, [pc, #24]	; (8009978 <__NVIC_SystemReset+0x24>)
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009966:	4904      	ldr	r1, [pc, #16]	; (8009978 <__NVIC_SystemReset+0x24>)
 8009968:	4b04      	ldr	r3, [pc, #16]	; (800997c <__NVIC_SystemReset+0x28>)
 800996a:	4313      	orrs	r3, r2
 800996c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800996e:	f3bf 8f4f 	dsb	sy
}
 8009972:	bf00      	nop
    __NOP();
 8009974:	bf00      	nop
 8009976:	e7fd      	b.n	8009974 <__NVIC_SystemReset+0x20>
 8009978:	e000ed00 	.word	0xe000ed00
 800997c:	05fa0004 	.word	0x05fa0004

08009980 <HAL_GPIO_EXTI_Callback>:
/************************************************************************
 *                           Interrupt Handlers                         *
 ***********************************************************************/
//static int hrefs = 0;
inline void STM_InterruptHandler( uint16_t GPIO_Pin )
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	80fb      	strh	r3, [r7, #6]
    STM_InitDMA( (uint32_t)&CAMERA_PORT, _dma_destination, _dma_size, true );
//    LOG(ALWAYS, "0x%08x", Master.Utilities.Timer_Primary->hdma[RHO_TIM_DMA_ID]->Instance->CNDTR );
//    LOG(ALWAYS, ENDL);
  }
#endif
}
 800998a:	bf00      	nop
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <STM_InterruptEnable>:
void STM_InterruptEnable( void )
{
 8009996:	b580      	push	{r7, lr}
 8009998:	af00      	add	r7, sp, #0
//  STM_ResumeDMA();
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800999a:	200b      	movs	r0, #11
 800999c:	f7f8 fa51 	bl	8001e42 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80099a0:	200f      	movs	r0, #15
 80099a2:	f7f8 fa4e 	bl	8001e42 <HAL_NVIC_EnableIRQ>
}
 80099a6:	bf00      	nop
 80099a8:	bd80      	pop	{r7, pc}

080099aa <STM_InterruptDisable>:
void STM_InterruptDisable( void )
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	af00      	add	r7, sp, #0
//  STM_PauseDMA();
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80099ae:	200b      	movs	r0, #11
 80099b0:	f7f8 fa55 	bl	8001e5e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80099b4:	200f      	movs	r0, #15
 80099b6:	f7f8 fa52 	bl	8001e5e <HAL_NVIC_DisableIRQ>
}
 80099ba:	bf00      	nop
 80099bc:	bd80      	pop	{r7, pc}

080099be <STM_DCMIStart_DMA>:

///************************************************************************
// *                             DCMI Handlers                            *
// ***********************************************************************/
uint8_t	STM_DCMIStart_DMA( DCMI_HandleTypeDef * hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length )
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b086      	sub	sp, #24
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	60f8      	str	r0, [r7, #12]
 80099c6:	60b9      	str	r1, [r7, #8]
 80099c8:	607a      	str	r2, [r7, #4]
 80099ca:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef ret = HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	75fb      	strb	r3, [r7, #23]
	ret = HAL_DCMI_Start_DMA( hdcmi, DCMI_Mode, pData, Length );
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7f8 fad6 	bl	8001f88 <HAL_DCMI_Start_DMA>
 80099dc:	4603      	mov	r3, r0
 80099de:	75fb      	strb	r3, [r7, #23]
	return (uint8_t)ret;
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3718      	adds	r7, #24
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <STM_DCMIStop>:
uint8_t STM_DCMIStop( DCMI_HandleTypeDef * hdcmi )
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	73fb      	strb	r3, [r7, #15]
	ret = HAL_DCMI_Stop( hdcmi );
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7f8 fc68 	bl	80022cc <HAL_DCMI_Stop>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)ret;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <STM_DCMISuspend>:
uint8_t STM_DCMISuspend( DCMI_HandleTypeDef * hdcmi )
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
	ret = HAL_DCMI_Suspend( hdcmi );
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7f8 fcb8 	bl	800238c <HAL_DCMI_Suspend>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)ret;
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <STM_DCMIResume>:
uint8_t STM_DCMIResume( DCMI_HandleTypeDef * hdcmi )
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]
	ret = HAL_DCMI_Resume( hdcmi );
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7f8 fd00 	bl	800243c <HAL_DCMI_Resume>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)ret;
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <STM_UartTxDMA>:

/************************************************************************
 *                             UART Handlers                            *
 ***********************************************************************/
inline uint8_t STM_UartTxDMA( UART_Handle_t * huart, uint8_t * buffer, uint16_t length )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	4613      	mov	r3, r2
 8009a58:	80fb      	strh	r3, [r7, #6]
  return HAL_UART_Transmit( Master.IOs->UART_Primary, buffer, length, UART_TIMEOUT ); //HAL_UART_Transmit_DMA
 8009a5a:	4b06      	ldr	r3, [pc, #24]	; (8009a74 <STM_UartTxDMA+0x28>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6858      	ldr	r0, [r3, #4]
 8009a60:	88fa      	ldrh	r2, [r7, #6]
 8009a62:	2364      	movs	r3, #100	; 0x64
 8009a64:	68b9      	ldr	r1, [r7, #8]
 8009a66:	f7fe fed7 	bl	8008818 <HAL_UART_Transmit>
 8009a6a:	4603      	mov	r3, r0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	2001fab0 	.word	0x2001fab0

08009a78 <STM_UartRxDMA>:

inline uint16_t STM_UartRxDMA( UART_Handle_t * huart, uint8_t * buffer )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  ///TODO: Actually implement
  return 1;
 8009a82:	2301      	movs	r3, #1
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <STM_I2CMasterTx>:

/************************************************************************
 *                              I2C Handlers                            *
 ***********************************************************************/
inline void STM_I2CMasterTx( I2C_Handle_t * hi2c, uint16_t addr, uint8_t * buffer, uint16_t length, uint32_t timeout )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	607a      	str	r2, [r7, #4]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	817b      	strh	r3, [r7, #10]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Master_Transmit( hi2c, addr, buffer, length, timeout);
 8009aa4:	893a      	ldrh	r2, [r7, #8]
 8009aa6:	8979      	ldrh	r1, [r7, #10]
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	4613      	mov	r3, r2
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f7fa fae7 	bl	8004084 <HAL_I2C_Master_Transmit>
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <STM_SetPortMode>:

/************************************************************************
 *                             GPIO Handlers                            *
 ***********************************************************************/
inline void STM_SetPortMode( GPIO_TypeDef * port, uint16_t pin, uint8_t mode )
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b088      	sub	sp, #32
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	807b      	strh	r3, [r7, #2]
 8009aca:	4613      	mov	r3, r2
 8009acc:	707b      	strb	r3, [r7, #1]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ace:	f107 030c 	add.w	r3, r7, #12
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	601a      	str	r2, [r3, #0]
 8009ad6:	605a      	str	r2, [r3, #4]
 8009ad8:	609a      	str	r2, [r3, #8]
 8009ada:	60da      	str	r2, [r3, #12]
 8009adc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = pin;
 8009ade:	887b      	ldrh	r3, [r7, #2]
 8009ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = mode;
 8009ae2:	787b      	ldrb	r3, [r7, #1]
 8009ae4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init( (GPIO_TypeDef *)port, &GPIO_InitStruct );
 8009ae6:	f107 030c 	add.w	r3, r7, #12
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7fa f82f 	bl	8003b50 <HAL_GPIO_Init>
}
 8009af2:	bf00      	nop
 8009af4:	3720      	adds	r7, #32
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <STM_ReadPort>:
inline uint8_t STM_ReadPort( GPIO_TypeDef * port )
{
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
    return port->IDR;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	b2db      	uxtb	r3, r3
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <STM_WritePin>:
inline void STM_WritePin( GPIO_TypeDef * port, uint16_t pin, uint8_t state )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	807b      	strh	r3, [r7, #2]
 8009b20:	4613      	mov	r3, r2
 8009b22:	707b      	strb	r3, [r7, #1]
  HAL_GPIO_WritePin( port, pin, (GPIO_PinState)state);
 8009b24:	787a      	ldrb	r2, [r7, #1]
 8009b26:	887b      	ldrh	r3, [r7, #2]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7fa f9e8 	bl	8003f00 <HAL_GPIO_WritePin>
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <STM_Timestamp>:

/************************************************************************
 *                             Time Handlers                            *
 ***********************************************************************/
inline uint32_t STM_Timestamp(void)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009b3c:	f7f8 f838 	bl	8001bb0 <HAL_GetTick>
 8009b40:	4603      	mov	r3, r0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <STM_Wait>:
inline void STM_Wait( uint32_t nTime )
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  HAL_Delay( nTime );
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7f8 f83a 	bl	8001bc8 <HAL_Delay>
}
 8009b54:	bf00      	nop
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <STM_SysClockFreq>:
inline uint32_t STM_SysClockFreq(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  return HAL_RCC_GetSysClockFreq();
 8009b60:	f7fb ffdc 	bl	8005b1c <HAL_RCC_GetSysClockFreq>
 8009b64:	4603      	mov	r3, r0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <STM_Reset>:

/************************************************************************
 *                            System Handlers                           *
 ***********************************************************************/
void STM_Reset( void )
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 8009b6e:	f7ff fef1 	bl	8009954 <__NVIC_SystemReset>
	...

08009b74 <__errno>:
 8009b74:	4b01      	ldr	r3, [pc, #4]	; (8009b7c <__errno+0x8>)
 8009b76:	6818      	ldr	r0, [r3, #0]
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	200002ac 	.word	0x200002ac

08009b80 <__libc_init_array>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	4d0d      	ldr	r5, [pc, #52]	; (8009bb8 <__libc_init_array+0x38>)
 8009b84:	2600      	movs	r6, #0
 8009b86:	4c0d      	ldr	r4, [pc, #52]	; (8009bbc <__libc_init_array+0x3c>)
 8009b88:	1b64      	subs	r4, r4, r5
 8009b8a:	10a4      	asrs	r4, r4, #2
 8009b8c:	42a6      	cmp	r6, r4
 8009b8e:	d109      	bne.n	8009ba4 <__libc_init_array+0x24>
 8009b90:	4d0b      	ldr	r5, [pc, #44]	; (8009bc0 <__libc_init_array+0x40>)
 8009b92:	2600      	movs	r6, #0
 8009b94:	4c0b      	ldr	r4, [pc, #44]	; (8009bc4 <__libc_init_array+0x44>)
 8009b96:	f002 fe37 	bl	800c808 <_init>
 8009b9a:	1b64      	subs	r4, r4, r5
 8009b9c:	10a4      	asrs	r4, r4, #2
 8009b9e:	42a6      	cmp	r6, r4
 8009ba0:	d105      	bne.n	8009bae <__libc_init_array+0x2e>
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}
 8009ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba8:	3601      	adds	r6, #1
 8009baa:	4798      	blx	r3
 8009bac:	e7ee      	b.n	8009b8c <__libc_init_array+0xc>
 8009bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	4798      	blx	r3
 8009bb6:	e7f2      	b.n	8009b9e <__libc_init_array+0x1e>
 8009bb8:	0800ce3c 	.word	0x0800ce3c
 8009bbc:	0800ce3c 	.word	0x0800ce3c
 8009bc0:	0800ce3c 	.word	0x0800ce3c
 8009bc4:	0800ce40 	.word	0x0800ce40

08009bc8 <memcpy>:
 8009bc8:	440a      	add	r2, r1
 8009bca:	1e43      	subs	r3, r0, #1
 8009bcc:	4291      	cmp	r1, r2
 8009bce:	d100      	bne.n	8009bd2 <memcpy+0xa>
 8009bd0:	4770      	bx	lr
 8009bd2:	b510      	push	{r4, lr}
 8009bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd8:	4291      	cmp	r1, r2
 8009bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bde:	d1f9      	bne.n	8009bd4 <memcpy+0xc>
 8009be0:	bd10      	pop	{r4, pc}

08009be2 <memset>:
 8009be2:	4402      	add	r2, r0
 8009be4:	4603      	mov	r3, r0
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d100      	bne.n	8009bec <memset+0xa>
 8009bea:	4770      	bx	lr
 8009bec:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf0:	e7f9      	b.n	8009be6 <memset+0x4>

08009bf2 <__cvt>:
 8009bf2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf6:	ec55 4b10 	vmov	r4, r5, d0
 8009bfa:	2d00      	cmp	r5, #0
 8009bfc:	460e      	mov	r6, r1
 8009bfe:	4619      	mov	r1, r3
 8009c00:	462b      	mov	r3, r5
 8009c02:	bfb4      	ite	lt
 8009c04:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c08:	2300      	movge	r3, #0
 8009c0a:	4691      	mov	r9, r2
 8009c0c:	bfbf      	itttt	lt
 8009c0e:	4622      	movlt	r2, r4
 8009c10:	461d      	movlt	r5, r3
 8009c12:	232d      	movlt	r3, #45	; 0x2d
 8009c14:	4614      	movlt	r4, r2
 8009c16:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c1a:	700b      	strb	r3, [r1, #0]
 8009c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c1e:	f023 0820 	bic.w	r8, r3, #32
 8009c22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c26:	d005      	beq.n	8009c34 <__cvt+0x42>
 8009c28:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c2c:	d100      	bne.n	8009c30 <__cvt+0x3e>
 8009c2e:	3601      	adds	r6, #1
 8009c30:	2102      	movs	r1, #2
 8009c32:	e000      	b.n	8009c36 <__cvt+0x44>
 8009c34:	2103      	movs	r1, #3
 8009c36:	ab03      	add	r3, sp, #12
 8009c38:	4632      	mov	r2, r6
 8009c3a:	9301      	str	r3, [sp, #4]
 8009c3c:	ab02      	add	r3, sp, #8
 8009c3e:	ec45 4b10 	vmov	d0, r4, r5
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	4653      	mov	r3, sl
 8009c46:	f000 fe37 	bl	800a8b8 <_dtoa_r>
 8009c4a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c4e:	4607      	mov	r7, r0
 8009c50:	d102      	bne.n	8009c58 <__cvt+0x66>
 8009c52:	f019 0f01 	tst.w	r9, #1
 8009c56:	d022      	beq.n	8009c9e <__cvt+0xac>
 8009c58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c5c:	eb07 0906 	add.w	r9, r7, r6
 8009c60:	d110      	bne.n	8009c84 <__cvt+0x92>
 8009c62:	783b      	ldrb	r3, [r7, #0]
 8009c64:	2b30      	cmp	r3, #48	; 0x30
 8009c66:	d10a      	bne.n	8009c7e <__cvt+0x8c>
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	4629      	mov	r1, r5
 8009c70:	f7f6 ff2e 	bl	8000ad0 <__aeabi_dcmpeq>
 8009c74:	b918      	cbnz	r0, 8009c7e <__cvt+0x8c>
 8009c76:	f1c6 0601 	rsb	r6, r6, #1
 8009c7a:	f8ca 6000 	str.w	r6, [sl]
 8009c7e:	f8da 3000 	ldr.w	r3, [sl]
 8009c82:	4499      	add	r9, r3
 8009c84:	2200      	movs	r2, #0
 8009c86:	2300      	movs	r3, #0
 8009c88:	4620      	mov	r0, r4
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7f6 ff20 	bl	8000ad0 <__aeabi_dcmpeq>
 8009c90:	b108      	cbz	r0, 8009c96 <__cvt+0xa4>
 8009c92:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c96:	2230      	movs	r2, #48	; 0x30
 8009c98:	9b03      	ldr	r3, [sp, #12]
 8009c9a:	454b      	cmp	r3, r9
 8009c9c:	d307      	bcc.n	8009cae <__cvt+0xbc>
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ca4:	1bdb      	subs	r3, r3, r7
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	b004      	add	sp, #16
 8009caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cae:	1c59      	adds	r1, r3, #1
 8009cb0:	9103      	str	r1, [sp, #12]
 8009cb2:	701a      	strb	r2, [r3, #0]
 8009cb4:	e7f0      	b.n	8009c98 <__cvt+0xa6>

08009cb6 <__exponent>:
 8009cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cb8:	2900      	cmp	r1, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	bfb8      	it	lt
 8009cbe:	4249      	neglt	r1, r1
 8009cc0:	f803 2b02 	strb.w	r2, [r3], #2
 8009cc4:	bfb4      	ite	lt
 8009cc6:	222d      	movlt	r2, #45	; 0x2d
 8009cc8:	222b      	movge	r2, #43	; 0x2b
 8009cca:	2909      	cmp	r1, #9
 8009ccc:	7042      	strb	r2, [r0, #1]
 8009cce:	dd2a      	ble.n	8009d26 <__exponent+0x70>
 8009cd0:	f10d 0407 	add.w	r4, sp, #7
 8009cd4:	270a      	movs	r7, #10
 8009cd6:	46a4      	mov	ip, r4
 8009cd8:	460a      	mov	r2, r1
 8009cda:	46a6      	mov	lr, r4
 8009cdc:	3c01      	subs	r4, #1
 8009cde:	2a63      	cmp	r2, #99	; 0x63
 8009ce0:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ce4:	fb07 1516 	mls	r5, r7, r6, r1
 8009ce8:	4631      	mov	r1, r6
 8009cea:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009cee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009cf2:	dcf1      	bgt.n	8009cd8 <__exponent+0x22>
 8009cf4:	3130      	adds	r1, #48	; 0x30
 8009cf6:	f1ae 0502 	sub.w	r5, lr, #2
 8009cfa:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cfe:	1c44      	adds	r4, r0, #1
 8009d00:	4629      	mov	r1, r5
 8009d02:	4561      	cmp	r1, ip
 8009d04:	d30a      	bcc.n	8009d1c <__exponent+0x66>
 8009d06:	f10d 0209 	add.w	r2, sp, #9
 8009d0a:	eba2 020e 	sub.w	r2, r2, lr
 8009d0e:	4565      	cmp	r5, ip
 8009d10:	bf88      	it	hi
 8009d12:	2200      	movhi	r2, #0
 8009d14:	4413      	add	r3, r2
 8009d16:	1a18      	subs	r0, r3, r0
 8009d18:	b003      	add	sp, #12
 8009d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d20:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d24:	e7ed      	b.n	8009d02 <__exponent+0x4c>
 8009d26:	2330      	movs	r3, #48	; 0x30
 8009d28:	3130      	adds	r1, #48	; 0x30
 8009d2a:	7083      	strb	r3, [r0, #2]
 8009d2c:	1d03      	adds	r3, r0, #4
 8009d2e:	70c1      	strb	r1, [r0, #3]
 8009d30:	e7f1      	b.n	8009d16 <__exponent+0x60>
	...

08009d34 <_printf_float>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	ed2d 8b02 	vpush	{d8}
 8009d3c:	b08d      	sub	sp, #52	; 0x34
 8009d3e:	460c      	mov	r4, r1
 8009d40:	4616      	mov	r6, r2
 8009d42:	461f      	mov	r7, r3
 8009d44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d48:	4605      	mov	r5, r0
 8009d4a:	f001 fd57 	bl	800b7fc <_localeconv_r>
 8009d4e:	f8d0 a000 	ldr.w	sl, [r0]
 8009d52:	4650      	mov	r0, sl
 8009d54:	f7f6 fa90 	bl	8000278 <strlen>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d5e:	ee08 0a10 	vmov	s16, r0
 8009d62:	930a      	str	r3, [sp, #40]	; 0x28
 8009d64:	6823      	ldr	r3, [r4, #0]
 8009d66:	9305      	str	r3, [sp, #20]
 8009d68:	f8d8 3000 	ldr.w	r3, [r8]
 8009d6c:	3307      	adds	r3, #7
 8009d6e:	f023 0307 	bic.w	r3, r3, #7
 8009d72:	f103 0208 	add.w	r2, r3, #8
 8009d76:	f8c8 2000 	str.w	r2, [r8]
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d86:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d92:	9307      	str	r3, [sp, #28]
 8009d94:	4b9e      	ldr	r3, [pc, #632]	; (800a010 <_printf_float+0x2dc>)
 8009d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d9a:	f7f6 fecb 	bl	8000b34 <__aeabi_dcmpun>
 8009d9e:	bb88      	cbnz	r0, 8009e04 <_printf_float+0xd0>
 8009da0:	f04f 32ff 	mov.w	r2, #4294967295
 8009da4:	4b9a      	ldr	r3, [pc, #616]	; (800a010 <_printf_float+0x2dc>)
 8009da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009daa:	f7f6 fea5 	bl	8000af8 <__aeabi_dcmple>
 8009dae:	bb48      	cbnz	r0, 8009e04 <_printf_float+0xd0>
 8009db0:	2200      	movs	r2, #0
 8009db2:	2300      	movs	r3, #0
 8009db4:	4640      	mov	r0, r8
 8009db6:	4649      	mov	r1, r9
 8009db8:	f7f6 fe94 	bl	8000ae4 <__aeabi_dcmplt>
 8009dbc:	b110      	cbz	r0, 8009dc4 <_printf_float+0x90>
 8009dbe:	232d      	movs	r3, #45	; 0x2d
 8009dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dc4:	4b93      	ldr	r3, [pc, #588]	; (800a014 <_printf_float+0x2e0>)
 8009dc6:	4894      	ldr	r0, [pc, #592]	; (800a018 <_printf_float+0x2e4>)
 8009dc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009dcc:	bf94      	ite	ls
 8009dce:	4698      	movls	r8, r3
 8009dd0:	4680      	movhi	r8, r0
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	f04f 0900 	mov.w	r9, #0
 8009dd8:	6123      	str	r3, [r4, #16]
 8009dda:	9b05      	ldr	r3, [sp, #20]
 8009ddc:	f023 0204 	bic.w	r2, r3, #4
 8009de0:	6022      	str	r2, [r4, #0]
 8009de2:	4633      	mov	r3, r6
 8009de4:	aa0b      	add	r2, sp, #44	; 0x2c
 8009de6:	4621      	mov	r1, r4
 8009de8:	4628      	mov	r0, r5
 8009dea:	9700      	str	r7, [sp, #0]
 8009dec:	f000 f9d8 	bl	800a1a0 <_printf_common>
 8009df0:	3001      	adds	r0, #1
 8009df2:	f040 8090 	bne.w	8009f16 <_printf_float+0x1e2>
 8009df6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfa:	b00d      	add	sp, #52	; 0x34
 8009dfc:	ecbd 8b02 	vpop	{d8}
 8009e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	4642      	mov	r2, r8
 8009e06:	464b      	mov	r3, r9
 8009e08:	4640      	mov	r0, r8
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	f7f6 fe92 	bl	8000b34 <__aeabi_dcmpun>
 8009e10:	b140      	cbz	r0, 8009e24 <_printf_float+0xf0>
 8009e12:	464b      	mov	r3, r9
 8009e14:	4881      	ldr	r0, [pc, #516]	; (800a01c <_printf_float+0x2e8>)
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bfbc      	itt	lt
 8009e1a:	232d      	movlt	r3, #45	; 0x2d
 8009e1c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e20:	4b7f      	ldr	r3, [pc, #508]	; (800a020 <_printf_float+0x2ec>)
 8009e22:	e7d1      	b.n	8009dc8 <_printf_float+0x94>
 8009e24:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009e28:	6863      	ldr	r3, [r4, #4]
 8009e2a:	9206      	str	r2, [sp, #24]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	d13f      	bne.n	8009eb0 <_printf_float+0x17c>
 8009e30:	2306      	movs	r3, #6
 8009e32:	6063      	str	r3, [r4, #4]
 8009e34:	9b05      	ldr	r3, [sp, #20]
 8009e36:	4628      	mov	r0, r5
 8009e38:	6861      	ldr	r1, [r4, #4]
 8009e3a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9303      	str	r3, [sp, #12]
 8009e42:	ab0a      	add	r3, sp, #40	; 0x28
 8009e44:	6022      	str	r2, [r4, #0]
 8009e46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e4a:	ab09      	add	r3, sp, #36	; 0x24
 8009e4c:	ec49 8b10 	vmov	d0, r8, r9
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e56:	f7ff fecc 	bl	8009bf2 <__cvt>
 8009e5a:	9b06      	ldr	r3, [sp, #24]
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e60:	2b47      	cmp	r3, #71	; 0x47
 8009e62:	d108      	bne.n	8009e76 <_printf_float+0x142>
 8009e64:	1cc8      	adds	r0, r1, #3
 8009e66:	db02      	blt.n	8009e6e <_printf_float+0x13a>
 8009e68:	6863      	ldr	r3, [r4, #4]
 8009e6a:	4299      	cmp	r1, r3
 8009e6c:	dd41      	ble.n	8009ef2 <_printf_float+0x1be>
 8009e6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e72:	fa5f fb8b 	uxtb.w	fp, fp
 8009e76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e7a:	d820      	bhi.n	8009ebe <_printf_float+0x18a>
 8009e7c:	3901      	subs	r1, #1
 8009e7e:	465a      	mov	r2, fp
 8009e80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e84:	9109      	str	r1, [sp, #36]	; 0x24
 8009e86:	f7ff ff16 	bl	8009cb6 <__exponent>
 8009e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e8c:	4681      	mov	r9, r0
 8009e8e:	1813      	adds	r3, r2, r0
 8009e90:	2a01      	cmp	r2, #1
 8009e92:	6123      	str	r3, [r4, #16]
 8009e94:	dc02      	bgt.n	8009e9c <_printf_float+0x168>
 8009e96:	6822      	ldr	r2, [r4, #0]
 8009e98:	07d2      	lsls	r2, r2, #31
 8009e9a:	d501      	bpl.n	8009ea0 <_printf_float+0x16c>
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	6123      	str	r3, [r4, #16]
 8009ea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d09c      	beq.n	8009de2 <_printf_float+0xae>
 8009ea8:	232d      	movs	r3, #45	; 0x2d
 8009eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eae:	e798      	b.n	8009de2 <_printf_float+0xae>
 8009eb0:	9a06      	ldr	r2, [sp, #24]
 8009eb2:	2a47      	cmp	r2, #71	; 0x47
 8009eb4:	d1be      	bne.n	8009e34 <_printf_float+0x100>
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1bc      	bne.n	8009e34 <_printf_float+0x100>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e7b9      	b.n	8009e32 <_printf_float+0xfe>
 8009ebe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ec2:	d118      	bne.n	8009ef6 <_printf_float+0x1c2>
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	dd0b      	ble.n	8009ee2 <_printf_float+0x1ae>
 8009eca:	6121      	str	r1, [r4, #16]
 8009ecc:	b913      	cbnz	r3, 8009ed4 <_printf_float+0x1a0>
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	07d0      	lsls	r0, r2, #31
 8009ed2:	d502      	bpl.n	8009eda <_printf_float+0x1a6>
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	440b      	add	r3, r1
 8009ed8:	6123      	str	r3, [r4, #16]
 8009eda:	f04f 0900 	mov.w	r9, #0
 8009ede:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ee0:	e7de      	b.n	8009ea0 <_printf_float+0x16c>
 8009ee2:	b913      	cbnz	r3, 8009eea <_printf_float+0x1b6>
 8009ee4:	6822      	ldr	r2, [r4, #0]
 8009ee6:	07d2      	lsls	r2, r2, #31
 8009ee8:	d501      	bpl.n	8009eee <_printf_float+0x1ba>
 8009eea:	3302      	adds	r3, #2
 8009eec:	e7f4      	b.n	8009ed8 <_printf_float+0x1a4>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e7f2      	b.n	8009ed8 <_printf_float+0x1a4>
 8009ef2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef8:	4299      	cmp	r1, r3
 8009efa:	db05      	blt.n	8009f08 <_printf_float+0x1d4>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	6121      	str	r1, [r4, #16]
 8009f00:	07d8      	lsls	r0, r3, #31
 8009f02:	d5ea      	bpl.n	8009eda <_printf_float+0x1a6>
 8009f04:	1c4b      	adds	r3, r1, #1
 8009f06:	e7e7      	b.n	8009ed8 <_printf_float+0x1a4>
 8009f08:	2900      	cmp	r1, #0
 8009f0a:	bfd4      	ite	le
 8009f0c:	f1c1 0202 	rsble	r2, r1, #2
 8009f10:	2201      	movgt	r2, #1
 8009f12:	4413      	add	r3, r2
 8009f14:	e7e0      	b.n	8009ed8 <_printf_float+0x1a4>
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	055a      	lsls	r2, r3, #21
 8009f1a:	d407      	bmi.n	8009f2c <_printf_float+0x1f8>
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	4642      	mov	r2, r8
 8009f20:	4631      	mov	r1, r6
 8009f22:	4628      	mov	r0, r5
 8009f24:	47b8      	blx	r7
 8009f26:	3001      	adds	r0, #1
 8009f28:	d12c      	bne.n	8009f84 <_printf_float+0x250>
 8009f2a:	e764      	b.n	8009df6 <_printf_float+0xc2>
 8009f2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f30:	f240 80e0 	bls.w	800a0f4 <_printf_float+0x3c0>
 8009f34:	2200      	movs	r2, #0
 8009f36:	2300      	movs	r3, #0
 8009f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f3c:	f7f6 fdc8 	bl	8000ad0 <__aeabi_dcmpeq>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d034      	beq.n	8009fae <_printf_float+0x27a>
 8009f44:	2301      	movs	r3, #1
 8009f46:	4a37      	ldr	r2, [pc, #220]	; (800a024 <_printf_float+0x2f0>)
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	47b8      	blx	r7
 8009f4e:	3001      	adds	r0, #1
 8009f50:	f43f af51 	beq.w	8009df6 <_printf_float+0xc2>
 8009f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	db02      	blt.n	8009f62 <_printf_float+0x22e>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	07d8      	lsls	r0, r3, #31
 8009f60:	d510      	bpl.n	8009f84 <_printf_float+0x250>
 8009f62:	ee18 3a10 	vmov	r3, s16
 8009f66:	4652      	mov	r2, sl
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	47b8      	blx	r7
 8009f6e:	3001      	adds	r0, #1
 8009f70:	f43f af41 	beq.w	8009df6 <_printf_float+0xc2>
 8009f74:	f04f 0800 	mov.w	r8, #0
 8009f78:	f104 091a 	add.w	r9, r4, #26
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	4543      	cmp	r3, r8
 8009f82:	dc09      	bgt.n	8009f98 <_printf_float+0x264>
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	079b      	lsls	r3, r3, #30
 8009f88:	f100 8105 	bmi.w	800a196 <_printf_float+0x462>
 8009f8c:	68e0      	ldr	r0, [r4, #12]
 8009f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f90:	4298      	cmp	r0, r3
 8009f92:	bfb8      	it	lt
 8009f94:	4618      	movlt	r0, r3
 8009f96:	e730      	b.n	8009dfa <_printf_float+0xc6>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	464a      	mov	r2, r9
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	47b8      	blx	r7
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	f43f af27 	beq.w	8009df6 <_printf_float+0xc2>
 8009fa8:	f108 0801 	add.w	r8, r8, #1
 8009fac:	e7e6      	b.n	8009f7c <_printf_float+0x248>
 8009fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dc39      	bgt.n	800a028 <_printf_float+0x2f4>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4a1b      	ldr	r2, [pc, #108]	; (800a024 <_printf_float+0x2f0>)
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f af19 	beq.w	8009df6 <_printf_float+0xc2>
 8009fc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	d102      	bne.n	8009fd2 <_printf_float+0x29e>
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	07d9      	lsls	r1, r3, #31
 8009fd0:	d5d8      	bpl.n	8009f84 <_printf_float+0x250>
 8009fd2:	ee18 3a10 	vmov	r3, s16
 8009fd6:	4652      	mov	r2, sl
 8009fd8:	4631      	mov	r1, r6
 8009fda:	4628      	mov	r0, r5
 8009fdc:	47b8      	blx	r7
 8009fde:	3001      	adds	r0, #1
 8009fe0:	f43f af09 	beq.w	8009df6 <_printf_float+0xc2>
 8009fe4:	f04f 0900 	mov.w	r9, #0
 8009fe8:	f104 0a1a 	add.w	sl, r4, #26
 8009fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fee:	425b      	negs	r3, r3
 8009ff0:	454b      	cmp	r3, r9
 8009ff2:	dc01      	bgt.n	8009ff8 <_printf_float+0x2c4>
 8009ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ff6:	e792      	b.n	8009f1e <_printf_float+0x1ea>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4652      	mov	r2, sl
 8009ffc:	4631      	mov	r1, r6
 8009ffe:	4628      	mov	r0, r5
 800a000:	47b8      	blx	r7
 800a002:	3001      	adds	r0, #1
 800a004:	f43f aef7 	beq.w	8009df6 <_printf_float+0xc2>
 800a008:	f109 0901 	add.w	r9, r9, #1
 800a00c:	e7ee      	b.n	8009fec <_printf_float+0x2b8>
 800a00e:	bf00      	nop
 800a010:	7fefffff 	.word	0x7fefffff
 800a014:	0800ca60 	.word	0x0800ca60
 800a018:	0800ca64 	.word	0x0800ca64
 800a01c:	0800ca6c 	.word	0x0800ca6c
 800a020:	0800ca68 	.word	0x0800ca68
 800a024:	0800ca70 	.word	0x0800ca70
 800a028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a02a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a02c:	429a      	cmp	r2, r3
 800a02e:	bfa8      	it	ge
 800a030:	461a      	movge	r2, r3
 800a032:	2a00      	cmp	r2, #0
 800a034:	4691      	mov	r9, r2
 800a036:	dc37      	bgt.n	800a0a8 <_printf_float+0x374>
 800a038:	f04f 0b00 	mov.w	fp, #0
 800a03c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a040:	f104 021a 	add.w	r2, r4, #26
 800a044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a046:	9305      	str	r3, [sp, #20]
 800a048:	eba3 0309 	sub.w	r3, r3, r9
 800a04c:	455b      	cmp	r3, fp
 800a04e:	dc33      	bgt.n	800a0b8 <_printf_float+0x384>
 800a050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a054:	429a      	cmp	r2, r3
 800a056:	db3b      	blt.n	800a0d0 <_printf_float+0x39c>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	07da      	lsls	r2, r3, #31
 800a05c:	d438      	bmi.n	800a0d0 <_printf_float+0x39c>
 800a05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a060:	9a05      	ldr	r2, [sp, #20]
 800a062:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a064:	1a9a      	subs	r2, r3, r2
 800a066:	eba3 0901 	sub.w	r9, r3, r1
 800a06a:	4591      	cmp	r9, r2
 800a06c:	bfa8      	it	ge
 800a06e:	4691      	movge	r9, r2
 800a070:	f1b9 0f00 	cmp.w	r9, #0
 800a074:	dc35      	bgt.n	800a0e2 <_printf_float+0x3ae>
 800a076:	f04f 0800 	mov.w	r8, #0
 800a07a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a07e:	f104 0a1a 	add.w	sl, r4, #26
 800a082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a086:	1a9b      	subs	r3, r3, r2
 800a088:	eba3 0309 	sub.w	r3, r3, r9
 800a08c:	4543      	cmp	r3, r8
 800a08e:	f77f af79 	ble.w	8009f84 <_printf_float+0x250>
 800a092:	2301      	movs	r3, #1
 800a094:	4652      	mov	r2, sl
 800a096:	4631      	mov	r1, r6
 800a098:	4628      	mov	r0, r5
 800a09a:	47b8      	blx	r7
 800a09c:	3001      	adds	r0, #1
 800a09e:	f43f aeaa 	beq.w	8009df6 <_printf_float+0xc2>
 800a0a2:	f108 0801 	add.w	r8, r8, #1
 800a0a6:	e7ec      	b.n	800a082 <_printf_float+0x34e>
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d1c0      	bne.n	800a038 <_printf_float+0x304>
 800a0b6:	e69e      	b.n	8009df6 <_printf_float+0xc2>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	4628      	mov	r0, r5
 800a0be:	9205      	str	r2, [sp, #20]
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	f43f ae97 	beq.w	8009df6 <_printf_float+0xc2>
 800a0c8:	f10b 0b01 	add.w	fp, fp, #1
 800a0cc:	9a05      	ldr	r2, [sp, #20]
 800a0ce:	e7b9      	b.n	800a044 <_printf_float+0x310>
 800a0d0:	ee18 3a10 	vmov	r3, s16
 800a0d4:	4652      	mov	r2, sl
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d1be      	bne.n	800a05e <_printf_float+0x32a>
 800a0e0:	e689      	b.n	8009df6 <_printf_float+0xc2>
 800a0e2:	9a05      	ldr	r2, [sp, #20]
 800a0e4:	464b      	mov	r3, r9
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	4442      	add	r2, r8
 800a0ec:	47b8      	blx	r7
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	d1c1      	bne.n	800a076 <_printf_float+0x342>
 800a0f2:	e680      	b.n	8009df6 <_printf_float+0xc2>
 800a0f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0f6:	2a01      	cmp	r2, #1
 800a0f8:	dc01      	bgt.n	800a0fe <_printf_float+0x3ca>
 800a0fa:	07db      	lsls	r3, r3, #31
 800a0fc:	d538      	bpl.n	800a170 <_printf_float+0x43c>
 800a0fe:	2301      	movs	r3, #1
 800a100:	4642      	mov	r2, r8
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae74 	beq.w	8009df6 <_printf_float+0xc2>
 800a10e:	ee18 3a10 	vmov	r3, s16
 800a112:	4652      	mov	r2, sl
 800a114:	4631      	mov	r1, r6
 800a116:	4628      	mov	r0, r5
 800a118:	47b8      	blx	r7
 800a11a:	3001      	adds	r0, #1
 800a11c:	f43f ae6b 	beq.w	8009df6 <_printf_float+0xc2>
 800a120:	2200      	movs	r2, #0
 800a122:	2300      	movs	r3, #0
 800a124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a128:	f7f6 fcd2 	bl	8000ad0 <__aeabi_dcmpeq>
 800a12c:	b9d8      	cbnz	r0, 800a166 <_printf_float+0x432>
 800a12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a130:	f108 0201 	add.w	r2, r8, #1
 800a134:	3b01      	subs	r3, #1
 800a136:	4631      	mov	r1, r6
 800a138:	4628      	mov	r0, r5
 800a13a:	47b8      	blx	r7
 800a13c:	3001      	adds	r0, #1
 800a13e:	d10e      	bne.n	800a15e <_printf_float+0x42a>
 800a140:	e659      	b.n	8009df6 <_printf_float+0xc2>
 800a142:	2301      	movs	r3, #1
 800a144:	4652      	mov	r2, sl
 800a146:	4631      	mov	r1, r6
 800a148:	4628      	mov	r0, r5
 800a14a:	47b8      	blx	r7
 800a14c:	3001      	adds	r0, #1
 800a14e:	f43f ae52 	beq.w	8009df6 <_printf_float+0xc2>
 800a152:	f108 0801 	add.w	r8, r8, #1
 800a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a158:	3b01      	subs	r3, #1
 800a15a:	4543      	cmp	r3, r8
 800a15c:	dcf1      	bgt.n	800a142 <_printf_float+0x40e>
 800a15e:	464b      	mov	r3, r9
 800a160:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a164:	e6dc      	b.n	8009f20 <_printf_float+0x1ec>
 800a166:	f04f 0800 	mov.w	r8, #0
 800a16a:	f104 0a1a 	add.w	sl, r4, #26
 800a16e:	e7f2      	b.n	800a156 <_printf_float+0x422>
 800a170:	2301      	movs	r3, #1
 800a172:	4642      	mov	r2, r8
 800a174:	e7df      	b.n	800a136 <_printf_float+0x402>
 800a176:	2301      	movs	r3, #1
 800a178:	464a      	mov	r2, r9
 800a17a:	4631      	mov	r1, r6
 800a17c:	4628      	mov	r0, r5
 800a17e:	47b8      	blx	r7
 800a180:	3001      	adds	r0, #1
 800a182:	f43f ae38 	beq.w	8009df6 <_printf_float+0xc2>
 800a186:	f108 0801 	add.w	r8, r8, #1
 800a18a:	68e3      	ldr	r3, [r4, #12]
 800a18c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a18e:	1a5b      	subs	r3, r3, r1
 800a190:	4543      	cmp	r3, r8
 800a192:	dcf0      	bgt.n	800a176 <_printf_float+0x442>
 800a194:	e6fa      	b.n	8009f8c <_printf_float+0x258>
 800a196:	f04f 0800 	mov.w	r8, #0
 800a19a:	f104 0919 	add.w	r9, r4, #25
 800a19e:	e7f4      	b.n	800a18a <_printf_float+0x456>

0800a1a0 <_printf_common>:
 800a1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a4:	4616      	mov	r6, r2
 800a1a6:	4699      	mov	r9, r3
 800a1a8:	688a      	ldr	r2, [r1, #8]
 800a1aa:	4607      	mov	r7, r0
 800a1ac:	690b      	ldr	r3, [r1, #16]
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	bfb8      	it	lt
 800a1b8:	4613      	movlt	r3, r2
 800a1ba:	6033      	str	r3, [r6, #0]
 800a1bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1c0:	b10a      	cbz	r2, 800a1c6 <_printf_common+0x26>
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	6033      	str	r3, [r6, #0]
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	0699      	lsls	r1, r3, #26
 800a1ca:	bf42      	ittt	mi
 800a1cc:	6833      	ldrmi	r3, [r6, #0]
 800a1ce:	3302      	addmi	r3, #2
 800a1d0:	6033      	strmi	r3, [r6, #0]
 800a1d2:	6825      	ldr	r5, [r4, #0]
 800a1d4:	f015 0506 	ands.w	r5, r5, #6
 800a1d8:	d106      	bne.n	800a1e8 <_printf_common+0x48>
 800a1da:	f104 0a19 	add.w	sl, r4, #25
 800a1de:	68e3      	ldr	r3, [r4, #12]
 800a1e0:	6832      	ldr	r2, [r6, #0]
 800a1e2:	1a9b      	subs	r3, r3, r2
 800a1e4:	42ab      	cmp	r3, r5
 800a1e6:	dc29      	bgt.n	800a23c <_printf_common+0x9c>
 800a1e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1ec:	1e13      	subs	r3, r2, #0
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	bf18      	it	ne
 800a1f2:	2301      	movne	r3, #1
 800a1f4:	0692      	lsls	r2, r2, #26
 800a1f6:	d42e      	bmi.n	800a256 <_printf_common+0xb6>
 800a1f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	4638      	mov	r0, r7
 800a200:	47c0      	blx	r8
 800a202:	3001      	adds	r0, #1
 800a204:	d021      	beq.n	800a24a <_printf_common+0xaa>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	341a      	adds	r4, #26
 800a20a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800a20e:	f003 0306 	and.w	r3, r3, #6
 800a212:	6832      	ldr	r2, [r6, #0]
 800a214:	2600      	movs	r6, #0
 800a216:	2b04      	cmp	r3, #4
 800a218:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a21c:	bf08      	it	eq
 800a21e:	1aad      	subeq	r5, r5, r2
 800a220:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a224:	bf14      	ite	ne
 800a226:	2500      	movne	r5, #0
 800a228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a22c:	4293      	cmp	r3, r2
 800a22e:	bfc4      	itt	gt
 800a230:	1a9b      	subgt	r3, r3, r2
 800a232:	18ed      	addgt	r5, r5, r3
 800a234:	42b5      	cmp	r5, r6
 800a236:	d11a      	bne.n	800a26e <_printf_common+0xce>
 800a238:	2000      	movs	r0, #0
 800a23a:	e008      	b.n	800a24e <_printf_common+0xae>
 800a23c:	2301      	movs	r3, #1
 800a23e:	4652      	mov	r2, sl
 800a240:	4649      	mov	r1, r9
 800a242:	4638      	mov	r0, r7
 800a244:	47c0      	blx	r8
 800a246:	3001      	adds	r0, #1
 800a248:	d103      	bne.n	800a252 <_printf_common+0xb2>
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	3501      	adds	r5, #1
 800a254:	e7c3      	b.n	800a1de <_printf_common+0x3e>
 800a256:	18e1      	adds	r1, r4, r3
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	2030      	movs	r0, #48	; 0x30
 800a25c:	3302      	adds	r3, #2
 800a25e:	4422      	add	r2, r4
 800a260:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a26c:	e7c4      	b.n	800a1f8 <_printf_common+0x58>
 800a26e:	2301      	movs	r3, #1
 800a270:	4622      	mov	r2, r4
 800a272:	4649      	mov	r1, r9
 800a274:	4638      	mov	r0, r7
 800a276:	47c0      	blx	r8
 800a278:	3001      	adds	r0, #1
 800a27a:	d0e6      	beq.n	800a24a <_printf_common+0xaa>
 800a27c:	3601      	adds	r6, #1
 800a27e:	e7d9      	b.n	800a234 <_printf_common+0x94>

0800a280 <_printf_i>:
 800a280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a284:	7e0f      	ldrb	r7, [r1, #24]
 800a286:	4691      	mov	r9, r2
 800a288:	4680      	mov	r8, r0
 800a28a:	460c      	mov	r4, r1
 800a28c:	2f78      	cmp	r7, #120	; 0x78
 800a28e:	469a      	mov	sl, r3
 800a290:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a292:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a296:	d807      	bhi.n	800a2a8 <_printf_i+0x28>
 800a298:	2f62      	cmp	r7, #98	; 0x62
 800a29a:	d80a      	bhi.n	800a2b2 <_printf_i+0x32>
 800a29c:	2f00      	cmp	r7, #0
 800a29e:	f000 80d8 	beq.w	800a452 <_printf_i+0x1d2>
 800a2a2:	2f58      	cmp	r7, #88	; 0x58
 800a2a4:	f000 80a3 	beq.w	800a3ee <_printf_i+0x16e>
 800a2a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2b0:	e03a      	b.n	800a328 <_printf_i+0xa8>
 800a2b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2b6:	2b15      	cmp	r3, #21
 800a2b8:	d8f6      	bhi.n	800a2a8 <_printf_i+0x28>
 800a2ba:	a101      	add	r1, pc, #4	; (adr r1, 800a2c0 <_printf_i+0x40>)
 800a2bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2c0:	0800a319 	.word	0x0800a319
 800a2c4:	0800a32d 	.word	0x0800a32d
 800a2c8:	0800a2a9 	.word	0x0800a2a9
 800a2cc:	0800a2a9 	.word	0x0800a2a9
 800a2d0:	0800a2a9 	.word	0x0800a2a9
 800a2d4:	0800a2a9 	.word	0x0800a2a9
 800a2d8:	0800a32d 	.word	0x0800a32d
 800a2dc:	0800a2a9 	.word	0x0800a2a9
 800a2e0:	0800a2a9 	.word	0x0800a2a9
 800a2e4:	0800a2a9 	.word	0x0800a2a9
 800a2e8:	0800a2a9 	.word	0x0800a2a9
 800a2ec:	0800a439 	.word	0x0800a439
 800a2f0:	0800a35d 	.word	0x0800a35d
 800a2f4:	0800a41b 	.word	0x0800a41b
 800a2f8:	0800a2a9 	.word	0x0800a2a9
 800a2fc:	0800a2a9 	.word	0x0800a2a9
 800a300:	0800a45b 	.word	0x0800a45b
 800a304:	0800a2a9 	.word	0x0800a2a9
 800a308:	0800a35d 	.word	0x0800a35d
 800a30c:	0800a2a9 	.word	0x0800a2a9
 800a310:	0800a2a9 	.word	0x0800a2a9
 800a314:	0800a423 	.word	0x0800a423
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	1d1a      	adds	r2, r3, #4
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	602a      	str	r2, [r5, #0]
 800a320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a328:	2301      	movs	r3, #1
 800a32a:	e0a3      	b.n	800a474 <_printf_i+0x1f4>
 800a32c:	6820      	ldr	r0, [r4, #0]
 800a32e:	6829      	ldr	r1, [r5, #0]
 800a330:	0606      	lsls	r6, r0, #24
 800a332:	f101 0304 	add.w	r3, r1, #4
 800a336:	d50a      	bpl.n	800a34e <_printf_i+0xce>
 800a338:	680e      	ldr	r6, [r1, #0]
 800a33a:	602b      	str	r3, [r5, #0]
 800a33c:	2e00      	cmp	r6, #0
 800a33e:	da03      	bge.n	800a348 <_printf_i+0xc8>
 800a340:	232d      	movs	r3, #45	; 0x2d
 800a342:	4276      	negs	r6, r6
 800a344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a348:	485e      	ldr	r0, [pc, #376]	; (800a4c4 <_printf_i+0x244>)
 800a34a:	230a      	movs	r3, #10
 800a34c:	e019      	b.n	800a382 <_printf_i+0x102>
 800a34e:	680e      	ldr	r6, [r1, #0]
 800a350:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a354:	602b      	str	r3, [r5, #0]
 800a356:	bf18      	it	ne
 800a358:	b236      	sxthne	r6, r6
 800a35a:	e7ef      	b.n	800a33c <_printf_i+0xbc>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	6820      	ldr	r0, [r4, #0]
 800a360:	1d19      	adds	r1, r3, #4
 800a362:	6029      	str	r1, [r5, #0]
 800a364:	0601      	lsls	r1, r0, #24
 800a366:	d501      	bpl.n	800a36c <_printf_i+0xec>
 800a368:	681e      	ldr	r6, [r3, #0]
 800a36a:	e002      	b.n	800a372 <_printf_i+0xf2>
 800a36c:	0646      	lsls	r6, r0, #25
 800a36e:	d5fb      	bpl.n	800a368 <_printf_i+0xe8>
 800a370:	881e      	ldrh	r6, [r3, #0]
 800a372:	2f6f      	cmp	r7, #111	; 0x6f
 800a374:	4853      	ldr	r0, [pc, #332]	; (800a4c4 <_printf_i+0x244>)
 800a376:	bf0c      	ite	eq
 800a378:	2308      	moveq	r3, #8
 800a37a:	230a      	movne	r3, #10
 800a37c:	2100      	movs	r1, #0
 800a37e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a382:	6865      	ldr	r5, [r4, #4]
 800a384:	2d00      	cmp	r5, #0
 800a386:	60a5      	str	r5, [r4, #8]
 800a388:	bfa2      	ittt	ge
 800a38a:	6821      	ldrge	r1, [r4, #0]
 800a38c:	f021 0104 	bicge.w	r1, r1, #4
 800a390:	6021      	strge	r1, [r4, #0]
 800a392:	b90e      	cbnz	r6, 800a398 <_printf_i+0x118>
 800a394:	2d00      	cmp	r5, #0
 800a396:	d04d      	beq.n	800a434 <_printf_i+0x1b4>
 800a398:	4615      	mov	r5, r2
 800a39a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a39e:	fb03 6711 	mls	r7, r3, r1, r6
 800a3a2:	5dc7      	ldrb	r7, [r0, r7]
 800a3a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3a8:	4637      	mov	r7, r6
 800a3aa:	460e      	mov	r6, r1
 800a3ac:	42bb      	cmp	r3, r7
 800a3ae:	d9f4      	bls.n	800a39a <_printf_i+0x11a>
 800a3b0:	2b08      	cmp	r3, #8
 800a3b2:	d10b      	bne.n	800a3cc <_printf_i+0x14c>
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	07de      	lsls	r6, r3, #31
 800a3b8:	d508      	bpl.n	800a3cc <_printf_i+0x14c>
 800a3ba:	6923      	ldr	r3, [r4, #16]
 800a3bc:	6861      	ldr	r1, [r4, #4]
 800a3be:	4299      	cmp	r1, r3
 800a3c0:	bfde      	ittt	le
 800a3c2:	2330      	movle	r3, #48	; 0x30
 800a3c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3cc:	1b52      	subs	r2, r2, r5
 800a3ce:	6122      	str	r2, [r4, #16]
 800a3d0:	464b      	mov	r3, r9
 800a3d2:	aa03      	add	r2, sp, #12
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	f8cd a000 	str.w	sl, [sp]
 800a3dc:	f7ff fee0 	bl	800a1a0 <_printf_common>
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d14c      	bne.n	800a47e <_printf_i+0x1fe>
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	b004      	add	sp, #16
 800a3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ee:	4835      	ldr	r0, [pc, #212]	; (800a4c4 <_printf_i+0x244>)
 800a3f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3f4:	6829      	ldr	r1, [r5, #0]
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3fc:	6029      	str	r1, [r5, #0]
 800a3fe:	061d      	lsls	r5, r3, #24
 800a400:	d514      	bpl.n	800a42c <_printf_i+0x1ac>
 800a402:	07df      	lsls	r7, r3, #31
 800a404:	bf44      	itt	mi
 800a406:	f043 0320 	orrmi.w	r3, r3, #32
 800a40a:	6023      	strmi	r3, [r4, #0]
 800a40c:	b91e      	cbnz	r6, 800a416 <_printf_i+0x196>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	f023 0320 	bic.w	r3, r3, #32
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	2310      	movs	r3, #16
 800a418:	e7b0      	b.n	800a37c <_printf_i+0xfc>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	f043 0320 	orr.w	r3, r3, #32
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	2378      	movs	r3, #120	; 0x78
 800a424:	4828      	ldr	r0, [pc, #160]	; (800a4c8 <_printf_i+0x248>)
 800a426:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a42a:	e7e3      	b.n	800a3f4 <_printf_i+0x174>
 800a42c:	0659      	lsls	r1, r3, #25
 800a42e:	bf48      	it	mi
 800a430:	b2b6      	uxthmi	r6, r6
 800a432:	e7e6      	b.n	800a402 <_printf_i+0x182>
 800a434:	4615      	mov	r5, r2
 800a436:	e7bb      	b.n	800a3b0 <_printf_i+0x130>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	6826      	ldr	r6, [r4, #0]
 800a43c:	1d18      	adds	r0, r3, #4
 800a43e:	6961      	ldr	r1, [r4, #20]
 800a440:	6028      	str	r0, [r5, #0]
 800a442:	0635      	lsls	r5, r6, #24
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	d501      	bpl.n	800a44c <_printf_i+0x1cc>
 800a448:	6019      	str	r1, [r3, #0]
 800a44a:	e002      	b.n	800a452 <_printf_i+0x1d2>
 800a44c:	0670      	lsls	r0, r6, #25
 800a44e:	d5fb      	bpl.n	800a448 <_printf_i+0x1c8>
 800a450:	8019      	strh	r1, [r3, #0]
 800a452:	2300      	movs	r3, #0
 800a454:	4615      	mov	r5, r2
 800a456:	6123      	str	r3, [r4, #16]
 800a458:	e7ba      	b.n	800a3d0 <_printf_i+0x150>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	2100      	movs	r1, #0
 800a45e:	1d1a      	adds	r2, r3, #4
 800a460:	602a      	str	r2, [r5, #0]
 800a462:	681d      	ldr	r5, [r3, #0]
 800a464:	6862      	ldr	r2, [r4, #4]
 800a466:	4628      	mov	r0, r5
 800a468:	f001 fa3c 	bl	800b8e4 <memchr>
 800a46c:	b108      	cbz	r0, 800a472 <_printf_i+0x1f2>
 800a46e:	1b40      	subs	r0, r0, r5
 800a470:	6060      	str	r0, [r4, #4]
 800a472:	6863      	ldr	r3, [r4, #4]
 800a474:	6123      	str	r3, [r4, #16]
 800a476:	2300      	movs	r3, #0
 800a478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a47c:	e7a8      	b.n	800a3d0 <_printf_i+0x150>
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	462a      	mov	r2, r5
 800a482:	4649      	mov	r1, r9
 800a484:	4640      	mov	r0, r8
 800a486:	47d0      	blx	sl
 800a488:	3001      	adds	r0, #1
 800a48a:	d0ab      	beq.n	800a3e4 <_printf_i+0x164>
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	079b      	lsls	r3, r3, #30
 800a490:	d413      	bmi.n	800a4ba <_printf_i+0x23a>
 800a492:	68e0      	ldr	r0, [r4, #12]
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	4298      	cmp	r0, r3
 800a498:	bfb8      	it	lt
 800a49a:	4618      	movlt	r0, r3
 800a49c:	e7a4      	b.n	800a3e8 <_printf_i+0x168>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	47d0      	blx	sl
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d09b      	beq.n	800a3e4 <_printf_i+0x164>
 800a4ac:	3501      	adds	r5, #1
 800a4ae:	68e3      	ldr	r3, [r4, #12]
 800a4b0:	9903      	ldr	r1, [sp, #12]
 800a4b2:	1a5b      	subs	r3, r3, r1
 800a4b4:	42ab      	cmp	r3, r5
 800a4b6:	dcf2      	bgt.n	800a49e <_printf_i+0x21e>
 800a4b8:	e7eb      	b.n	800a492 <_printf_i+0x212>
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	f104 0619 	add.w	r6, r4, #25
 800a4c0:	e7f5      	b.n	800a4ae <_printf_i+0x22e>
 800a4c2:	bf00      	nop
 800a4c4:	0800ca72 	.word	0x0800ca72
 800a4c8:	0800ca83 	.word	0x0800ca83

0800a4cc <iprintf>:
 800a4cc:	b40f      	push	{r0, r1, r2, r3}
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <iprintf+0x2c>)
 800a4d0:	b513      	push	{r0, r1, r4, lr}
 800a4d2:	681c      	ldr	r4, [r3, #0]
 800a4d4:	b124      	cbz	r4, 800a4e0 <iprintf+0x14>
 800a4d6:	69a3      	ldr	r3, [r4, #24]
 800a4d8:	b913      	cbnz	r3, 800a4e0 <iprintf+0x14>
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f001 f8f0 	bl	800b6c0 <__sinit>
 800a4e0:	ab05      	add	r3, sp, #20
 800a4e2:	9a04      	ldr	r2, [sp, #16]
 800a4e4:	68a1      	ldr	r1, [r4, #8]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	9301      	str	r3, [sp, #4]
 800a4ea:	f001 feb3 	bl	800c254 <_vfiprintf_r>
 800a4ee:	b002      	add	sp, #8
 800a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f4:	b004      	add	sp, #16
 800a4f6:	4770      	bx	lr
 800a4f8:	200002ac 	.word	0x200002ac

0800a4fc <putchar>:
 800a4fc:	4b09      	ldr	r3, [pc, #36]	; (800a524 <putchar+0x28>)
 800a4fe:	b513      	push	{r0, r1, r4, lr}
 800a500:	681c      	ldr	r4, [r3, #0]
 800a502:	4601      	mov	r1, r0
 800a504:	b134      	cbz	r4, 800a514 <putchar+0x18>
 800a506:	69a3      	ldr	r3, [r4, #24]
 800a508:	b923      	cbnz	r3, 800a514 <putchar+0x18>
 800a50a:	9001      	str	r0, [sp, #4]
 800a50c:	4620      	mov	r0, r4
 800a50e:	f001 f8d7 	bl	800b6c0 <__sinit>
 800a512:	9901      	ldr	r1, [sp, #4]
 800a514:	68a2      	ldr	r2, [r4, #8]
 800a516:	4620      	mov	r0, r4
 800a518:	b002      	add	sp, #8
 800a51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a51e:	f001 bfc9 	b.w	800c4b4 <_putc_r>
 800a522:	bf00      	nop
 800a524:	200002ac 	.word	0x200002ac

0800a528 <_puts_r>:
 800a528:	b570      	push	{r4, r5, r6, lr}
 800a52a:	460e      	mov	r6, r1
 800a52c:	4605      	mov	r5, r0
 800a52e:	b118      	cbz	r0, 800a538 <_puts_r+0x10>
 800a530:	6983      	ldr	r3, [r0, #24]
 800a532:	b90b      	cbnz	r3, 800a538 <_puts_r+0x10>
 800a534:	f001 f8c4 	bl	800b6c0 <__sinit>
 800a538:	69ab      	ldr	r3, [r5, #24]
 800a53a:	68ac      	ldr	r4, [r5, #8]
 800a53c:	b913      	cbnz	r3, 800a544 <_puts_r+0x1c>
 800a53e:	4628      	mov	r0, r5
 800a540:	f001 f8be 	bl	800b6c0 <__sinit>
 800a544:	4b2c      	ldr	r3, [pc, #176]	; (800a5f8 <_puts_r+0xd0>)
 800a546:	429c      	cmp	r4, r3
 800a548:	d120      	bne.n	800a58c <_puts_r+0x64>
 800a54a:	686c      	ldr	r4, [r5, #4]
 800a54c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a54e:	07db      	lsls	r3, r3, #31
 800a550:	d405      	bmi.n	800a55e <_puts_r+0x36>
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	0598      	lsls	r0, r3, #22
 800a556:	d402      	bmi.n	800a55e <_puts_r+0x36>
 800a558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a55a:	f001 f954 	bl	800b806 <__retarget_lock_acquire_recursive>
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	0719      	lsls	r1, r3, #28
 800a562:	d51d      	bpl.n	800a5a0 <_puts_r+0x78>
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	b1db      	cbz	r3, 800a5a0 <_puts_r+0x78>
 800a568:	3e01      	subs	r6, #1
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a570:	3b01      	subs	r3, #1
 800a572:	60a3      	str	r3, [r4, #8]
 800a574:	bb39      	cbnz	r1, 800a5c6 <_puts_r+0x9e>
 800a576:	2b00      	cmp	r3, #0
 800a578:	da38      	bge.n	800a5ec <_puts_r+0xc4>
 800a57a:	4622      	mov	r2, r4
 800a57c:	210a      	movs	r1, #10
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f848 	bl	800a614 <__swbuf_r>
 800a584:	3001      	adds	r0, #1
 800a586:	d011      	beq.n	800a5ac <_puts_r+0x84>
 800a588:	250a      	movs	r5, #10
 800a58a:	e011      	b.n	800a5b0 <_puts_r+0x88>
 800a58c:	4b1b      	ldr	r3, [pc, #108]	; (800a5fc <_puts_r+0xd4>)
 800a58e:	429c      	cmp	r4, r3
 800a590:	d101      	bne.n	800a596 <_puts_r+0x6e>
 800a592:	68ac      	ldr	r4, [r5, #8]
 800a594:	e7da      	b.n	800a54c <_puts_r+0x24>
 800a596:	4b1a      	ldr	r3, [pc, #104]	; (800a600 <_puts_r+0xd8>)
 800a598:	429c      	cmp	r4, r3
 800a59a:	bf08      	it	eq
 800a59c:	68ec      	ldreq	r4, [r5, #12]
 800a59e:	e7d5      	b.n	800a54c <_puts_r+0x24>
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f000 f888 	bl	800a6b8 <__swsetup_r>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d0dd      	beq.n	800a568 <_puts_r+0x40>
 800a5ac:	f04f 35ff 	mov.w	r5, #4294967295
 800a5b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b2:	07da      	lsls	r2, r3, #31
 800a5b4:	d405      	bmi.n	800a5c2 <_puts_r+0x9a>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	059b      	lsls	r3, r3, #22
 800a5ba:	d402      	bmi.n	800a5c2 <_puts_r+0x9a>
 800a5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5be:	f001 f923 	bl	800b808 <__retarget_lock_release_recursive>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da04      	bge.n	800a5d4 <_puts_r+0xac>
 800a5ca:	69a2      	ldr	r2, [r4, #24]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	dc06      	bgt.n	800a5de <_puts_r+0xb6>
 800a5d0:	290a      	cmp	r1, #10
 800a5d2:	d004      	beq.n	800a5de <_puts_r+0xb6>
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	6022      	str	r2, [r4, #0]
 800a5da:	7019      	strb	r1, [r3, #0]
 800a5dc:	e7c5      	b.n	800a56a <_puts_r+0x42>
 800a5de:	4622      	mov	r2, r4
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f000 f817 	bl	800a614 <__swbuf_r>
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	d1bf      	bne.n	800a56a <_puts_r+0x42>
 800a5ea:	e7df      	b.n	800a5ac <_puts_r+0x84>
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	250a      	movs	r5, #10
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	6022      	str	r2, [r4, #0]
 800a5f4:	701d      	strb	r5, [r3, #0]
 800a5f6:	e7db      	b.n	800a5b0 <_puts_r+0x88>
 800a5f8:	0800cb44 	.word	0x0800cb44
 800a5fc:	0800cb64 	.word	0x0800cb64
 800a600:	0800cb24 	.word	0x0800cb24

0800a604 <puts>:
 800a604:	4b02      	ldr	r3, [pc, #8]	; (800a610 <puts+0xc>)
 800a606:	4601      	mov	r1, r0
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f7ff bf8d 	b.w	800a528 <_puts_r>
 800a60e:	bf00      	nop
 800a610:	200002ac 	.word	0x200002ac

0800a614 <__swbuf_r>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	460e      	mov	r6, r1
 800a618:	4614      	mov	r4, r2
 800a61a:	4605      	mov	r5, r0
 800a61c:	b118      	cbz	r0, 800a626 <__swbuf_r+0x12>
 800a61e:	6983      	ldr	r3, [r0, #24]
 800a620:	b90b      	cbnz	r3, 800a626 <__swbuf_r+0x12>
 800a622:	f001 f84d 	bl	800b6c0 <__sinit>
 800a626:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <__swbuf_r+0x98>)
 800a628:	429c      	cmp	r4, r3
 800a62a:	d12b      	bne.n	800a684 <__swbuf_r+0x70>
 800a62c:	686c      	ldr	r4, [r5, #4]
 800a62e:	69a3      	ldr	r3, [r4, #24]
 800a630:	60a3      	str	r3, [r4, #8]
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	071a      	lsls	r2, r3, #28
 800a636:	d52f      	bpl.n	800a698 <__swbuf_r+0x84>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	b36b      	cbz	r3, 800a698 <__swbuf_r+0x84>
 800a63c:	6923      	ldr	r3, [r4, #16]
 800a63e:	b2f6      	uxtb	r6, r6
 800a640:	6820      	ldr	r0, [r4, #0]
 800a642:	4637      	mov	r7, r6
 800a644:	1ac0      	subs	r0, r0, r3
 800a646:	6963      	ldr	r3, [r4, #20]
 800a648:	4283      	cmp	r3, r0
 800a64a:	dc04      	bgt.n	800a656 <__swbuf_r+0x42>
 800a64c:	4621      	mov	r1, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 ffa2 	bl	800b598 <_fflush_r>
 800a654:	bb30      	cbnz	r0, 800a6a4 <__swbuf_r+0x90>
 800a656:	68a3      	ldr	r3, [r4, #8]
 800a658:	3001      	adds	r0, #1
 800a65a:	3b01      	subs	r3, #1
 800a65c:	60a3      	str	r3, [r4, #8]
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	6022      	str	r2, [r4, #0]
 800a664:	701e      	strb	r6, [r3, #0]
 800a666:	6963      	ldr	r3, [r4, #20]
 800a668:	4283      	cmp	r3, r0
 800a66a:	d004      	beq.n	800a676 <__swbuf_r+0x62>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	07db      	lsls	r3, r3, #31
 800a670:	d506      	bpl.n	800a680 <__swbuf_r+0x6c>
 800a672:	2e0a      	cmp	r6, #10
 800a674:	d104      	bne.n	800a680 <__swbuf_r+0x6c>
 800a676:	4621      	mov	r1, r4
 800a678:	4628      	mov	r0, r5
 800a67a:	f000 ff8d 	bl	800b598 <_fflush_r>
 800a67e:	b988      	cbnz	r0, 800a6a4 <__swbuf_r+0x90>
 800a680:	4638      	mov	r0, r7
 800a682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a684:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <__swbuf_r+0x9c>)
 800a686:	429c      	cmp	r4, r3
 800a688:	d101      	bne.n	800a68e <__swbuf_r+0x7a>
 800a68a:	68ac      	ldr	r4, [r5, #8]
 800a68c:	e7cf      	b.n	800a62e <__swbuf_r+0x1a>
 800a68e:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <__swbuf_r+0xa0>)
 800a690:	429c      	cmp	r4, r3
 800a692:	bf08      	it	eq
 800a694:	68ec      	ldreq	r4, [r5, #12]
 800a696:	e7ca      	b.n	800a62e <__swbuf_r+0x1a>
 800a698:	4621      	mov	r1, r4
 800a69a:	4628      	mov	r0, r5
 800a69c:	f000 f80c 	bl	800a6b8 <__swsetup_r>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d0cb      	beq.n	800a63c <__swbuf_r+0x28>
 800a6a4:	f04f 37ff 	mov.w	r7, #4294967295
 800a6a8:	e7ea      	b.n	800a680 <__swbuf_r+0x6c>
 800a6aa:	bf00      	nop
 800a6ac:	0800cb44 	.word	0x0800cb44
 800a6b0:	0800cb64 	.word	0x0800cb64
 800a6b4:	0800cb24 	.word	0x0800cb24

0800a6b8 <__swsetup_r>:
 800a6b8:	4b32      	ldr	r3, [pc, #200]	; (800a784 <__swsetup_r+0xcc>)
 800a6ba:	b570      	push	{r4, r5, r6, lr}
 800a6bc:	681d      	ldr	r5, [r3, #0]
 800a6be:	4606      	mov	r6, r0
 800a6c0:	460c      	mov	r4, r1
 800a6c2:	b125      	cbz	r5, 800a6ce <__swsetup_r+0x16>
 800a6c4:	69ab      	ldr	r3, [r5, #24]
 800a6c6:	b913      	cbnz	r3, 800a6ce <__swsetup_r+0x16>
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f000 fff9 	bl	800b6c0 <__sinit>
 800a6ce:	4b2e      	ldr	r3, [pc, #184]	; (800a788 <__swsetup_r+0xd0>)
 800a6d0:	429c      	cmp	r4, r3
 800a6d2:	d10f      	bne.n	800a6f4 <__swsetup_r+0x3c>
 800a6d4:	686c      	ldr	r4, [r5, #4]
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6dc:	0719      	lsls	r1, r3, #28
 800a6de:	d42c      	bmi.n	800a73a <__swsetup_r+0x82>
 800a6e0:	06dd      	lsls	r5, r3, #27
 800a6e2:	d411      	bmi.n	800a708 <__swsetup_r+0x50>
 800a6e4:	2309      	movs	r3, #9
 800a6e6:	6033      	str	r3, [r6, #0]
 800a6e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f0:	81a3      	strh	r3, [r4, #12]
 800a6f2:	e03e      	b.n	800a772 <__swsetup_r+0xba>
 800a6f4:	4b25      	ldr	r3, [pc, #148]	; (800a78c <__swsetup_r+0xd4>)
 800a6f6:	429c      	cmp	r4, r3
 800a6f8:	d101      	bne.n	800a6fe <__swsetup_r+0x46>
 800a6fa:	68ac      	ldr	r4, [r5, #8]
 800a6fc:	e7eb      	b.n	800a6d6 <__swsetup_r+0x1e>
 800a6fe:	4b24      	ldr	r3, [pc, #144]	; (800a790 <__swsetup_r+0xd8>)
 800a700:	429c      	cmp	r4, r3
 800a702:	bf08      	it	eq
 800a704:	68ec      	ldreq	r4, [r5, #12]
 800a706:	e7e6      	b.n	800a6d6 <__swsetup_r+0x1e>
 800a708:	0758      	lsls	r0, r3, #29
 800a70a:	d512      	bpl.n	800a732 <__swsetup_r+0x7a>
 800a70c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a70e:	b141      	cbz	r1, 800a722 <__swsetup_r+0x6a>
 800a710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a714:	4299      	cmp	r1, r3
 800a716:	d002      	beq.n	800a71e <__swsetup_r+0x66>
 800a718:	4630      	mov	r0, r6
 800a71a:	f001 fc91 	bl	800c040 <_free_r>
 800a71e:	2300      	movs	r3, #0
 800a720:	6363      	str	r3, [r4, #52]	; 0x34
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	2300      	movs	r3, #0
 800a72c:	6063      	str	r3, [r4, #4]
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	f043 0308 	orr.w	r3, r3, #8
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	b94b      	cbnz	r3, 800a752 <__swsetup_r+0x9a>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a748:	d003      	beq.n	800a752 <__swsetup_r+0x9a>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4630      	mov	r0, r6
 800a74e:	f001 f881 	bl	800b854 <__smakebuf_r>
 800a752:	89a0      	ldrh	r0, [r4, #12]
 800a754:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a758:	f010 0301 	ands.w	r3, r0, #1
 800a75c:	d00a      	beq.n	800a774 <__swsetup_r+0xbc>
 800a75e:	2300      	movs	r3, #0
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	6963      	ldr	r3, [r4, #20]
 800a764:	425b      	negs	r3, r3
 800a766:	61a3      	str	r3, [r4, #24]
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	b943      	cbnz	r3, 800a77e <__swsetup_r+0xc6>
 800a76c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a770:	d1ba      	bne.n	800a6e8 <__swsetup_r+0x30>
 800a772:	bd70      	pop	{r4, r5, r6, pc}
 800a774:	0781      	lsls	r1, r0, #30
 800a776:	bf58      	it	pl
 800a778:	6963      	ldrpl	r3, [r4, #20]
 800a77a:	60a3      	str	r3, [r4, #8]
 800a77c:	e7f4      	b.n	800a768 <__swsetup_r+0xb0>
 800a77e:	2000      	movs	r0, #0
 800a780:	e7f7      	b.n	800a772 <__swsetup_r+0xba>
 800a782:	bf00      	nop
 800a784:	200002ac 	.word	0x200002ac
 800a788:	0800cb44 	.word	0x0800cb44
 800a78c:	0800cb64 	.word	0x0800cb64
 800a790:	0800cb24 	.word	0x0800cb24

0800a794 <quorem>:
 800a794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	6903      	ldr	r3, [r0, #16]
 800a79a:	4607      	mov	r7, r0
 800a79c:	690c      	ldr	r4, [r1, #16]
 800a79e:	42a3      	cmp	r3, r4
 800a7a0:	f2c0 8087 	blt.w	800a8b2 <quorem+0x11e>
 800a7a4:	3c01      	subs	r4, #1
 800a7a6:	f100 0514 	add.w	r5, r0, #20
 800a7aa:	f101 0814 	add.w	r8, r1, #20
 800a7ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7ba:	9301      	str	r3, [sp, #4]
 800a7bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7cc:	d335      	bcc.n	800a83a <quorem+0xa6>
 800a7ce:	f04f 0e00 	mov.w	lr, #0
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	46ac      	mov	ip, r5
 800a7d6:	46f2      	mov	sl, lr
 800a7d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7dc:	b293      	uxth	r3, r2
 800a7de:	4581      	cmp	r9, r0
 800a7e0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a7e4:	fb06 e303 	mla	r3, r6, r3, lr
 800a7e8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	fb06 e202 	mla	r2, r6, r2, lr
 800a7f2:	ebaa 0303 	sub.w	r3, sl, r3
 800a7f6:	f8dc a000 	ldr.w	sl, [ip]
 800a7fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7fe:	fa1f fa8a 	uxth.w	sl, sl
 800a802:	b292      	uxth	r2, r2
 800a804:	4453      	add	r3, sl
 800a806:	9300      	str	r3, [sp, #0]
 800a808:	f8dc 3000 	ldr.w	r3, [ip]
 800a80c:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 800a810:	9b00      	ldr	r3, [sp, #0]
 800a812:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a816:	f8bd 3000 	ldrh.w	r3, [sp]
 800a81a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a81e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a822:	f84c 3b04 	str.w	r3, [ip], #4
 800a826:	d2d7      	bcs.n	800a7d8 <quorem+0x44>
 800a828:	f855 300b 	ldr.w	r3, [r5, fp]
 800a82c:	b92b      	cbnz	r3, 800a83a <quorem+0xa6>
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	3b04      	subs	r3, #4
 800a832:	429d      	cmp	r5, r3
 800a834:	461a      	mov	r2, r3
 800a836:	d330      	bcc.n	800a89a <quorem+0x106>
 800a838:	613c      	str	r4, [r7, #16]
 800a83a:	4638      	mov	r0, r7
 800a83c:	f001 fae2 	bl	800be04 <__mcmp>
 800a840:	2800      	cmp	r0, #0
 800a842:	db26      	blt.n	800a892 <quorem+0xfe>
 800a844:	3601      	adds	r6, #1
 800a846:	4628      	mov	r0, r5
 800a848:	f04f 0c00 	mov.w	ip, #0
 800a84c:	f858 1b04 	ldr.w	r1, [r8], #4
 800a850:	f8d0 e000 	ldr.w	lr, [r0]
 800a854:	b28b      	uxth	r3, r1
 800a856:	45c1      	cmp	r9, r8
 800a858:	fa1f f28e 	uxth.w	r2, lr
 800a85c:	ebac 0303 	sub.w	r3, ip, r3
 800a860:	4413      	add	r3, r2
 800a862:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800a866:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a86a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a86e:	b29b      	uxth	r3, r3
 800a870:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a874:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a878:	f840 3b04 	str.w	r3, [r0], #4
 800a87c:	d2e6      	bcs.n	800a84c <quorem+0xb8>
 800a87e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a886:	b922      	cbnz	r2, 800a892 <quorem+0xfe>
 800a888:	3b04      	subs	r3, #4
 800a88a:	429d      	cmp	r5, r3
 800a88c:	461a      	mov	r2, r3
 800a88e:	d30a      	bcc.n	800a8a6 <quorem+0x112>
 800a890:	613c      	str	r4, [r7, #16]
 800a892:	4630      	mov	r0, r6
 800a894:	b003      	add	sp, #12
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89a:	6812      	ldr	r2, [r2, #0]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	2a00      	cmp	r2, #0
 800a8a0:	d1ca      	bne.n	800a838 <quorem+0xa4>
 800a8a2:	3c01      	subs	r4, #1
 800a8a4:	e7c5      	b.n	800a832 <quorem+0x9e>
 800a8a6:	6812      	ldr	r2, [r2, #0]
 800a8a8:	3b04      	subs	r3, #4
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	d1f0      	bne.n	800a890 <quorem+0xfc>
 800a8ae:	3c01      	subs	r4, #1
 800a8b0:	e7eb      	b.n	800a88a <quorem+0xf6>
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	e7ee      	b.n	800a894 <quorem+0x100>
	...

0800a8b8 <_dtoa_r>:
 800a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a8be:	4604      	mov	r4, r0
 800a8c0:	ee10 aa10 	vmov	sl, s0
 800a8c4:	ed2d 8b04 	vpush	{d8-d9}
 800a8c8:	b093      	sub	sp, #76	; 0x4c
 800a8ca:	ec57 6b10 	vmov	r6, r7, d0
 800a8ce:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a8d2:	46bb      	mov	fp, r7
 800a8d4:	9106      	str	r1, [sp, #24]
 800a8d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a8da:	b975      	cbnz	r5, 800a8fa <_dtoa_r+0x42>
 800a8dc:	2010      	movs	r0, #16
 800a8de:	f000 fff9 	bl	800b8d4 <malloc>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	6260      	str	r0, [r4, #36]	; 0x24
 800a8e6:	b920      	cbnz	r0, 800a8f2 <_dtoa_r+0x3a>
 800a8e8:	4ba7      	ldr	r3, [pc, #668]	; (800ab88 <_dtoa_r+0x2d0>)
 800a8ea:	21ea      	movs	r1, #234	; 0xea
 800a8ec:	48a7      	ldr	r0, [pc, #668]	; (800ab8c <_dtoa_r+0x2d4>)
 800a8ee:	f001 fe8f 	bl	800c610 <__assert_func>
 800a8f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8f6:	6005      	str	r5, [r0, #0]
 800a8f8:	60c5      	str	r5, [r0, #12]
 800a8fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8fc:	6819      	ldr	r1, [r3, #0]
 800a8fe:	b151      	cbz	r1, 800a916 <_dtoa_r+0x5e>
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	2301      	movs	r3, #1
 800a904:	4620      	mov	r0, r4
 800a906:	4093      	lsls	r3, r2
 800a908:	604a      	str	r2, [r1, #4]
 800a90a:	608b      	str	r3, [r1, #8]
 800a90c:	f001 f838 	bl	800b980 <_Bfree>
 800a910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	1e3b      	subs	r3, r7, #0
 800a918:	bfad      	iteet	ge
 800a91a:	2300      	movge	r3, #0
 800a91c:	2201      	movlt	r2, #1
 800a91e:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a922:	f8c8 3000 	strge.w	r3, [r8]
 800a926:	4b9a      	ldr	r3, [pc, #616]	; (800ab90 <_dtoa_r+0x2d8>)
 800a928:	bfb8      	it	lt
 800a92a:	f8c8 2000 	strlt.w	r2, [r8]
 800a92e:	ea33 030b 	bics.w	r3, r3, fp
 800a932:	d11b      	bne.n	800a96c <_dtoa_r+0xb4>
 800a934:	f242 730f 	movw	r3, #9999	; 0x270f
 800a938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a93a:	6013      	str	r3, [r2, #0]
 800a93c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a940:	4333      	orrs	r3, r6
 800a942:	f000 858f 	beq.w	800b464 <_dtoa_r+0xbac>
 800a946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a948:	b963      	cbnz	r3, 800a964 <_dtoa_r+0xac>
 800a94a:	4b92      	ldr	r3, [pc, #584]	; (800ab94 <_dtoa_r+0x2dc>)
 800a94c:	e022      	b.n	800a994 <_dtoa_r+0xdc>
 800a94e:	4b92      	ldr	r3, [pc, #584]	; (800ab98 <_dtoa_r+0x2e0>)
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	3308      	adds	r3, #8
 800a954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	9801      	ldr	r0, [sp, #4]
 800a95a:	b013      	add	sp, #76	; 0x4c
 800a95c:	ecbd 8b04 	vpop	{d8-d9}
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	4b8b      	ldr	r3, [pc, #556]	; (800ab94 <_dtoa_r+0x2dc>)
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	3303      	adds	r3, #3
 800a96a:	e7f3      	b.n	800a954 <_dtoa_r+0x9c>
 800a96c:	2200      	movs	r2, #0
 800a96e:	2300      	movs	r3, #0
 800a970:	4650      	mov	r0, sl
 800a972:	4659      	mov	r1, fp
 800a974:	f7f6 f8ac 	bl	8000ad0 <__aeabi_dcmpeq>
 800a978:	4680      	mov	r8, r0
 800a97a:	ec4b ab19 	vmov	d9, sl, fp
 800a97e:	b158      	cbz	r0, 800a998 <_dtoa_r+0xe0>
 800a980:	2301      	movs	r3, #1
 800a982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 8568 	beq.w	800b45e <_dtoa_r+0xba6>
 800a98e:	4883      	ldr	r0, [pc, #524]	; (800ab9c <_dtoa_r+0x2e4>)
 800a990:	6018      	str	r0, [r3, #0]
 800a992:	1e43      	subs	r3, r0, #1
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	e7df      	b.n	800a958 <_dtoa_r+0xa0>
 800a998:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a99c:	aa10      	add	r2, sp, #64	; 0x40
 800a99e:	a911      	add	r1, sp, #68	; 0x44
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	ec4b ab10 	vmov	d0, sl, fp
 800a9a6:	f001 fad9 	bl	800bf5c <__d2b>
 800a9aa:	ee08 0a10 	vmov	s16, r0
 800a9ae:	2d00      	cmp	r5, #0
 800a9b0:	f000 8082 	beq.w	800aab8 <_dtoa_r+0x200>
 800a9b4:	ee19 3a90 	vmov	r3, s19
 800a9b8:	4656      	mov	r6, sl
 800a9ba:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a9be:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a9c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a9ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4b73      	ldr	r3, [pc, #460]	; (800aba0 <_dtoa_r+0x2e8>)
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	4639      	mov	r1, r7
 800a9d6:	f7f5 fc5b 	bl	8000290 <__aeabi_dsub>
 800a9da:	a365      	add	r3, pc, #404	; (adr r3, 800ab70 <_dtoa_r+0x2b8>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f7f5 fe0e 	bl	8000600 <__aeabi_dmul>
 800a9e4:	a364      	add	r3, pc, #400	; (adr r3, 800ab78 <_dtoa_r+0x2c0>)
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	f7f5 fc53 	bl	8000294 <__adddf3>
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	f7f5 fd9a 	bl	800052c <__aeabi_i2d>
 800a9f8:	a361      	add	r3, pc, #388	; (adr r3, 800ab80 <_dtoa_r+0x2c8>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fdff 	bl	8000600 <__aeabi_dmul>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	4630      	mov	r0, r6
 800aa08:	4639      	mov	r1, r7
 800aa0a:	f7f5 fc43 	bl	8000294 <__adddf3>
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460f      	mov	r7, r1
 800aa12:	f7f6 f8a5 	bl	8000b60 <__aeabi_d2iz>
 800aa16:	2200      	movs	r2, #0
 800aa18:	9000      	str	r0, [sp, #0]
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	4639      	mov	r1, r7
 800aa20:	f7f6 f860 	bl	8000ae4 <__aeabi_dcmplt>
 800aa24:	b150      	cbz	r0, 800aa3c <_dtoa_r+0x184>
 800aa26:	9800      	ldr	r0, [sp, #0]
 800aa28:	f7f5 fd80 	bl	800052c <__aeabi_i2d>
 800aa2c:	4632      	mov	r2, r6
 800aa2e:	463b      	mov	r3, r7
 800aa30:	f7f6 f84e 	bl	8000ad0 <__aeabi_dcmpeq>
 800aa34:	b910      	cbnz	r0, 800aa3c <_dtoa_r+0x184>
 800aa36:	9b00      	ldr	r3, [sp, #0]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	9b00      	ldr	r3, [sp, #0]
 800aa3e:	2b16      	cmp	r3, #22
 800aa40:	d859      	bhi.n	800aaf6 <_dtoa_r+0x23e>
 800aa42:	9a00      	ldr	r2, [sp, #0]
 800aa44:	4b57      	ldr	r3, [pc, #348]	; (800aba4 <_dtoa_r+0x2ec>)
 800aa46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4a:	ec51 0b19 	vmov	r0, r1, d9
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f6 f847 	bl	8000ae4 <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d04f      	beq.n	800aafa <_dtoa_r+0x242>
 800aa5a:	9b00      	ldr	r3, [sp, #0]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	2300      	movs	r3, #0
 800aa62:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa66:	1b5d      	subs	r5, r3, r5
 800aa68:	1e6b      	subs	r3, r5, #1
 800aa6a:	9305      	str	r3, [sp, #20]
 800aa6c:	bf49      	itett	mi
 800aa6e:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa72:	2300      	movpl	r3, #0
 800aa74:	9304      	strmi	r3, [sp, #16]
 800aa76:	2300      	movmi	r3, #0
 800aa78:	bf54      	ite	pl
 800aa7a:	9304      	strpl	r3, [sp, #16]
 800aa7c:	9305      	strmi	r3, [sp, #20]
 800aa7e:	9b00      	ldr	r3, [sp, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	db3c      	blt.n	800aafe <_dtoa_r+0x246>
 800aa84:	9b05      	ldr	r3, [sp, #20]
 800aa86:	9a00      	ldr	r2, [sp, #0]
 800aa88:	4413      	add	r3, r2
 800aa8a:	920a      	str	r2, [sp, #40]	; 0x28
 800aa8c:	9305      	str	r3, [sp, #20]
 800aa8e:	2300      	movs	r3, #0
 800aa90:	9307      	str	r3, [sp, #28]
 800aa92:	9b06      	ldr	r3, [sp, #24]
 800aa94:	2b09      	cmp	r3, #9
 800aa96:	f200 8089 	bhi.w	800abac <_dtoa_r+0x2f4>
 800aa9a:	2b05      	cmp	r3, #5
 800aa9c:	bfc5      	ittet	gt
 800aa9e:	3b04      	subgt	r3, #4
 800aaa0:	2500      	movgt	r5, #0
 800aaa2:	2501      	movle	r5, #1
 800aaa4:	9306      	strgt	r3, [sp, #24]
 800aaa6:	9b06      	ldr	r3, [sp, #24]
 800aaa8:	3b02      	subs	r3, #2
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	f200 8089 	bhi.w	800abc2 <_dtoa_r+0x30a>
 800aab0:	e8df f003 	tbb	[pc, r3]
 800aab4:	5a393b2e 	.word	0x5a393b2e
 800aab8:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aabc:	441d      	add	r5, r3
 800aabe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	bfc6      	itte	gt
 800aac6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aaca:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aace:	f1c3 0320 	rsble	r3, r3, #32
 800aad2:	f105 35ff 	add.w	r5, r5, #4294967295
 800aad6:	bfc5      	ittet	gt
 800aad8:	fa0b f303 	lslgt.w	r3, fp, r3
 800aadc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aae0:	fa06 f003 	lslle.w	r0, r6, r3
 800aae4:	4318      	orrgt	r0, r3
 800aae6:	f7f5 fd11 	bl	800050c <__aeabi_ui2d>
 800aaea:	2301      	movs	r3, #1
 800aaec:	4606      	mov	r6, r0
 800aaee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aaf2:	930e      	str	r3, [sp, #56]	; 0x38
 800aaf4:	e76b      	b.n	800a9ce <_dtoa_r+0x116>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e7b3      	b.n	800aa62 <_dtoa_r+0x1aa>
 800aafa:	900b      	str	r0, [sp, #44]	; 0x2c
 800aafc:	e7b2      	b.n	800aa64 <_dtoa_r+0x1ac>
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	9a00      	ldr	r2, [sp, #0]
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	9304      	str	r3, [sp, #16]
 800ab06:	4253      	negs	r3, r2
 800ab08:	9307      	str	r3, [sp, #28]
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab0e:	e7c0      	b.n	800aa92 <_dtoa_r+0x1da>
 800ab10:	2300      	movs	r3, #0
 800ab12:	9308      	str	r3, [sp, #32]
 800ab14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dc56      	bgt.n	800abc8 <_dtoa_r+0x310>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab22:	9209      	str	r2, [sp, #36]	; 0x24
 800ab24:	e00c      	b.n	800ab40 <_dtoa_r+0x288>
 800ab26:	2301      	movs	r3, #1
 800ab28:	e7f3      	b.n	800ab12 <_dtoa_r+0x25a>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab2e:	9308      	str	r3, [sp, #32]
 800ab30:	9b00      	ldr	r3, [sp, #0]
 800ab32:	4413      	add	r3, r2
 800ab34:	9302      	str	r3, [sp, #8]
 800ab36:	3301      	adds	r3, #1
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	9303      	str	r3, [sp, #12]
 800ab3c:	bfb8      	it	lt
 800ab3e:	2301      	movlt	r3, #1
 800ab40:	2200      	movs	r2, #0
 800ab42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab44:	6042      	str	r2, [r0, #4]
 800ab46:	2204      	movs	r2, #4
 800ab48:	f102 0614 	add.w	r6, r2, #20
 800ab4c:	6841      	ldr	r1, [r0, #4]
 800ab4e:	429e      	cmp	r6, r3
 800ab50:	d93e      	bls.n	800abd0 <_dtoa_r+0x318>
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fed4 	bl	800b900 <_Balloc>
 800ab58:	9001      	str	r0, [sp, #4]
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d13c      	bne.n	800abd8 <_dtoa_r+0x320>
 800ab5e:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <_dtoa_r+0x2f0>)
 800ab60:	4602      	mov	r2, r0
 800ab62:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab66:	e6c1      	b.n	800a8ec <_dtoa_r+0x34>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e7df      	b.n	800ab2c <_dtoa_r+0x274>
 800ab6c:	f3af 8000 	nop.w
 800ab70:	636f4361 	.word	0x636f4361
 800ab74:	3fd287a7 	.word	0x3fd287a7
 800ab78:	8b60c8b3 	.word	0x8b60c8b3
 800ab7c:	3fc68a28 	.word	0x3fc68a28
 800ab80:	509f79fb 	.word	0x509f79fb
 800ab84:	3fd34413 	.word	0x3fd34413
 800ab88:	0800caa1 	.word	0x0800caa1
 800ab8c:	0800cab8 	.word	0x0800cab8
 800ab90:	7ff00000 	.word	0x7ff00000
 800ab94:	0800ca9d 	.word	0x0800ca9d
 800ab98:	0800ca94 	.word	0x0800ca94
 800ab9c:	0800ca71 	.word	0x0800ca71
 800aba0:	3ff80000 	.word	0x3ff80000
 800aba4:	0800cc08 	.word	0x0800cc08
 800aba8:	0800cb13 	.word	0x0800cb13
 800abac:	2501      	movs	r5, #1
 800abae:	2300      	movs	r3, #0
 800abb0:	9508      	str	r5, [sp, #32]
 800abb2:	9306      	str	r3, [sp, #24]
 800abb4:	f04f 33ff 	mov.w	r3, #4294967295
 800abb8:	2200      	movs	r2, #0
 800abba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abbe:	2312      	movs	r3, #18
 800abc0:	e7af      	b.n	800ab22 <_dtoa_r+0x26a>
 800abc2:	2301      	movs	r3, #1
 800abc4:	9308      	str	r3, [sp, #32]
 800abc6:	e7f5      	b.n	800abb4 <_dtoa_r+0x2fc>
 800abc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abce:	e7b7      	b.n	800ab40 <_dtoa_r+0x288>
 800abd0:	3101      	adds	r1, #1
 800abd2:	0052      	lsls	r2, r2, #1
 800abd4:	6041      	str	r1, [r0, #4]
 800abd6:	e7b7      	b.n	800ab48 <_dtoa_r+0x290>
 800abd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abda:	9a01      	ldr	r2, [sp, #4]
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	2b0e      	cmp	r3, #14
 800abe2:	f200 809d 	bhi.w	800ad20 <_dtoa_r+0x468>
 800abe6:	2d00      	cmp	r5, #0
 800abe8:	f000 809a 	beq.w	800ad20 <_dtoa_r+0x468>
 800abec:	9b00      	ldr	r3, [sp, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	dd32      	ble.n	800ac58 <_dtoa_r+0x3a0>
 800abf2:	f003 030f 	and.w	r3, r3, #15
 800abf6:	4ab6      	ldr	r2, [pc, #728]	; (800aed0 <_dtoa_r+0x618>)
 800abf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac00:	9b00      	ldr	r3, [sp, #0]
 800ac02:	05d8      	lsls	r0, r3, #23
 800ac04:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ac08:	d516      	bpl.n	800ac38 <_dtoa_r+0x380>
 800ac0a:	4bb2      	ldr	r3, [pc, #712]	; (800aed4 <_dtoa_r+0x61c>)
 800ac0c:	f007 070f 	and.w	r7, r7, #15
 800ac10:	2503      	movs	r5, #3
 800ac12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac16:	ec51 0b19 	vmov	r0, r1, d9
 800ac1a:	f7f5 fe1b 	bl	8000854 <__aeabi_ddiv>
 800ac1e:	4682      	mov	sl, r0
 800ac20:	468b      	mov	fp, r1
 800ac22:	4eac      	ldr	r6, [pc, #688]	; (800aed4 <_dtoa_r+0x61c>)
 800ac24:	b957      	cbnz	r7, 800ac3c <_dtoa_r+0x384>
 800ac26:	4642      	mov	r2, r8
 800ac28:	464b      	mov	r3, r9
 800ac2a:	4650      	mov	r0, sl
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	f7f5 fe11 	bl	8000854 <__aeabi_ddiv>
 800ac32:	4682      	mov	sl, r0
 800ac34:	468b      	mov	fp, r1
 800ac36:	e028      	b.n	800ac8a <_dtoa_r+0x3d2>
 800ac38:	2502      	movs	r5, #2
 800ac3a:	e7f2      	b.n	800ac22 <_dtoa_r+0x36a>
 800ac3c:	07f9      	lsls	r1, r7, #31
 800ac3e:	d508      	bpl.n	800ac52 <_dtoa_r+0x39a>
 800ac40:	4640      	mov	r0, r8
 800ac42:	4649      	mov	r1, r9
 800ac44:	3501      	adds	r5, #1
 800ac46:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac4a:	f7f5 fcd9 	bl	8000600 <__aeabi_dmul>
 800ac4e:	4680      	mov	r8, r0
 800ac50:	4689      	mov	r9, r1
 800ac52:	107f      	asrs	r7, r7, #1
 800ac54:	3608      	adds	r6, #8
 800ac56:	e7e5      	b.n	800ac24 <_dtoa_r+0x36c>
 800ac58:	f000 809b 	beq.w	800ad92 <_dtoa_r+0x4da>
 800ac5c:	9b00      	ldr	r3, [sp, #0]
 800ac5e:	2502      	movs	r5, #2
 800ac60:	4f9c      	ldr	r7, [pc, #624]	; (800aed4 <_dtoa_r+0x61c>)
 800ac62:	425e      	negs	r6, r3
 800ac64:	4b9a      	ldr	r3, [pc, #616]	; (800aed0 <_dtoa_r+0x618>)
 800ac66:	f006 020f 	and.w	r2, r6, #15
 800ac6a:	1136      	asrs	r6, r6, #4
 800ac6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac70:	ec51 0b19 	vmov	r0, r1, d9
 800ac74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac78:	f7f5 fcc2 	bl	8000600 <__aeabi_dmul>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4682      	mov	sl, r0
 800ac80:	468b      	mov	fp, r1
 800ac82:	2e00      	cmp	r6, #0
 800ac84:	d17a      	bne.n	800ad7c <_dtoa_r+0x4c4>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1d3      	bne.n	800ac32 <_dtoa_r+0x37a>
 800ac8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 8082 	beq.w	800ad96 <_dtoa_r+0x4de>
 800ac92:	2200      	movs	r2, #0
 800ac94:	4b90      	ldr	r3, [pc, #576]	; (800aed8 <_dtoa_r+0x620>)
 800ac96:	4650      	mov	r0, sl
 800ac98:	4659      	mov	r1, fp
 800ac9a:	f7f5 ff23 	bl	8000ae4 <__aeabi_dcmplt>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d079      	beq.n	800ad96 <_dtoa_r+0x4de>
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d076      	beq.n	800ad96 <_dtoa_r+0x4de>
 800aca8:	9b02      	ldr	r3, [sp, #8]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	dd36      	ble.n	800ad1c <_dtoa_r+0x464>
 800acae:	9b00      	ldr	r3, [sp, #0]
 800acb0:	4650      	mov	r0, sl
 800acb2:	4659      	mov	r1, fp
 800acb4:	2200      	movs	r2, #0
 800acb6:	1e5f      	subs	r7, r3, #1
 800acb8:	4b88      	ldr	r3, [pc, #544]	; (800aedc <_dtoa_r+0x624>)
 800acba:	f7f5 fca1 	bl	8000600 <__aeabi_dmul>
 800acbe:	3501      	adds	r5, #1
 800acc0:	4682      	mov	sl, r0
 800acc2:	468b      	mov	fp, r1
 800acc4:	9e02      	ldr	r6, [sp, #8]
 800acc6:	4628      	mov	r0, r5
 800acc8:	46d0      	mov	r8, sl
 800acca:	f7f5 fc2f 	bl	800052c <__aeabi_i2d>
 800acce:	4652      	mov	r2, sl
 800acd0:	465b      	mov	r3, fp
 800acd2:	46d9      	mov	r9, fp
 800acd4:	f7f5 fc94 	bl	8000600 <__aeabi_dmul>
 800acd8:	2200      	movs	r2, #0
 800acda:	4b81      	ldr	r3, [pc, #516]	; (800aee0 <_dtoa_r+0x628>)
 800acdc:	f7f5 fada 	bl	8000294 <__adddf3>
 800ace0:	4682      	mov	sl, r0
 800ace2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ace6:	2e00      	cmp	r6, #0
 800ace8:	d158      	bne.n	800ad9c <_dtoa_r+0x4e4>
 800acea:	2200      	movs	r2, #0
 800acec:	4b7d      	ldr	r3, [pc, #500]	; (800aee4 <_dtoa_r+0x62c>)
 800acee:	4640      	mov	r0, r8
 800acf0:	4649      	mov	r1, r9
 800acf2:	f7f5 facd 	bl	8000290 <__aeabi_dsub>
 800acf6:	4652      	mov	r2, sl
 800acf8:	465b      	mov	r3, fp
 800acfa:	4680      	mov	r8, r0
 800acfc:	4689      	mov	r9, r1
 800acfe:	f7f5 ff0f 	bl	8000b20 <__aeabi_dcmpgt>
 800ad02:	2800      	cmp	r0, #0
 800ad04:	f040 8293 	bne.w	800b22e <_dtoa_r+0x976>
 800ad08:	4652      	mov	r2, sl
 800ad0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	f7f5 fee7 	bl	8000ae4 <__aeabi_dcmplt>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f040 8287 	bne.w	800b22a <_dtoa_r+0x972>
 800ad1c:	ec5b ab19 	vmov	sl, fp, d9
 800ad20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f2c0 8148 	blt.w	800afb8 <_dtoa_r+0x700>
 800ad28:	9a00      	ldr	r2, [sp, #0]
 800ad2a:	2a0e      	cmp	r2, #14
 800ad2c:	f300 8144 	bgt.w	800afb8 <_dtoa_r+0x700>
 800ad30:	4b67      	ldr	r3, [pc, #412]	; (800aed0 <_dtoa_r+0x618>)
 800ad32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad36:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f280 80d5 	bge.w	800aeec <_dtoa_r+0x634>
 800ad42:	9b03      	ldr	r3, [sp, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f300 80d1 	bgt.w	800aeec <_dtoa_r+0x634>
 800ad4a:	f040 826d 	bne.w	800b228 <_dtoa_r+0x970>
 800ad4e:	2200      	movs	r2, #0
 800ad50:	4b64      	ldr	r3, [pc, #400]	; (800aee4 <_dtoa_r+0x62c>)
 800ad52:	4640      	mov	r0, r8
 800ad54:	4649      	mov	r1, r9
 800ad56:	f7f5 fc53 	bl	8000600 <__aeabi_dmul>
 800ad5a:	4652      	mov	r2, sl
 800ad5c:	465b      	mov	r3, fp
 800ad5e:	f7f5 fed5 	bl	8000b0c <__aeabi_dcmpge>
 800ad62:	9e03      	ldr	r6, [sp, #12]
 800ad64:	4637      	mov	r7, r6
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f040 8243 	bne.w	800b1f2 <_dtoa_r+0x93a>
 800ad6c:	2331      	movs	r3, #49	; 0x31
 800ad6e:	9d01      	ldr	r5, [sp, #4]
 800ad70:	f805 3b01 	strb.w	r3, [r5], #1
 800ad74:	9b00      	ldr	r3, [sp, #0]
 800ad76:	3301      	adds	r3, #1
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	e23e      	b.n	800b1fa <_dtoa_r+0x942>
 800ad7c:	07f2      	lsls	r2, r6, #31
 800ad7e:	d505      	bpl.n	800ad8c <_dtoa_r+0x4d4>
 800ad80:	3501      	adds	r5, #1
 800ad82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad86:	f7f5 fc3b 	bl	8000600 <__aeabi_dmul>
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	1076      	asrs	r6, r6, #1
 800ad8e:	3708      	adds	r7, #8
 800ad90:	e777      	b.n	800ac82 <_dtoa_r+0x3ca>
 800ad92:	2502      	movs	r5, #2
 800ad94:	e779      	b.n	800ac8a <_dtoa_r+0x3d2>
 800ad96:	9f00      	ldr	r7, [sp, #0]
 800ad98:	9e03      	ldr	r6, [sp, #12]
 800ad9a:	e794      	b.n	800acc6 <_dtoa_r+0x40e>
 800ad9c:	9901      	ldr	r1, [sp, #4]
 800ad9e:	4b4c      	ldr	r3, [pc, #304]	; (800aed0 <_dtoa_r+0x618>)
 800ada0:	4431      	add	r1, r6
 800ada2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ada6:	910d      	str	r1, [sp, #52]	; 0x34
 800ada8:	9908      	ldr	r1, [sp, #32]
 800adaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adae:	2900      	cmp	r1, #0
 800adb0:	d043      	beq.n	800ae3a <_dtoa_r+0x582>
 800adb2:	2000      	movs	r0, #0
 800adb4:	494c      	ldr	r1, [pc, #304]	; (800aee8 <_dtoa_r+0x630>)
 800adb6:	f7f5 fd4d 	bl	8000854 <__aeabi_ddiv>
 800adba:	4652      	mov	r2, sl
 800adbc:	465b      	mov	r3, fp
 800adbe:	f7f5 fa67 	bl	8000290 <__aeabi_dsub>
 800adc2:	9d01      	ldr	r5, [sp, #4]
 800adc4:	4682      	mov	sl, r0
 800adc6:	468b      	mov	fp, r1
 800adc8:	4649      	mov	r1, r9
 800adca:	4640      	mov	r0, r8
 800adcc:	f7f5 fec8 	bl	8000b60 <__aeabi_d2iz>
 800add0:	4606      	mov	r6, r0
 800add2:	f7f5 fbab 	bl	800052c <__aeabi_i2d>
 800add6:	4602      	mov	r2, r0
 800add8:	3630      	adds	r6, #48	; 0x30
 800adda:	460b      	mov	r3, r1
 800addc:	4640      	mov	r0, r8
 800adde:	4649      	mov	r1, r9
 800ade0:	f7f5 fa56 	bl	8000290 <__aeabi_dsub>
 800ade4:	4652      	mov	r2, sl
 800ade6:	465b      	mov	r3, fp
 800ade8:	f805 6b01 	strb.w	r6, [r5], #1
 800adec:	4680      	mov	r8, r0
 800adee:	4689      	mov	r9, r1
 800adf0:	f7f5 fe78 	bl	8000ae4 <__aeabi_dcmplt>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d163      	bne.n	800aec0 <_dtoa_r+0x608>
 800adf8:	4642      	mov	r2, r8
 800adfa:	464b      	mov	r3, r9
 800adfc:	2000      	movs	r0, #0
 800adfe:	4936      	ldr	r1, [pc, #216]	; (800aed8 <_dtoa_r+0x620>)
 800ae00:	f7f5 fa46 	bl	8000290 <__aeabi_dsub>
 800ae04:	4652      	mov	r2, sl
 800ae06:	465b      	mov	r3, fp
 800ae08:	f7f5 fe6c 	bl	8000ae4 <__aeabi_dcmplt>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	f040 80b5 	bne.w	800af7c <_dtoa_r+0x6c4>
 800ae12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae14:	429d      	cmp	r5, r3
 800ae16:	d081      	beq.n	800ad1c <_dtoa_r+0x464>
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4b30      	ldr	r3, [pc, #192]	; (800aedc <_dtoa_r+0x624>)
 800ae1c:	4650      	mov	r0, sl
 800ae1e:	4659      	mov	r1, fp
 800ae20:	f7f5 fbee 	bl	8000600 <__aeabi_dmul>
 800ae24:	2200      	movs	r2, #0
 800ae26:	4682      	mov	sl, r0
 800ae28:	468b      	mov	fp, r1
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	4b2b      	ldr	r3, [pc, #172]	; (800aedc <_dtoa_r+0x624>)
 800ae30:	f7f5 fbe6 	bl	8000600 <__aeabi_dmul>
 800ae34:	4680      	mov	r8, r0
 800ae36:	4689      	mov	r9, r1
 800ae38:	e7c6      	b.n	800adc8 <_dtoa_r+0x510>
 800ae3a:	4650      	mov	r0, sl
 800ae3c:	4659      	mov	r1, fp
 800ae3e:	f7f5 fbdf 	bl	8000600 <__aeabi_dmul>
 800ae42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae44:	4682      	mov	sl, r0
 800ae46:	468b      	mov	fp, r1
 800ae48:	9d01      	ldr	r5, [sp, #4]
 800ae4a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	4640      	mov	r0, r8
 800ae50:	f7f5 fe86 	bl	8000b60 <__aeabi_d2iz>
 800ae54:	4606      	mov	r6, r0
 800ae56:	f7f5 fb69 	bl	800052c <__aeabi_i2d>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4640      	mov	r0, r8
 800ae60:	4649      	mov	r1, r9
 800ae62:	3630      	adds	r6, #48	; 0x30
 800ae64:	f7f5 fa14 	bl	8000290 <__aeabi_dsub>
 800ae68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae6a:	f805 6b01 	strb.w	r6, [r5], #1
 800ae6e:	4680      	mov	r8, r0
 800ae70:	429d      	cmp	r5, r3
 800ae72:	4689      	mov	r9, r1
 800ae74:	f04f 0200 	mov.w	r2, #0
 800ae78:	d124      	bne.n	800aec4 <_dtoa_r+0x60c>
 800ae7a:	4b1b      	ldr	r3, [pc, #108]	; (800aee8 <_dtoa_r+0x630>)
 800ae7c:	4650      	mov	r0, sl
 800ae7e:	4659      	mov	r1, fp
 800ae80:	f7f5 fa08 	bl	8000294 <__adddf3>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	f7f5 fe48 	bl	8000b20 <__aeabi_dcmpgt>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d173      	bne.n	800af7c <_dtoa_r+0x6c4>
 800ae94:	4652      	mov	r2, sl
 800ae96:	465b      	mov	r3, fp
 800ae98:	2000      	movs	r0, #0
 800ae9a:	4913      	ldr	r1, [pc, #76]	; (800aee8 <_dtoa_r+0x630>)
 800ae9c:	f7f5 f9f8 	bl	8000290 <__aeabi_dsub>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4640      	mov	r0, r8
 800aea6:	4649      	mov	r1, r9
 800aea8:	f7f5 fe1c 	bl	8000ae4 <__aeabi_dcmplt>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	f43f af35 	beq.w	800ad1c <_dtoa_r+0x464>
 800aeb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aeb4:	1e6b      	subs	r3, r5, #1
 800aeb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aebc:	2b30      	cmp	r3, #48	; 0x30
 800aebe:	d0f8      	beq.n	800aeb2 <_dtoa_r+0x5fa>
 800aec0:	9700      	str	r7, [sp, #0]
 800aec2:	e049      	b.n	800af58 <_dtoa_r+0x6a0>
 800aec4:	4b05      	ldr	r3, [pc, #20]	; (800aedc <_dtoa_r+0x624>)
 800aec6:	f7f5 fb9b 	bl	8000600 <__aeabi_dmul>
 800aeca:	4680      	mov	r8, r0
 800aecc:	4689      	mov	r9, r1
 800aece:	e7bd      	b.n	800ae4c <_dtoa_r+0x594>
 800aed0:	0800cc08 	.word	0x0800cc08
 800aed4:	0800cbe0 	.word	0x0800cbe0
 800aed8:	3ff00000 	.word	0x3ff00000
 800aedc:	40240000 	.word	0x40240000
 800aee0:	401c0000 	.word	0x401c0000
 800aee4:	40140000 	.word	0x40140000
 800aee8:	3fe00000 	.word	0x3fe00000
 800aeec:	4656      	mov	r6, sl
 800aeee:	465f      	mov	r7, fp
 800aef0:	9d01      	ldr	r5, [sp, #4]
 800aef2:	4642      	mov	r2, r8
 800aef4:	464b      	mov	r3, r9
 800aef6:	4630      	mov	r0, r6
 800aef8:	4639      	mov	r1, r7
 800aefa:	f7f5 fcab 	bl	8000854 <__aeabi_ddiv>
 800aefe:	f7f5 fe2f 	bl	8000b60 <__aeabi_d2iz>
 800af02:	4682      	mov	sl, r0
 800af04:	f7f5 fb12 	bl	800052c <__aeabi_i2d>
 800af08:	4642      	mov	r2, r8
 800af0a:	464b      	mov	r3, r9
 800af0c:	f7f5 fb78 	bl	8000600 <__aeabi_dmul>
 800af10:	4602      	mov	r2, r0
 800af12:	4630      	mov	r0, r6
 800af14:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800af18:	460b      	mov	r3, r1
 800af1a:	4639      	mov	r1, r7
 800af1c:	f7f5 f9b8 	bl	8000290 <__aeabi_dsub>
 800af20:	f805 6b01 	strb.w	r6, [r5], #1
 800af24:	9e01      	ldr	r6, [sp, #4]
 800af26:	4602      	mov	r2, r0
 800af28:	9f03      	ldr	r7, [sp, #12]
 800af2a:	460b      	mov	r3, r1
 800af2c:	1bae      	subs	r6, r5, r6
 800af2e:	42b7      	cmp	r7, r6
 800af30:	d135      	bne.n	800af9e <_dtoa_r+0x6e6>
 800af32:	f7f5 f9af 	bl	8000294 <__adddf3>
 800af36:	4642      	mov	r2, r8
 800af38:	464b      	mov	r3, r9
 800af3a:	4606      	mov	r6, r0
 800af3c:	460f      	mov	r7, r1
 800af3e:	f7f5 fdef 	bl	8000b20 <__aeabi_dcmpgt>
 800af42:	b9d0      	cbnz	r0, 800af7a <_dtoa_r+0x6c2>
 800af44:	4642      	mov	r2, r8
 800af46:	464b      	mov	r3, r9
 800af48:	4630      	mov	r0, r6
 800af4a:	4639      	mov	r1, r7
 800af4c:	f7f5 fdc0 	bl	8000ad0 <__aeabi_dcmpeq>
 800af50:	b110      	cbz	r0, 800af58 <_dtoa_r+0x6a0>
 800af52:	f01a 0f01 	tst.w	sl, #1
 800af56:	d110      	bne.n	800af7a <_dtoa_r+0x6c2>
 800af58:	4620      	mov	r0, r4
 800af5a:	ee18 1a10 	vmov	r1, s16
 800af5e:	f000 fd0f 	bl	800b980 <_Bfree>
 800af62:	2300      	movs	r3, #0
 800af64:	9800      	ldr	r0, [sp, #0]
 800af66:	702b      	strb	r3, [r5, #0]
 800af68:	3001      	adds	r0, #1
 800af6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af6c:	6018      	str	r0, [r3, #0]
 800af6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af70:	2b00      	cmp	r3, #0
 800af72:	f43f acf1 	beq.w	800a958 <_dtoa_r+0xa0>
 800af76:	601d      	str	r5, [r3, #0]
 800af78:	e4ee      	b.n	800a958 <_dtoa_r+0xa0>
 800af7a:	9f00      	ldr	r7, [sp, #0]
 800af7c:	462b      	mov	r3, r5
 800af7e:	461d      	mov	r5, r3
 800af80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af84:	2a39      	cmp	r2, #57	; 0x39
 800af86:	d106      	bne.n	800af96 <_dtoa_r+0x6de>
 800af88:	9a01      	ldr	r2, [sp, #4]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d1f7      	bne.n	800af7e <_dtoa_r+0x6c6>
 800af8e:	2230      	movs	r2, #48	; 0x30
 800af90:	9901      	ldr	r1, [sp, #4]
 800af92:	3701      	adds	r7, #1
 800af94:	700a      	strb	r2, [r1, #0]
 800af96:	781a      	ldrb	r2, [r3, #0]
 800af98:	3201      	adds	r2, #1
 800af9a:	701a      	strb	r2, [r3, #0]
 800af9c:	e790      	b.n	800aec0 <_dtoa_r+0x608>
 800af9e:	2200      	movs	r2, #0
 800afa0:	4ba4      	ldr	r3, [pc, #656]	; (800b234 <_dtoa_r+0x97c>)
 800afa2:	f7f5 fb2d 	bl	8000600 <__aeabi_dmul>
 800afa6:	2200      	movs	r2, #0
 800afa8:	2300      	movs	r3, #0
 800afaa:	4606      	mov	r6, r0
 800afac:	460f      	mov	r7, r1
 800afae:	f7f5 fd8f 	bl	8000ad0 <__aeabi_dcmpeq>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d09d      	beq.n	800aef2 <_dtoa_r+0x63a>
 800afb6:	e7cf      	b.n	800af58 <_dtoa_r+0x6a0>
 800afb8:	9a08      	ldr	r2, [sp, #32]
 800afba:	2a00      	cmp	r2, #0
 800afbc:	f000 80d5 	beq.w	800b16a <_dtoa_r+0x8b2>
 800afc0:	9a06      	ldr	r2, [sp, #24]
 800afc2:	2a01      	cmp	r2, #1
 800afc4:	f300 80b9 	bgt.w	800b13a <_dtoa_r+0x882>
 800afc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afca:	2a00      	cmp	r2, #0
 800afcc:	f000 80b1 	beq.w	800b132 <_dtoa_r+0x87a>
 800afd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afd4:	9e07      	ldr	r6, [sp, #28]
 800afd6:	9d04      	ldr	r5, [sp, #16]
 800afd8:	9a04      	ldr	r2, [sp, #16]
 800afda:	2101      	movs	r1, #1
 800afdc:	4620      	mov	r0, r4
 800afde:	441a      	add	r2, r3
 800afe0:	9204      	str	r2, [sp, #16]
 800afe2:	9a05      	ldr	r2, [sp, #20]
 800afe4:	441a      	add	r2, r3
 800afe6:	9205      	str	r2, [sp, #20]
 800afe8:	f000 fd84 	bl	800baf4 <__i2b>
 800afec:	4607      	mov	r7, r0
 800afee:	2d00      	cmp	r5, #0
 800aff0:	dd0c      	ble.n	800b00c <_dtoa_r+0x754>
 800aff2:	9b05      	ldr	r3, [sp, #20]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dd09      	ble.n	800b00c <_dtoa_r+0x754>
 800aff8:	42ab      	cmp	r3, r5
 800affa:	9a04      	ldr	r2, [sp, #16]
 800affc:	bfa8      	it	ge
 800affe:	462b      	movge	r3, r5
 800b000:	1ad2      	subs	r2, r2, r3
 800b002:	1aed      	subs	r5, r5, r3
 800b004:	9204      	str	r2, [sp, #16]
 800b006:	9a05      	ldr	r2, [sp, #20]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	9305      	str	r3, [sp, #20]
 800b00c:	9b07      	ldr	r3, [sp, #28]
 800b00e:	b31b      	cbz	r3, 800b058 <_dtoa_r+0x7a0>
 800b010:	9b08      	ldr	r3, [sp, #32]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 80ad 	beq.w	800b172 <_dtoa_r+0x8ba>
 800b018:	2e00      	cmp	r6, #0
 800b01a:	dd13      	ble.n	800b044 <_dtoa_r+0x78c>
 800b01c:	4639      	mov	r1, r7
 800b01e:	4632      	mov	r2, r6
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fe25 	bl	800bc70 <__pow5mult>
 800b026:	ee18 2a10 	vmov	r2, s16
 800b02a:	4601      	mov	r1, r0
 800b02c:	4607      	mov	r7, r0
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 fd76 	bl	800bb20 <__multiply>
 800b034:	4680      	mov	r8, r0
 800b036:	ee18 1a10 	vmov	r1, s16
 800b03a:	4620      	mov	r0, r4
 800b03c:	ee08 8a10 	vmov	s16, r8
 800b040:	f000 fc9e 	bl	800b980 <_Bfree>
 800b044:	9b07      	ldr	r3, [sp, #28]
 800b046:	1b9a      	subs	r2, r3, r6
 800b048:	d006      	beq.n	800b058 <_dtoa_r+0x7a0>
 800b04a:	ee18 1a10 	vmov	r1, s16
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 fe0e 	bl	800bc70 <__pow5mult>
 800b054:	ee08 0a10 	vmov	s16, r0
 800b058:	2101      	movs	r1, #1
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fd4a 	bl	800baf4 <__i2b>
 800b060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b062:	4606      	mov	r6, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	f340 8086 	ble.w	800b176 <_dtoa_r+0x8be>
 800b06a:	461a      	mov	r2, r3
 800b06c:	4601      	mov	r1, r0
 800b06e:	4620      	mov	r0, r4
 800b070:	f000 fdfe 	bl	800bc70 <__pow5mult>
 800b074:	9b06      	ldr	r3, [sp, #24]
 800b076:	4606      	mov	r6, r0
 800b078:	2b01      	cmp	r3, #1
 800b07a:	dd7f      	ble.n	800b17c <_dtoa_r+0x8c4>
 800b07c:	f04f 0800 	mov.w	r8, #0
 800b080:	6933      	ldr	r3, [r6, #16]
 800b082:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b086:	6918      	ldr	r0, [r3, #16]
 800b088:	f000 fce4 	bl	800ba54 <__hi0bits>
 800b08c:	f1c0 0020 	rsb	r0, r0, #32
 800b090:	9b05      	ldr	r3, [sp, #20]
 800b092:	4418      	add	r0, r3
 800b094:	f010 001f 	ands.w	r0, r0, #31
 800b098:	f000 8091 	beq.w	800b1be <_dtoa_r+0x906>
 800b09c:	f1c0 0320 	rsb	r3, r0, #32
 800b0a0:	2b04      	cmp	r3, #4
 800b0a2:	f340 8089 	ble.w	800b1b8 <_dtoa_r+0x900>
 800b0a6:	f1c0 001c 	rsb	r0, r0, #28
 800b0aa:	9b04      	ldr	r3, [sp, #16]
 800b0ac:	4405      	add	r5, r0
 800b0ae:	4403      	add	r3, r0
 800b0b0:	9304      	str	r3, [sp, #16]
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	4403      	add	r3, r0
 800b0b6:	9305      	str	r3, [sp, #20]
 800b0b8:	9b04      	ldr	r3, [sp, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	dd07      	ble.n	800b0ce <_dtoa_r+0x816>
 800b0be:	ee18 1a10 	vmov	r1, s16
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fe2d 	bl	800bd24 <__lshift>
 800b0ca:	ee08 0a10 	vmov	s16, r0
 800b0ce:	9b05      	ldr	r3, [sp, #20]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	dd05      	ble.n	800b0e0 <_dtoa_r+0x828>
 800b0d4:	4631      	mov	r1, r6
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 fe23 	bl	800bd24 <__lshift>
 800b0de:	4606      	mov	r6, r0
 800b0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d06d      	beq.n	800b1c2 <_dtoa_r+0x90a>
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	ee18 0a10 	vmov	r0, s16
 800b0ec:	f000 fe8a 	bl	800be04 <__mcmp>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	da66      	bge.n	800b1c2 <_dtoa_r+0x90a>
 800b0f4:	9b00      	ldr	r3, [sp, #0]
 800b0f6:	ee18 1a10 	vmov	r1, s16
 800b0fa:	220a      	movs	r2, #10
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	3b01      	subs	r3, #1
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	2300      	movs	r3, #0
 800b104:	f000 fc5e 	bl	800b9c4 <__multadd>
 800b108:	9b08      	ldr	r3, [sp, #32]
 800b10a:	ee08 0a10 	vmov	s16, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 81af 	beq.w	800b472 <_dtoa_r+0xbba>
 800b114:	2300      	movs	r3, #0
 800b116:	4639      	mov	r1, r7
 800b118:	220a      	movs	r2, #10
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fc52 	bl	800b9c4 <__multadd>
 800b120:	9b02      	ldr	r3, [sp, #8]
 800b122:	4607      	mov	r7, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	f300 808d 	bgt.w	800b244 <_dtoa_r+0x98c>
 800b12a:	9b06      	ldr	r3, [sp, #24]
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	dc50      	bgt.n	800b1d2 <_dtoa_r+0x91a>
 800b130:	e088      	b.n	800b244 <_dtoa_r+0x98c>
 800b132:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b134:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b138:	e74c      	b.n	800afd4 <_dtoa_r+0x71c>
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	1e5e      	subs	r6, r3, #1
 800b13e:	9b07      	ldr	r3, [sp, #28]
 800b140:	42b3      	cmp	r3, r6
 800b142:	bfb7      	itett	lt
 800b144:	9b07      	ldrlt	r3, [sp, #28]
 800b146:	1b9e      	subge	r6, r3, r6
 800b148:	9607      	strlt	r6, [sp, #28]
 800b14a:	1af2      	sublt	r2, r6, r3
 800b14c:	bfbf      	itttt	lt
 800b14e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b150:	2600      	movlt	r6, #0
 800b152:	189b      	addlt	r3, r3, r2
 800b154:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bfb7      	itett	lt
 800b15c:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b160:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b164:	1a9d      	sublt	r5, r3, r2
 800b166:	2300      	movlt	r3, #0
 800b168:	e736      	b.n	800afd8 <_dtoa_r+0x720>
 800b16a:	9e07      	ldr	r6, [sp, #28]
 800b16c:	9d04      	ldr	r5, [sp, #16]
 800b16e:	9f08      	ldr	r7, [sp, #32]
 800b170:	e73d      	b.n	800afee <_dtoa_r+0x736>
 800b172:	9a07      	ldr	r2, [sp, #28]
 800b174:	e769      	b.n	800b04a <_dtoa_r+0x792>
 800b176:	9b06      	ldr	r3, [sp, #24]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	dc18      	bgt.n	800b1ae <_dtoa_r+0x8f6>
 800b17c:	f1ba 0f00 	cmp.w	sl, #0
 800b180:	d115      	bne.n	800b1ae <_dtoa_r+0x8f6>
 800b182:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b186:	b993      	cbnz	r3, 800b1ae <_dtoa_r+0x8f6>
 800b188:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b18c:	0d1b      	lsrs	r3, r3, #20
 800b18e:	051b      	lsls	r3, r3, #20
 800b190:	b183      	cbz	r3, 800b1b4 <_dtoa_r+0x8fc>
 800b192:	9b04      	ldr	r3, [sp, #16]
 800b194:	f04f 0801 	mov.w	r8, #1
 800b198:	3301      	adds	r3, #1
 800b19a:	9304      	str	r3, [sp, #16]
 800b19c:	9b05      	ldr	r3, [sp, #20]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	9305      	str	r3, [sp, #20]
 800b1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f47f af6b 	bne.w	800b080 <_dtoa_r+0x7c8>
 800b1aa:	2001      	movs	r0, #1
 800b1ac:	e770      	b.n	800b090 <_dtoa_r+0x7d8>
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	e7f6      	b.n	800b1a2 <_dtoa_r+0x8ea>
 800b1b4:	4698      	mov	r8, r3
 800b1b6:	e7f4      	b.n	800b1a2 <_dtoa_r+0x8ea>
 800b1b8:	f43f af7e 	beq.w	800b0b8 <_dtoa_r+0x800>
 800b1bc:	4618      	mov	r0, r3
 800b1be:	301c      	adds	r0, #28
 800b1c0:	e773      	b.n	800b0aa <_dtoa_r+0x7f2>
 800b1c2:	9b03      	ldr	r3, [sp, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dc37      	bgt.n	800b238 <_dtoa_r+0x980>
 800b1c8:	9b06      	ldr	r3, [sp, #24]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	dd34      	ble.n	800b238 <_dtoa_r+0x980>
 800b1ce:	9b03      	ldr	r3, [sp, #12]
 800b1d0:	9302      	str	r3, [sp, #8]
 800b1d2:	9b02      	ldr	r3, [sp, #8]
 800b1d4:	b96b      	cbnz	r3, 800b1f2 <_dtoa_r+0x93a>
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	2205      	movs	r2, #5
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 fbf2 	bl	800b9c4 <__multadd>
 800b1e0:	4601      	mov	r1, r0
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	ee18 0a10 	vmov	r0, s16
 800b1e8:	f000 fe0c 	bl	800be04 <__mcmp>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f73f adbd 	bgt.w	800ad6c <_dtoa_r+0x4b4>
 800b1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f4:	9d01      	ldr	r5, [sp, #4]
 800b1f6:	43db      	mvns	r3, r3
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	f04f 0800 	mov.w	r8, #0
 800b1fe:	4631      	mov	r1, r6
 800b200:	4620      	mov	r0, r4
 800b202:	f000 fbbd 	bl	800b980 <_Bfree>
 800b206:	2f00      	cmp	r7, #0
 800b208:	f43f aea6 	beq.w	800af58 <_dtoa_r+0x6a0>
 800b20c:	f1b8 0f00 	cmp.w	r8, #0
 800b210:	d005      	beq.n	800b21e <_dtoa_r+0x966>
 800b212:	45b8      	cmp	r8, r7
 800b214:	d003      	beq.n	800b21e <_dtoa_r+0x966>
 800b216:	4641      	mov	r1, r8
 800b218:	4620      	mov	r0, r4
 800b21a:	f000 fbb1 	bl	800b980 <_Bfree>
 800b21e:	4639      	mov	r1, r7
 800b220:	4620      	mov	r0, r4
 800b222:	f000 fbad 	bl	800b980 <_Bfree>
 800b226:	e697      	b.n	800af58 <_dtoa_r+0x6a0>
 800b228:	2600      	movs	r6, #0
 800b22a:	4637      	mov	r7, r6
 800b22c:	e7e1      	b.n	800b1f2 <_dtoa_r+0x93a>
 800b22e:	9700      	str	r7, [sp, #0]
 800b230:	4637      	mov	r7, r6
 800b232:	e59b      	b.n	800ad6c <_dtoa_r+0x4b4>
 800b234:	40240000 	.word	0x40240000
 800b238:	9b08      	ldr	r3, [sp, #32]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 80ca 	beq.w	800b3d4 <_dtoa_r+0xb1c>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	9302      	str	r3, [sp, #8]
 800b244:	2d00      	cmp	r5, #0
 800b246:	dd05      	ble.n	800b254 <_dtoa_r+0x99c>
 800b248:	4639      	mov	r1, r7
 800b24a:	462a      	mov	r2, r5
 800b24c:	4620      	mov	r0, r4
 800b24e:	f000 fd69 	bl	800bd24 <__lshift>
 800b252:	4607      	mov	r7, r0
 800b254:	f1b8 0f00 	cmp.w	r8, #0
 800b258:	d05b      	beq.n	800b312 <_dtoa_r+0xa5a>
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fb4f 	bl	800b900 <_Balloc>
 800b262:	4605      	mov	r5, r0
 800b264:	b928      	cbnz	r0, 800b272 <_dtoa_r+0x9ba>
 800b266:	4b87      	ldr	r3, [pc, #540]	; (800b484 <_dtoa_r+0xbcc>)
 800b268:	4602      	mov	r2, r0
 800b26a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b26e:	f7ff bb3d 	b.w	800a8ec <_dtoa_r+0x34>
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	f107 010c 	add.w	r1, r7, #12
 800b278:	300c      	adds	r0, #12
 800b27a:	3202      	adds	r2, #2
 800b27c:	0092      	lsls	r2, r2, #2
 800b27e:	f7fe fca3 	bl	8009bc8 <memcpy>
 800b282:	2201      	movs	r2, #1
 800b284:	4629      	mov	r1, r5
 800b286:	4620      	mov	r0, r4
 800b288:	f000 fd4c 	bl	800bd24 <__lshift>
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	46b8      	mov	r8, r7
 800b290:	4607      	mov	r7, r0
 800b292:	f103 0901 	add.w	r9, r3, #1
 800b296:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b29a:	4413      	add	r3, r2
 800b29c:	9305      	str	r3, [sp, #20]
 800b29e:	f00a 0301 	and.w	r3, sl, #1
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	ee18 0a10 	vmov	r0, s16
 800b2aa:	f7ff fa73 	bl	800a794 <quorem>
 800b2ae:	4641      	mov	r1, r8
 800b2b0:	9002      	str	r0, [sp, #8]
 800b2b2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b2b6:	ee18 0a10 	vmov	r0, s16
 800b2ba:	f109 3bff 	add.w	fp, r9, #4294967295
 800b2be:	f000 fda1 	bl	800be04 <__mcmp>
 800b2c2:	463a      	mov	r2, r7
 800b2c4:	9003      	str	r0, [sp, #12]
 800b2c6:	4631      	mov	r1, r6
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	f000 fdb7 	bl	800be3c <__mdiff>
 800b2ce:	68c2      	ldr	r2, [r0, #12]
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	bb02      	cbnz	r2, 800b316 <_dtoa_r+0xa5e>
 800b2d4:	4601      	mov	r1, r0
 800b2d6:	ee18 0a10 	vmov	r0, s16
 800b2da:	f000 fd93 	bl	800be04 <__mcmp>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	9207      	str	r2, [sp, #28]
 800b2e6:	f000 fb4b 	bl	800b980 <_Bfree>
 800b2ea:	464d      	mov	r5, r9
 800b2ec:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b2f0:	ea43 0102 	orr.w	r1, r3, r2
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	430b      	orrs	r3, r1
 800b2f8:	d10f      	bne.n	800b31a <_dtoa_r+0xa62>
 800b2fa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2fe:	d02a      	beq.n	800b356 <_dtoa_r+0xa9e>
 800b300:	9b03      	ldr	r3, [sp, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	dd02      	ble.n	800b30c <_dtoa_r+0xa54>
 800b306:	9b02      	ldr	r3, [sp, #8]
 800b308:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b30c:	f88b a000 	strb.w	sl, [fp]
 800b310:	e775      	b.n	800b1fe <_dtoa_r+0x946>
 800b312:	4638      	mov	r0, r7
 800b314:	e7ba      	b.n	800b28c <_dtoa_r+0x9d4>
 800b316:	2201      	movs	r2, #1
 800b318:	e7e2      	b.n	800b2e0 <_dtoa_r+0xa28>
 800b31a:	9b03      	ldr	r3, [sp, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	db04      	blt.n	800b32a <_dtoa_r+0xa72>
 800b320:	9906      	ldr	r1, [sp, #24]
 800b322:	430b      	orrs	r3, r1
 800b324:	9904      	ldr	r1, [sp, #16]
 800b326:	430b      	orrs	r3, r1
 800b328:	d122      	bne.n	800b370 <_dtoa_r+0xab8>
 800b32a:	2a00      	cmp	r2, #0
 800b32c:	ddee      	ble.n	800b30c <_dtoa_r+0xa54>
 800b32e:	ee18 1a10 	vmov	r1, s16
 800b332:	2201      	movs	r2, #1
 800b334:	4620      	mov	r0, r4
 800b336:	f000 fcf5 	bl	800bd24 <__lshift>
 800b33a:	4631      	mov	r1, r6
 800b33c:	ee08 0a10 	vmov	s16, r0
 800b340:	f000 fd60 	bl	800be04 <__mcmp>
 800b344:	2800      	cmp	r0, #0
 800b346:	dc03      	bgt.n	800b350 <_dtoa_r+0xa98>
 800b348:	d1e0      	bne.n	800b30c <_dtoa_r+0xa54>
 800b34a:	f01a 0f01 	tst.w	sl, #1
 800b34e:	d0dd      	beq.n	800b30c <_dtoa_r+0xa54>
 800b350:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b354:	d1d7      	bne.n	800b306 <_dtoa_r+0xa4e>
 800b356:	2339      	movs	r3, #57	; 0x39
 800b358:	f88b 3000 	strb.w	r3, [fp]
 800b35c:	462b      	mov	r3, r5
 800b35e:	461d      	mov	r5, r3
 800b360:	3b01      	subs	r3, #1
 800b362:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b366:	2a39      	cmp	r2, #57	; 0x39
 800b368:	d070      	beq.n	800b44c <_dtoa_r+0xb94>
 800b36a:	3201      	adds	r2, #1
 800b36c:	701a      	strb	r2, [r3, #0]
 800b36e:	e746      	b.n	800b1fe <_dtoa_r+0x946>
 800b370:	2a00      	cmp	r2, #0
 800b372:	dd07      	ble.n	800b384 <_dtoa_r+0xacc>
 800b374:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b378:	d0ed      	beq.n	800b356 <_dtoa_r+0xa9e>
 800b37a:	f10a 0301 	add.w	r3, sl, #1
 800b37e:	f88b 3000 	strb.w	r3, [fp]
 800b382:	e73c      	b.n	800b1fe <_dtoa_r+0x946>
 800b384:	9b05      	ldr	r3, [sp, #20]
 800b386:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b38a:	4599      	cmp	r9, r3
 800b38c:	d046      	beq.n	800b41c <_dtoa_r+0xb64>
 800b38e:	ee18 1a10 	vmov	r1, s16
 800b392:	2300      	movs	r3, #0
 800b394:	220a      	movs	r2, #10
 800b396:	4620      	mov	r0, r4
 800b398:	f000 fb14 	bl	800b9c4 <__multadd>
 800b39c:	45b8      	cmp	r8, r7
 800b39e:	ee08 0a10 	vmov	s16, r0
 800b3a2:	f04f 0300 	mov.w	r3, #0
 800b3a6:	f04f 020a 	mov.w	r2, #10
 800b3aa:	4641      	mov	r1, r8
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	d106      	bne.n	800b3be <_dtoa_r+0xb06>
 800b3b0:	f000 fb08 	bl	800b9c4 <__multadd>
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	4607      	mov	r7, r0
 800b3b8:	f109 0901 	add.w	r9, r9, #1
 800b3bc:	e772      	b.n	800b2a4 <_dtoa_r+0x9ec>
 800b3be:	f000 fb01 	bl	800b9c4 <__multadd>
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	4680      	mov	r8, r0
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	220a      	movs	r2, #10
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f000 fafa 	bl	800b9c4 <__multadd>
 800b3d0:	4607      	mov	r7, r0
 800b3d2:	e7f1      	b.n	800b3b8 <_dtoa_r+0xb00>
 800b3d4:	9b03      	ldr	r3, [sp, #12]
 800b3d6:	9302      	str	r3, [sp, #8]
 800b3d8:	9d01      	ldr	r5, [sp, #4]
 800b3da:	4631      	mov	r1, r6
 800b3dc:	ee18 0a10 	vmov	r0, s16
 800b3e0:	f7ff f9d8 	bl	800a794 <quorem>
 800b3e4:	9b01      	ldr	r3, [sp, #4]
 800b3e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3ea:	f805 ab01 	strb.w	sl, [r5], #1
 800b3ee:	1aea      	subs	r2, r5, r3
 800b3f0:	9b02      	ldr	r3, [sp, #8]
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	dd09      	ble.n	800b40a <_dtoa_r+0xb52>
 800b3f6:	ee18 1a10 	vmov	r1, s16
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	220a      	movs	r2, #10
 800b3fe:	4620      	mov	r0, r4
 800b400:	f000 fae0 	bl	800b9c4 <__multadd>
 800b404:	ee08 0a10 	vmov	s16, r0
 800b408:	e7e7      	b.n	800b3da <_dtoa_r+0xb22>
 800b40a:	9b02      	ldr	r3, [sp, #8]
 800b40c:	f04f 0800 	mov.w	r8, #0
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfcc      	ite	gt
 800b414:	461d      	movgt	r5, r3
 800b416:	2501      	movle	r5, #1
 800b418:	9b01      	ldr	r3, [sp, #4]
 800b41a:	441d      	add	r5, r3
 800b41c:	ee18 1a10 	vmov	r1, s16
 800b420:	2201      	movs	r2, #1
 800b422:	4620      	mov	r0, r4
 800b424:	f000 fc7e 	bl	800bd24 <__lshift>
 800b428:	4631      	mov	r1, r6
 800b42a:	ee08 0a10 	vmov	s16, r0
 800b42e:	f000 fce9 	bl	800be04 <__mcmp>
 800b432:	2800      	cmp	r0, #0
 800b434:	dc92      	bgt.n	800b35c <_dtoa_r+0xaa4>
 800b436:	d102      	bne.n	800b43e <_dtoa_r+0xb86>
 800b438:	f01a 0f01 	tst.w	sl, #1
 800b43c:	d18e      	bne.n	800b35c <_dtoa_r+0xaa4>
 800b43e:	462b      	mov	r3, r5
 800b440:	461d      	mov	r5, r3
 800b442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b446:	2a30      	cmp	r2, #48	; 0x30
 800b448:	d0fa      	beq.n	800b440 <_dtoa_r+0xb88>
 800b44a:	e6d8      	b.n	800b1fe <_dtoa_r+0x946>
 800b44c:	9a01      	ldr	r2, [sp, #4]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d185      	bne.n	800b35e <_dtoa_r+0xaa6>
 800b452:	9b00      	ldr	r3, [sp, #0]
 800b454:	3301      	adds	r3, #1
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	2331      	movs	r3, #49	; 0x31
 800b45a:	7013      	strb	r3, [r2, #0]
 800b45c:	e6cf      	b.n	800b1fe <_dtoa_r+0x946>
 800b45e:	4b0a      	ldr	r3, [pc, #40]	; (800b488 <_dtoa_r+0xbd0>)
 800b460:	f7ff ba98 	b.w	800a994 <_dtoa_r+0xdc>
 800b464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b466:	2b00      	cmp	r3, #0
 800b468:	f47f aa71 	bne.w	800a94e <_dtoa_r+0x96>
 800b46c:	4b07      	ldr	r3, [pc, #28]	; (800b48c <_dtoa_r+0xbd4>)
 800b46e:	f7ff ba91 	b.w	800a994 <_dtoa_r+0xdc>
 800b472:	9b02      	ldr	r3, [sp, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	dcaf      	bgt.n	800b3d8 <_dtoa_r+0xb20>
 800b478:	9b06      	ldr	r3, [sp, #24]
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	f73f aea9 	bgt.w	800b1d2 <_dtoa_r+0x91a>
 800b480:	e7aa      	b.n	800b3d8 <_dtoa_r+0xb20>
 800b482:	bf00      	nop
 800b484:	0800cb13 	.word	0x0800cb13
 800b488:	0800ca70 	.word	0x0800ca70
 800b48c:	0800ca94 	.word	0x0800ca94

0800b490 <__sflush_r>:
 800b490:	898a      	ldrh	r2, [r1, #12]
 800b492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b496:	4605      	mov	r5, r0
 800b498:	0710      	lsls	r0, r2, #28
 800b49a:	460c      	mov	r4, r1
 800b49c:	d458      	bmi.n	800b550 <__sflush_r+0xc0>
 800b49e:	684b      	ldr	r3, [r1, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	dc05      	bgt.n	800b4b0 <__sflush_r+0x20>
 800b4a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dc02      	bgt.n	800b4b0 <__sflush_r+0x20>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4b2:	2e00      	cmp	r6, #0
 800b4b4:	d0f9      	beq.n	800b4aa <__sflush_r+0x1a>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4bc:	682f      	ldr	r7, [r5, #0]
 800b4be:	602b      	str	r3, [r5, #0]
 800b4c0:	d032      	beq.n	800b528 <__sflush_r+0x98>
 800b4c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	075a      	lsls	r2, r3, #29
 800b4c8:	d505      	bpl.n	800b4d6 <__sflush_r+0x46>
 800b4ca:	6863      	ldr	r3, [r4, #4]
 800b4cc:	1ac0      	subs	r0, r0, r3
 800b4ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4d0:	b10b      	cbz	r3, 800b4d6 <__sflush_r+0x46>
 800b4d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4d4:	1ac0      	subs	r0, r0, r3
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	4602      	mov	r2, r0
 800b4da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4dc:	4628      	mov	r0, r5
 800b4de:	6a21      	ldr	r1, [r4, #32]
 800b4e0:	47b0      	blx	r6
 800b4e2:	1c43      	adds	r3, r0, #1
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	d106      	bne.n	800b4f6 <__sflush_r+0x66>
 800b4e8:	6829      	ldr	r1, [r5, #0]
 800b4ea:	291d      	cmp	r1, #29
 800b4ec:	d82c      	bhi.n	800b548 <__sflush_r+0xb8>
 800b4ee:	4a29      	ldr	r2, [pc, #164]	; (800b594 <__sflush_r+0x104>)
 800b4f0:	40ca      	lsrs	r2, r1
 800b4f2:	07d6      	lsls	r6, r2, #31
 800b4f4:	d528      	bpl.n	800b548 <__sflush_r+0xb8>
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	04d9      	lsls	r1, r3, #19
 800b4fa:	6062      	str	r2, [r4, #4]
 800b4fc:	6922      	ldr	r2, [r4, #16]
 800b4fe:	6022      	str	r2, [r4, #0]
 800b500:	d504      	bpl.n	800b50c <__sflush_r+0x7c>
 800b502:	1c42      	adds	r2, r0, #1
 800b504:	d101      	bne.n	800b50a <__sflush_r+0x7a>
 800b506:	682b      	ldr	r3, [r5, #0]
 800b508:	b903      	cbnz	r3, 800b50c <__sflush_r+0x7c>
 800b50a:	6560      	str	r0, [r4, #84]	; 0x54
 800b50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b50e:	602f      	str	r7, [r5, #0]
 800b510:	2900      	cmp	r1, #0
 800b512:	d0ca      	beq.n	800b4aa <__sflush_r+0x1a>
 800b514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b518:	4299      	cmp	r1, r3
 800b51a:	d002      	beq.n	800b522 <__sflush_r+0x92>
 800b51c:	4628      	mov	r0, r5
 800b51e:	f000 fd8f 	bl	800c040 <_free_r>
 800b522:	2000      	movs	r0, #0
 800b524:	6360      	str	r0, [r4, #52]	; 0x34
 800b526:	e7c1      	b.n	800b4ac <__sflush_r+0x1c>
 800b528:	6a21      	ldr	r1, [r4, #32]
 800b52a:	2301      	movs	r3, #1
 800b52c:	4628      	mov	r0, r5
 800b52e:	47b0      	blx	r6
 800b530:	1c41      	adds	r1, r0, #1
 800b532:	d1c7      	bne.n	800b4c4 <__sflush_r+0x34>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0c4      	beq.n	800b4c4 <__sflush_r+0x34>
 800b53a:	2b1d      	cmp	r3, #29
 800b53c:	d001      	beq.n	800b542 <__sflush_r+0xb2>
 800b53e:	2b16      	cmp	r3, #22
 800b540:	d101      	bne.n	800b546 <__sflush_r+0xb6>
 800b542:	602f      	str	r7, [r5, #0]
 800b544:	e7b1      	b.n	800b4aa <__sflush_r+0x1a>
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b54c:	81a3      	strh	r3, [r4, #12]
 800b54e:	e7ad      	b.n	800b4ac <__sflush_r+0x1c>
 800b550:	690f      	ldr	r7, [r1, #16]
 800b552:	2f00      	cmp	r7, #0
 800b554:	d0a9      	beq.n	800b4aa <__sflush_r+0x1a>
 800b556:	0793      	lsls	r3, r2, #30
 800b558:	680e      	ldr	r6, [r1, #0]
 800b55a:	600f      	str	r7, [r1, #0]
 800b55c:	bf0c      	ite	eq
 800b55e:	694b      	ldreq	r3, [r1, #20]
 800b560:	2300      	movne	r3, #0
 800b562:	eba6 0807 	sub.w	r8, r6, r7
 800b566:	608b      	str	r3, [r1, #8]
 800b568:	f1b8 0f00 	cmp.w	r8, #0
 800b56c:	dd9d      	ble.n	800b4aa <__sflush_r+0x1a>
 800b56e:	4643      	mov	r3, r8
 800b570:	463a      	mov	r2, r7
 800b572:	6a21      	ldr	r1, [r4, #32]
 800b574:	4628      	mov	r0, r5
 800b576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b578:	47b0      	blx	r6
 800b57a:	2800      	cmp	r0, #0
 800b57c:	dc06      	bgt.n	800b58c <__sflush_r+0xfc>
 800b57e:	89a3      	ldrh	r3, [r4, #12]
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b588:	81a3      	strh	r3, [r4, #12]
 800b58a:	e78f      	b.n	800b4ac <__sflush_r+0x1c>
 800b58c:	4407      	add	r7, r0
 800b58e:	eba8 0800 	sub.w	r8, r8, r0
 800b592:	e7e9      	b.n	800b568 <__sflush_r+0xd8>
 800b594:	20400001 	.word	0x20400001

0800b598 <_fflush_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	690b      	ldr	r3, [r1, #16]
 800b59c:	4605      	mov	r5, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	b913      	cbnz	r3, 800b5a8 <_fflush_r+0x10>
 800b5a2:	2500      	movs	r5, #0
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	b118      	cbz	r0, 800b5b2 <_fflush_r+0x1a>
 800b5aa:	6983      	ldr	r3, [r0, #24]
 800b5ac:	b90b      	cbnz	r3, 800b5b2 <_fflush_r+0x1a>
 800b5ae:	f000 f887 	bl	800b6c0 <__sinit>
 800b5b2:	4b14      	ldr	r3, [pc, #80]	; (800b604 <_fflush_r+0x6c>)
 800b5b4:	429c      	cmp	r4, r3
 800b5b6:	d11b      	bne.n	800b5f0 <_fflush_r+0x58>
 800b5b8:	686c      	ldr	r4, [r5, #4]
 800b5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d0ef      	beq.n	800b5a2 <_fflush_r+0xa>
 800b5c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5c4:	07d0      	lsls	r0, r2, #31
 800b5c6:	d404      	bmi.n	800b5d2 <_fflush_r+0x3a>
 800b5c8:	0599      	lsls	r1, r3, #22
 800b5ca:	d402      	bmi.n	800b5d2 <_fflush_r+0x3a>
 800b5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ce:	f000 f91a 	bl	800b806 <__retarget_lock_acquire_recursive>
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	f7ff ff5b 	bl	800b490 <__sflush_r>
 800b5da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5dc:	4605      	mov	r5, r0
 800b5de:	07da      	lsls	r2, r3, #31
 800b5e0:	d4e0      	bmi.n	800b5a4 <_fflush_r+0xc>
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	059b      	lsls	r3, r3, #22
 800b5e6:	d4dd      	bmi.n	800b5a4 <_fflush_r+0xc>
 800b5e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ea:	f000 f90d 	bl	800b808 <__retarget_lock_release_recursive>
 800b5ee:	e7d9      	b.n	800b5a4 <_fflush_r+0xc>
 800b5f0:	4b05      	ldr	r3, [pc, #20]	; (800b608 <_fflush_r+0x70>)
 800b5f2:	429c      	cmp	r4, r3
 800b5f4:	d101      	bne.n	800b5fa <_fflush_r+0x62>
 800b5f6:	68ac      	ldr	r4, [r5, #8]
 800b5f8:	e7df      	b.n	800b5ba <_fflush_r+0x22>
 800b5fa:	4b04      	ldr	r3, [pc, #16]	; (800b60c <_fflush_r+0x74>)
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	bf08      	it	eq
 800b600:	68ec      	ldreq	r4, [r5, #12]
 800b602:	e7da      	b.n	800b5ba <_fflush_r+0x22>
 800b604:	0800cb44 	.word	0x0800cb44
 800b608:	0800cb64 	.word	0x0800cb64
 800b60c:	0800cb24 	.word	0x0800cb24

0800b610 <std>:
 800b610:	2300      	movs	r3, #0
 800b612:	b510      	push	{r4, lr}
 800b614:	4604      	mov	r4, r0
 800b616:	6083      	str	r3, [r0, #8]
 800b618:	8181      	strh	r1, [r0, #12]
 800b61a:	4619      	mov	r1, r3
 800b61c:	6643      	str	r3, [r0, #100]	; 0x64
 800b61e:	81c2      	strh	r2, [r0, #14]
 800b620:	2208      	movs	r2, #8
 800b622:	6183      	str	r3, [r0, #24]
 800b624:	e9c0 3300 	strd	r3, r3, [r0]
 800b628:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b62c:	305c      	adds	r0, #92	; 0x5c
 800b62e:	f7fe fad8 	bl	8009be2 <memset>
 800b632:	4b05      	ldr	r3, [pc, #20]	; (800b648 <std+0x38>)
 800b634:	6224      	str	r4, [r4, #32]
 800b636:	6263      	str	r3, [r4, #36]	; 0x24
 800b638:	4b04      	ldr	r3, [pc, #16]	; (800b64c <std+0x3c>)
 800b63a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b63c:	4b04      	ldr	r3, [pc, #16]	; (800b650 <std+0x40>)
 800b63e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b640:	4b04      	ldr	r3, [pc, #16]	; (800b654 <std+0x44>)
 800b642:	6323      	str	r3, [r4, #48]	; 0x30
 800b644:	bd10      	pop	{r4, pc}
 800b646:	bf00      	nop
 800b648:	0800c565 	.word	0x0800c565
 800b64c:	0800c587 	.word	0x0800c587
 800b650:	0800c5bf 	.word	0x0800c5bf
 800b654:	0800c5e3 	.word	0x0800c5e3

0800b658 <_cleanup_r>:
 800b658:	4901      	ldr	r1, [pc, #4]	; (800b660 <_cleanup_r+0x8>)
 800b65a:	f000 b8af 	b.w	800b7bc <_fwalk_reent>
 800b65e:	bf00      	nop
 800b660:	0800b599 	.word	0x0800b599

0800b664 <__sfmoreglue>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	2268      	movs	r2, #104	; 0x68
 800b668:	1e4d      	subs	r5, r1, #1
 800b66a:	460e      	mov	r6, r1
 800b66c:	4355      	muls	r5, r2
 800b66e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b672:	f000 fd51 	bl	800c118 <_malloc_r>
 800b676:	4604      	mov	r4, r0
 800b678:	b140      	cbz	r0, 800b68c <__sfmoreglue+0x28>
 800b67a:	2100      	movs	r1, #0
 800b67c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b680:	e9c0 1600 	strd	r1, r6, [r0]
 800b684:	300c      	adds	r0, #12
 800b686:	60a0      	str	r0, [r4, #8]
 800b688:	f7fe faab 	bl	8009be2 <memset>
 800b68c:	4620      	mov	r0, r4
 800b68e:	bd70      	pop	{r4, r5, r6, pc}

0800b690 <__sfp_lock_acquire>:
 800b690:	4801      	ldr	r0, [pc, #4]	; (800b698 <__sfp_lock_acquire+0x8>)
 800b692:	f000 b8b8 	b.w	800b806 <__retarget_lock_acquire_recursive>
 800b696:	bf00      	nop
 800b698:	2001fab5 	.word	0x2001fab5

0800b69c <__sfp_lock_release>:
 800b69c:	4801      	ldr	r0, [pc, #4]	; (800b6a4 <__sfp_lock_release+0x8>)
 800b69e:	f000 b8b3 	b.w	800b808 <__retarget_lock_release_recursive>
 800b6a2:	bf00      	nop
 800b6a4:	2001fab5 	.word	0x2001fab5

0800b6a8 <__sinit_lock_acquire>:
 800b6a8:	4801      	ldr	r0, [pc, #4]	; (800b6b0 <__sinit_lock_acquire+0x8>)
 800b6aa:	f000 b8ac 	b.w	800b806 <__retarget_lock_acquire_recursive>
 800b6ae:	bf00      	nop
 800b6b0:	2001fab6 	.word	0x2001fab6

0800b6b4 <__sinit_lock_release>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	; (800b6bc <__sinit_lock_release+0x8>)
 800b6b6:	f000 b8a7 	b.w	800b808 <__retarget_lock_release_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	2001fab6 	.word	0x2001fab6

0800b6c0 <__sinit>:
 800b6c0:	b510      	push	{r4, lr}
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	f7ff fff0 	bl	800b6a8 <__sinit_lock_acquire>
 800b6c8:	69a3      	ldr	r3, [r4, #24]
 800b6ca:	b11b      	cbz	r3, 800b6d4 <__sinit+0x14>
 800b6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d0:	f7ff bff0 	b.w	800b6b4 <__sinit_lock_release>
 800b6d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6d8:	6523      	str	r3, [r4, #80]	; 0x50
 800b6da:	4620      	mov	r0, r4
 800b6dc:	4b12      	ldr	r3, [pc, #72]	; (800b728 <__sinit+0x68>)
 800b6de:	4a13      	ldr	r2, [pc, #76]	; (800b72c <__sinit+0x6c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	bf04      	itt	eq
 800b6e8:	2301      	moveq	r3, #1
 800b6ea:	61a3      	streq	r3, [r4, #24]
 800b6ec:	f000 f820 	bl	800b730 <__sfp>
 800b6f0:	6060      	str	r0, [r4, #4]
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f000 f81c 	bl	800b730 <__sfp>
 800b6f8:	60a0      	str	r0, [r4, #8]
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 f818 	bl	800b730 <__sfp>
 800b700:	2200      	movs	r2, #0
 800b702:	2104      	movs	r1, #4
 800b704:	60e0      	str	r0, [r4, #12]
 800b706:	6860      	ldr	r0, [r4, #4]
 800b708:	f7ff ff82 	bl	800b610 <std>
 800b70c:	2201      	movs	r2, #1
 800b70e:	2109      	movs	r1, #9
 800b710:	68a0      	ldr	r0, [r4, #8]
 800b712:	f7ff ff7d 	bl	800b610 <std>
 800b716:	2202      	movs	r2, #2
 800b718:	2112      	movs	r1, #18
 800b71a:	68e0      	ldr	r0, [r4, #12]
 800b71c:	f7ff ff78 	bl	800b610 <std>
 800b720:	2301      	movs	r3, #1
 800b722:	61a3      	str	r3, [r4, #24]
 800b724:	e7d2      	b.n	800b6cc <__sinit+0xc>
 800b726:	bf00      	nop
 800b728:	0800ca5c 	.word	0x0800ca5c
 800b72c:	0800b659 	.word	0x0800b659

0800b730 <__sfp>:
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	4607      	mov	r7, r0
 800b734:	f7ff ffac 	bl	800b690 <__sfp_lock_acquire>
 800b738:	4b1e      	ldr	r3, [pc, #120]	; (800b7b4 <__sfp+0x84>)
 800b73a:	681e      	ldr	r6, [r3, #0]
 800b73c:	69b3      	ldr	r3, [r6, #24]
 800b73e:	b913      	cbnz	r3, 800b746 <__sfp+0x16>
 800b740:	4630      	mov	r0, r6
 800b742:	f7ff ffbd 	bl	800b6c0 <__sinit>
 800b746:	3648      	adds	r6, #72	; 0x48
 800b748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	d503      	bpl.n	800b758 <__sfp+0x28>
 800b750:	6833      	ldr	r3, [r6, #0]
 800b752:	b30b      	cbz	r3, 800b798 <__sfp+0x68>
 800b754:	6836      	ldr	r6, [r6, #0]
 800b756:	e7f7      	b.n	800b748 <__sfp+0x18>
 800b758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b75c:	b9d5      	cbnz	r5, 800b794 <__sfp+0x64>
 800b75e:	4b16      	ldr	r3, [pc, #88]	; (800b7b8 <__sfp+0x88>)
 800b760:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b764:	6665      	str	r5, [r4, #100]	; 0x64
 800b766:	60e3      	str	r3, [r4, #12]
 800b768:	f000 f84c 	bl	800b804 <__retarget_lock_init_recursive>
 800b76c:	f7ff ff96 	bl	800b69c <__sfp_lock_release>
 800b770:	2208      	movs	r2, #8
 800b772:	4629      	mov	r1, r5
 800b774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b778:	6025      	str	r5, [r4, #0]
 800b77a:	61a5      	str	r5, [r4, #24]
 800b77c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b784:	f7fe fa2d 	bl	8009be2 <memset>
 800b788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b78c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b790:	4620      	mov	r0, r4
 800b792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b794:	3468      	adds	r4, #104	; 0x68
 800b796:	e7d9      	b.n	800b74c <__sfp+0x1c>
 800b798:	2104      	movs	r1, #4
 800b79a:	4638      	mov	r0, r7
 800b79c:	f7ff ff62 	bl	800b664 <__sfmoreglue>
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	6030      	str	r0, [r6, #0]
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d1d5      	bne.n	800b754 <__sfp+0x24>
 800b7a8:	f7ff ff78 	bl	800b69c <__sfp_lock_release>
 800b7ac:	230c      	movs	r3, #12
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	e7ee      	b.n	800b790 <__sfp+0x60>
 800b7b2:	bf00      	nop
 800b7b4:	0800ca5c 	.word	0x0800ca5c
 800b7b8:	ffff0001 	.word	0xffff0001

0800b7bc <_fwalk_reent>:
 800b7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c0:	4606      	mov	r6, r0
 800b7c2:	4688      	mov	r8, r1
 800b7c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7c8:	2700      	movs	r7, #0
 800b7ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7ce:	f1b9 0901 	subs.w	r9, r9, #1
 800b7d2:	d505      	bpl.n	800b7e0 <_fwalk_reent+0x24>
 800b7d4:	6824      	ldr	r4, [r4, #0]
 800b7d6:	2c00      	cmp	r4, #0
 800b7d8:	d1f7      	bne.n	800b7ca <_fwalk_reent+0xe>
 800b7da:	4638      	mov	r0, r7
 800b7dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7e0:	89ab      	ldrh	r3, [r5, #12]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d907      	bls.n	800b7f6 <_fwalk_reent+0x3a>
 800b7e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	d003      	beq.n	800b7f6 <_fwalk_reent+0x3a>
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	47c0      	blx	r8
 800b7f4:	4307      	orrs	r7, r0
 800b7f6:	3568      	adds	r5, #104	; 0x68
 800b7f8:	e7e9      	b.n	800b7ce <_fwalk_reent+0x12>
	...

0800b7fc <_localeconv_r>:
 800b7fc:	4800      	ldr	r0, [pc, #0]	; (800b800 <_localeconv_r+0x4>)
 800b7fe:	4770      	bx	lr
 800b800:	20000400 	.word	0x20000400

0800b804 <__retarget_lock_init_recursive>:
 800b804:	4770      	bx	lr

0800b806 <__retarget_lock_acquire_recursive>:
 800b806:	4770      	bx	lr

0800b808 <__retarget_lock_release_recursive>:
 800b808:	4770      	bx	lr

0800b80a <__swhatbuf_r>:
 800b80a:	b570      	push	{r4, r5, r6, lr}
 800b80c:	460e      	mov	r6, r1
 800b80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b812:	b096      	sub	sp, #88	; 0x58
 800b814:	4614      	mov	r4, r2
 800b816:	2900      	cmp	r1, #0
 800b818:	461d      	mov	r5, r3
 800b81a:	da08      	bge.n	800b82e <__swhatbuf_r+0x24>
 800b81c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b820:	2200      	movs	r2, #0
 800b822:	602a      	str	r2, [r5, #0]
 800b824:	061a      	lsls	r2, r3, #24
 800b826:	d410      	bmi.n	800b84a <__swhatbuf_r+0x40>
 800b828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b82c:	e00e      	b.n	800b84c <__swhatbuf_r+0x42>
 800b82e:	466a      	mov	r2, sp
 800b830:	f000 ff2e 	bl	800c690 <_fstat_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	dbf1      	blt.n	800b81c <__swhatbuf_r+0x12>
 800b838:	9a01      	ldr	r2, [sp, #4]
 800b83a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b83e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b842:	425a      	negs	r2, r3
 800b844:	415a      	adcs	r2, r3
 800b846:	602a      	str	r2, [r5, #0]
 800b848:	e7ee      	b.n	800b828 <__swhatbuf_r+0x1e>
 800b84a:	2340      	movs	r3, #64	; 0x40
 800b84c:	2000      	movs	r0, #0
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	b016      	add	sp, #88	; 0x58
 800b852:	bd70      	pop	{r4, r5, r6, pc}

0800b854 <__smakebuf_r>:
 800b854:	898b      	ldrh	r3, [r1, #12]
 800b856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b858:	079d      	lsls	r5, r3, #30
 800b85a:	4606      	mov	r6, r0
 800b85c:	460c      	mov	r4, r1
 800b85e:	d507      	bpl.n	800b870 <__smakebuf_r+0x1c>
 800b860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	6123      	str	r3, [r4, #16]
 800b868:	2301      	movs	r3, #1
 800b86a:	6163      	str	r3, [r4, #20]
 800b86c:	b002      	add	sp, #8
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	ab01      	add	r3, sp, #4
 800b872:	466a      	mov	r2, sp
 800b874:	f7ff ffc9 	bl	800b80a <__swhatbuf_r>
 800b878:	9900      	ldr	r1, [sp, #0]
 800b87a:	4605      	mov	r5, r0
 800b87c:	4630      	mov	r0, r6
 800b87e:	f000 fc4b 	bl	800c118 <_malloc_r>
 800b882:	b948      	cbnz	r0, 800b898 <__smakebuf_r+0x44>
 800b884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b888:	059a      	lsls	r2, r3, #22
 800b88a:	d4ef      	bmi.n	800b86c <__smakebuf_r+0x18>
 800b88c:	f023 0303 	bic.w	r3, r3, #3
 800b890:	f043 0302 	orr.w	r3, r3, #2
 800b894:	81a3      	strh	r3, [r4, #12]
 800b896:	e7e3      	b.n	800b860 <__smakebuf_r+0xc>
 800b898:	4b0d      	ldr	r3, [pc, #52]	; (800b8d0 <__smakebuf_r+0x7c>)
 800b89a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	6020      	str	r0, [r4, #0]
 800b8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a4:	6120      	str	r0, [r4, #16]
 800b8a6:	81a3      	strh	r3, [r4, #12]
 800b8a8:	9b00      	ldr	r3, [sp, #0]
 800b8aa:	6163      	str	r3, [r4, #20]
 800b8ac:	9b01      	ldr	r3, [sp, #4]
 800b8ae:	b15b      	cbz	r3, 800b8c8 <__smakebuf_r+0x74>
 800b8b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f000 fefd 	bl	800c6b4 <_isatty_r>
 800b8ba:	b128      	cbz	r0, 800b8c8 <__smakebuf_r+0x74>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f023 0303 	bic.w	r3, r3, #3
 800b8c2:	f043 0301 	orr.w	r3, r3, #1
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	89a0      	ldrh	r0, [r4, #12]
 800b8ca:	4305      	orrs	r5, r0
 800b8cc:	81a5      	strh	r5, [r4, #12]
 800b8ce:	e7cd      	b.n	800b86c <__smakebuf_r+0x18>
 800b8d0:	0800b659 	.word	0x0800b659

0800b8d4 <malloc>:
 800b8d4:	4b02      	ldr	r3, [pc, #8]	; (800b8e0 <malloc+0xc>)
 800b8d6:	4601      	mov	r1, r0
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	f000 bc1d 	b.w	800c118 <_malloc_r>
 800b8de:	bf00      	nop
 800b8e0:	200002ac 	.word	0x200002ac

0800b8e4 <memchr>:
 800b8e4:	b2c9      	uxtb	r1, r1
 800b8e6:	4402      	add	r2, r0
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	4290      	cmp	r0, r2
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	d101      	bne.n	800b8f4 <memchr+0x10>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	e003      	b.n	800b8fc <memchr+0x18>
 800b8f4:	781c      	ldrb	r4, [r3, #0]
 800b8f6:	3001      	adds	r0, #1
 800b8f8:	428c      	cmp	r4, r1
 800b8fa:	d1f6      	bne.n	800b8ea <memchr+0x6>
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	bd10      	pop	{r4, pc}

0800b900 <_Balloc>:
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	b976      	cbnz	r6, 800b928 <_Balloc+0x28>
 800b90a:	2010      	movs	r0, #16
 800b90c:	f7ff ffe2 	bl	800b8d4 <malloc>
 800b910:	4602      	mov	r2, r0
 800b912:	6260      	str	r0, [r4, #36]	; 0x24
 800b914:	b920      	cbnz	r0, 800b920 <_Balloc+0x20>
 800b916:	4b18      	ldr	r3, [pc, #96]	; (800b978 <_Balloc+0x78>)
 800b918:	2166      	movs	r1, #102	; 0x66
 800b91a:	4818      	ldr	r0, [pc, #96]	; (800b97c <_Balloc+0x7c>)
 800b91c:	f000 fe78 	bl	800c610 <__assert_func>
 800b920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b924:	6006      	str	r6, [r0, #0]
 800b926:	60c6      	str	r6, [r0, #12]
 800b928:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b92a:	68f3      	ldr	r3, [r6, #12]
 800b92c:	b183      	cbz	r3, 800b950 <_Balloc+0x50>
 800b92e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b936:	b9b8      	cbnz	r0, 800b968 <_Balloc+0x68>
 800b938:	2101      	movs	r1, #1
 800b93a:	4620      	mov	r0, r4
 800b93c:	fa01 f605 	lsl.w	r6, r1, r5
 800b940:	1d72      	adds	r2, r6, #5
 800b942:	0092      	lsls	r2, r2, #2
 800b944:	f000 fb66 	bl	800c014 <_calloc_r>
 800b948:	b160      	cbz	r0, 800b964 <_Balloc+0x64>
 800b94a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b94e:	e00e      	b.n	800b96e <_Balloc+0x6e>
 800b950:	2221      	movs	r2, #33	; 0x21
 800b952:	2104      	movs	r1, #4
 800b954:	4620      	mov	r0, r4
 800b956:	f000 fb5d 	bl	800c014 <_calloc_r>
 800b95a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b95c:	60f0      	str	r0, [r6, #12]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1e4      	bne.n	800b92e <_Balloc+0x2e>
 800b964:	2000      	movs	r0, #0
 800b966:	bd70      	pop	{r4, r5, r6, pc}
 800b968:	6802      	ldr	r2, [r0, #0]
 800b96a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b96e:	2300      	movs	r3, #0
 800b970:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b974:	e7f7      	b.n	800b966 <_Balloc+0x66>
 800b976:	bf00      	nop
 800b978:	0800caa1 	.word	0x0800caa1
 800b97c:	0800cb84 	.word	0x0800cb84

0800b980 <_Bfree>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b984:	4605      	mov	r5, r0
 800b986:	460c      	mov	r4, r1
 800b988:	b976      	cbnz	r6, 800b9a8 <_Bfree+0x28>
 800b98a:	2010      	movs	r0, #16
 800b98c:	f7ff ffa2 	bl	800b8d4 <malloc>
 800b990:	4602      	mov	r2, r0
 800b992:	6268      	str	r0, [r5, #36]	; 0x24
 800b994:	b920      	cbnz	r0, 800b9a0 <_Bfree+0x20>
 800b996:	4b09      	ldr	r3, [pc, #36]	; (800b9bc <_Bfree+0x3c>)
 800b998:	218a      	movs	r1, #138	; 0x8a
 800b99a:	4809      	ldr	r0, [pc, #36]	; (800b9c0 <_Bfree+0x40>)
 800b99c:	f000 fe38 	bl	800c610 <__assert_func>
 800b9a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9a4:	6006      	str	r6, [r0, #0]
 800b9a6:	60c6      	str	r6, [r0, #12]
 800b9a8:	b13c      	cbz	r4, 800b9ba <_Bfree+0x3a>
 800b9aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b9ac:	6862      	ldr	r2, [r4, #4]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9b4:	6021      	str	r1, [r4, #0]
 800b9b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	0800caa1 	.word	0x0800caa1
 800b9c0:	0800cb84 	.word	0x0800cb84

0800b9c4 <__multadd>:
 800b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	f101 0c14 	add.w	ip, r1, #20
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	461e      	mov	r6, r3
 800b9d2:	690d      	ldr	r5, [r1, #16]
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b9da:	3001      	adds	r0, #1
 800b9dc:	b299      	uxth	r1, r3
 800b9de:	4285      	cmp	r5, r0
 800b9e0:	fb02 6101 	mla	r1, r2, r1, r6
 800b9e4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9e8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b9ec:	b289      	uxth	r1, r1
 800b9ee:	fb02 3306 	mla	r3, r2, r6, r3
 800b9f2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9fa:	f84c 1b04 	str.w	r1, [ip], #4
 800b9fe:	dcea      	bgt.n	800b9d6 <__multadd+0x12>
 800ba00:	b30e      	cbz	r6, 800ba46 <__multadd+0x82>
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	42ab      	cmp	r3, r5
 800ba06:	dc19      	bgt.n	800ba3c <__multadd+0x78>
 800ba08:	6861      	ldr	r1, [r4, #4]
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	3101      	adds	r1, #1
 800ba0e:	f7ff ff77 	bl	800b900 <_Balloc>
 800ba12:	4680      	mov	r8, r0
 800ba14:	b928      	cbnz	r0, 800ba22 <__multadd+0x5e>
 800ba16:	4602      	mov	r2, r0
 800ba18:	4b0c      	ldr	r3, [pc, #48]	; (800ba4c <__multadd+0x88>)
 800ba1a:	21b5      	movs	r1, #181	; 0xb5
 800ba1c:	480c      	ldr	r0, [pc, #48]	; (800ba50 <__multadd+0x8c>)
 800ba1e:	f000 fdf7 	bl	800c610 <__assert_func>
 800ba22:	6922      	ldr	r2, [r4, #16]
 800ba24:	f104 010c 	add.w	r1, r4, #12
 800ba28:	300c      	adds	r0, #12
 800ba2a:	3202      	adds	r2, #2
 800ba2c:	0092      	lsls	r2, r2, #2
 800ba2e:	f7fe f8cb 	bl	8009bc8 <memcpy>
 800ba32:	4621      	mov	r1, r4
 800ba34:	4644      	mov	r4, r8
 800ba36:	4638      	mov	r0, r7
 800ba38:	f7ff ffa2 	bl	800b980 <_Bfree>
 800ba3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba40:	3501      	adds	r5, #1
 800ba42:	615e      	str	r6, [r3, #20]
 800ba44:	6125      	str	r5, [r4, #16]
 800ba46:	4620      	mov	r0, r4
 800ba48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba4c:	0800cb13 	.word	0x0800cb13
 800ba50:	0800cb84 	.word	0x0800cb84

0800ba54 <__hi0bits>:
 800ba54:	0c03      	lsrs	r3, r0, #16
 800ba56:	041b      	lsls	r3, r3, #16
 800ba58:	b9d3      	cbnz	r3, 800ba90 <__hi0bits+0x3c>
 800ba5a:	0400      	lsls	r0, r0, #16
 800ba5c:	2310      	movs	r3, #16
 800ba5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba62:	bf04      	itt	eq
 800ba64:	0200      	lsleq	r0, r0, #8
 800ba66:	3308      	addeq	r3, #8
 800ba68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba6c:	bf04      	itt	eq
 800ba6e:	0100      	lsleq	r0, r0, #4
 800ba70:	3304      	addeq	r3, #4
 800ba72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba76:	bf04      	itt	eq
 800ba78:	0080      	lsleq	r0, r0, #2
 800ba7a:	3302      	addeq	r3, #2
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	db05      	blt.n	800ba8c <__hi0bits+0x38>
 800ba80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba84:	f103 0301 	add.w	r3, r3, #1
 800ba88:	bf08      	it	eq
 800ba8a:	2320      	moveq	r3, #32
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	4770      	bx	lr
 800ba90:	2300      	movs	r3, #0
 800ba92:	e7e4      	b.n	800ba5e <__hi0bits+0xa>

0800ba94 <__lo0bits>:
 800ba94:	6803      	ldr	r3, [r0, #0]
 800ba96:	4601      	mov	r1, r0
 800ba98:	f013 0207 	ands.w	r2, r3, #7
 800ba9c:	d00b      	beq.n	800bab6 <__lo0bits+0x22>
 800ba9e:	07da      	lsls	r2, r3, #31
 800baa0:	d423      	bmi.n	800baea <__lo0bits+0x56>
 800baa2:	0798      	lsls	r0, r3, #30
 800baa4:	bf47      	ittee	mi
 800baa6:	085b      	lsrmi	r3, r3, #1
 800baa8:	2001      	movmi	r0, #1
 800baaa:	089b      	lsrpl	r3, r3, #2
 800baac:	2002      	movpl	r0, #2
 800baae:	bf4c      	ite	mi
 800bab0:	600b      	strmi	r3, [r1, #0]
 800bab2:	600b      	strpl	r3, [r1, #0]
 800bab4:	4770      	bx	lr
 800bab6:	b298      	uxth	r0, r3
 800bab8:	b9a8      	cbnz	r0, 800bae6 <__lo0bits+0x52>
 800baba:	0c1b      	lsrs	r3, r3, #16
 800babc:	2010      	movs	r0, #16
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	b90a      	cbnz	r2, 800bac6 <__lo0bits+0x32>
 800bac2:	3008      	adds	r0, #8
 800bac4:	0a1b      	lsrs	r3, r3, #8
 800bac6:	071a      	lsls	r2, r3, #28
 800bac8:	bf04      	itt	eq
 800baca:	091b      	lsreq	r3, r3, #4
 800bacc:	3004      	addeq	r0, #4
 800bace:	079a      	lsls	r2, r3, #30
 800bad0:	bf04      	itt	eq
 800bad2:	089b      	lsreq	r3, r3, #2
 800bad4:	3002      	addeq	r0, #2
 800bad6:	07da      	lsls	r2, r3, #31
 800bad8:	d403      	bmi.n	800bae2 <__lo0bits+0x4e>
 800bada:	085b      	lsrs	r3, r3, #1
 800badc:	f100 0001 	add.w	r0, r0, #1
 800bae0:	d005      	beq.n	800baee <__lo0bits+0x5a>
 800bae2:	600b      	str	r3, [r1, #0]
 800bae4:	4770      	bx	lr
 800bae6:	4610      	mov	r0, r2
 800bae8:	e7e9      	b.n	800babe <__lo0bits+0x2a>
 800baea:	2000      	movs	r0, #0
 800baec:	4770      	bx	lr
 800baee:	2020      	movs	r0, #32
 800baf0:	4770      	bx	lr
	...

0800baf4 <__i2b>:
 800baf4:	b510      	push	{r4, lr}
 800baf6:	460c      	mov	r4, r1
 800baf8:	2101      	movs	r1, #1
 800bafa:	f7ff ff01 	bl	800b900 <_Balloc>
 800bafe:	4602      	mov	r2, r0
 800bb00:	b928      	cbnz	r0, 800bb0e <__i2b+0x1a>
 800bb02:	4b05      	ldr	r3, [pc, #20]	; (800bb18 <__i2b+0x24>)
 800bb04:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb08:	4804      	ldr	r0, [pc, #16]	; (800bb1c <__i2b+0x28>)
 800bb0a:	f000 fd81 	bl	800c610 <__assert_func>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	6144      	str	r4, [r0, #20]
 800bb12:	6103      	str	r3, [r0, #16]
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	bf00      	nop
 800bb18:	0800cb13 	.word	0x0800cb13
 800bb1c:	0800cb84 	.word	0x0800cb84

0800bb20 <__multiply>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	4691      	mov	r9, r2
 800bb26:	690a      	ldr	r2, [r1, #16]
 800bb28:	460c      	mov	r4, r1
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	bfbe      	ittt	lt
 800bb34:	460b      	movlt	r3, r1
 800bb36:	464c      	movlt	r4, r9
 800bb38:	4699      	movlt	r9, r3
 800bb3a:	6927      	ldr	r7, [r4, #16]
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bb42:	6861      	ldr	r1, [r4, #4]
 800bb44:	eb07 060a 	add.w	r6, r7, sl
 800bb48:	42b3      	cmp	r3, r6
 800bb4a:	bfb8      	it	lt
 800bb4c:	3101      	addlt	r1, #1
 800bb4e:	f7ff fed7 	bl	800b900 <_Balloc>
 800bb52:	b930      	cbnz	r0, 800bb62 <__multiply+0x42>
 800bb54:	4602      	mov	r2, r0
 800bb56:	4b44      	ldr	r3, [pc, #272]	; (800bc68 <__multiply+0x148>)
 800bb58:	f240 115d 	movw	r1, #349	; 0x15d
 800bb5c:	4843      	ldr	r0, [pc, #268]	; (800bc6c <__multiply+0x14c>)
 800bb5e:	f000 fd57 	bl	800c610 <__assert_func>
 800bb62:	f100 0514 	add.w	r5, r0, #20
 800bb66:	2200      	movs	r2, #0
 800bb68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb6c:	462b      	mov	r3, r5
 800bb6e:	4543      	cmp	r3, r8
 800bb70:	d321      	bcc.n	800bbb6 <__multiply+0x96>
 800bb72:	f104 0314 	add.w	r3, r4, #20
 800bb76:	f104 0115 	add.w	r1, r4, #21
 800bb7a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb7e:	f109 0314 	add.w	r3, r9, #20
 800bb82:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb86:	9202      	str	r2, [sp, #8]
 800bb88:	1b3a      	subs	r2, r7, r4
 800bb8a:	3a15      	subs	r2, #21
 800bb8c:	f022 0203 	bic.w	r2, r2, #3
 800bb90:	3204      	adds	r2, #4
 800bb92:	428f      	cmp	r7, r1
 800bb94:	bf38      	it	cc
 800bb96:	2204      	movcc	r2, #4
 800bb98:	9201      	str	r2, [sp, #4]
 800bb9a:	9a02      	ldr	r2, [sp, #8]
 800bb9c:	9303      	str	r3, [sp, #12]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d80c      	bhi.n	800bbbc <__multiply+0x9c>
 800bba2:	2e00      	cmp	r6, #0
 800bba4:	dd03      	ble.n	800bbae <__multiply+0x8e>
 800bba6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d05a      	beq.n	800bc64 <__multiply+0x144>
 800bbae:	6106      	str	r6, [r0, #16]
 800bbb0:	b005      	add	sp, #20
 800bbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb6:	f843 2b04 	str.w	r2, [r3], #4
 800bbba:	e7d8      	b.n	800bb6e <__multiply+0x4e>
 800bbbc:	f8b3 a000 	ldrh.w	sl, [r3]
 800bbc0:	f1ba 0f00 	cmp.w	sl, #0
 800bbc4:	d024      	beq.n	800bc10 <__multiply+0xf0>
 800bbc6:	f104 0e14 	add.w	lr, r4, #20
 800bbca:	46a9      	mov	r9, r5
 800bbcc:	f04f 0c00 	mov.w	ip, #0
 800bbd0:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bbd4:	f8d9 1000 	ldr.w	r1, [r9]
 800bbd8:	fa1f fb82 	uxth.w	fp, r2
 800bbdc:	4577      	cmp	r7, lr
 800bbde:	b289      	uxth	r1, r1
 800bbe0:	fb0a 110b 	mla	r1, sl, fp, r1
 800bbe4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bbe8:	f8d9 2000 	ldr.w	r2, [r9]
 800bbec:	4461      	add	r1, ip
 800bbee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bbf2:	fb0a c20b 	mla	r2, sl, fp, ip
 800bbf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bbfa:	b289      	uxth	r1, r1
 800bbfc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc04:	f849 1b04 	str.w	r1, [r9], #4
 800bc08:	d8e2      	bhi.n	800bbd0 <__multiply+0xb0>
 800bc0a:	9a01      	ldr	r2, [sp, #4]
 800bc0c:	f845 c002 	str.w	ip, [r5, r2]
 800bc10:	9a03      	ldr	r2, [sp, #12]
 800bc12:	3304      	adds	r3, #4
 800bc14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc18:	f1b9 0f00 	cmp.w	r9, #0
 800bc1c:	d020      	beq.n	800bc60 <__multiply+0x140>
 800bc1e:	6829      	ldr	r1, [r5, #0]
 800bc20:	f104 0c14 	add.w	ip, r4, #20
 800bc24:	46ae      	mov	lr, r5
 800bc26:	f04f 0a00 	mov.w	sl, #0
 800bc2a:	f8bc b000 	ldrh.w	fp, [ip]
 800bc2e:	b289      	uxth	r1, r1
 800bc30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bc34:	fb09 220b 	mla	r2, r9, fp, r2
 800bc38:	4492      	add	sl, r2
 800bc3a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bc3e:	f84e 1b04 	str.w	r1, [lr], #4
 800bc42:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bc46:	f8be 1000 	ldrh.w	r1, [lr]
 800bc4a:	0c12      	lsrs	r2, r2, #16
 800bc4c:	4567      	cmp	r7, ip
 800bc4e:	fb09 1102 	mla	r1, r9, r2, r1
 800bc52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bc56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bc5a:	d8e6      	bhi.n	800bc2a <__multiply+0x10a>
 800bc5c:	9a01      	ldr	r2, [sp, #4]
 800bc5e:	50a9      	str	r1, [r5, r2]
 800bc60:	3504      	adds	r5, #4
 800bc62:	e79a      	b.n	800bb9a <__multiply+0x7a>
 800bc64:	3e01      	subs	r6, #1
 800bc66:	e79c      	b.n	800bba2 <__multiply+0x82>
 800bc68:	0800cb13 	.word	0x0800cb13
 800bc6c:	0800cb84 	.word	0x0800cb84

0800bc70 <__pow5mult>:
 800bc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc74:	4615      	mov	r5, r2
 800bc76:	f012 0203 	ands.w	r2, r2, #3
 800bc7a:	4606      	mov	r6, r0
 800bc7c:	460f      	mov	r7, r1
 800bc7e:	d007      	beq.n	800bc90 <__pow5mult+0x20>
 800bc80:	3a01      	subs	r2, #1
 800bc82:	4c25      	ldr	r4, [pc, #148]	; (800bd18 <__pow5mult+0xa8>)
 800bc84:	2300      	movs	r3, #0
 800bc86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc8a:	f7ff fe9b 	bl	800b9c4 <__multadd>
 800bc8e:	4607      	mov	r7, r0
 800bc90:	10ad      	asrs	r5, r5, #2
 800bc92:	d03d      	beq.n	800bd10 <__pow5mult+0xa0>
 800bc94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc96:	b97c      	cbnz	r4, 800bcb8 <__pow5mult+0x48>
 800bc98:	2010      	movs	r0, #16
 800bc9a:	f7ff fe1b 	bl	800b8d4 <malloc>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	6270      	str	r0, [r6, #36]	; 0x24
 800bca2:	b928      	cbnz	r0, 800bcb0 <__pow5mult+0x40>
 800bca4:	4b1d      	ldr	r3, [pc, #116]	; (800bd1c <__pow5mult+0xac>)
 800bca6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bcaa:	481d      	ldr	r0, [pc, #116]	; (800bd20 <__pow5mult+0xb0>)
 800bcac:	f000 fcb0 	bl	800c610 <__assert_func>
 800bcb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcb4:	6004      	str	r4, [r0, #0]
 800bcb6:	60c4      	str	r4, [r0, #12]
 800bcb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bcbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcc0:	b94c      	cbnz	r4, 800bcd6 <__pow5mult+0x66>
 800bcc2:	f240 2171 	movw	r1, #625	; 0x271
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f7ff ff14 	bl	800baf4 <__i2b>
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcd4:	6003      	str	r3, [r0, #0]
 800bcd6:	f04f 0900 	mov.w	r9, #0
 800bcda:	07eb      	lsls	r3, r5, #31
 800bcdc:	d50a      	bpl.n	800bcf4 <__pow5mult+0x84>
 800bcde:	4639      	mov	r1, r7
 800bce0:	4622      	mov	r2, r4
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ff1c 	bl	800bb20 <__multiply>
 800bce8:	4680      	mov	r8, r0
 800bcea:	4639      	mov	r1, r7
 800bcec:	4630      	mov	r0, r6
 800bcee:	4647      	mov	r7, r8
 800bcf0:	f7ff fe46 	bl	800b980 <_Bfree>
 800bcf4:	106d      	asrs	r5, r5, #1
 800bcf6:	d00b      	beq.n	800bd10 <__pow5mult+0xa0>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	b938      	cbnz	r0, 800bd0c <__pow5mult+0x9c>
 800bcfc:	4622      	mov	r2, r4
 800bcfe:	4621      	mov	r1, r4
 800bd00:	4630      	mov	r0, r6
 800bd02:	f7ff ff0d 	bl	800bb20 <__multiply>
 800bd06:	6020      	str	r0, [r4, #0]
 800bd08:	f8c0 9000 	str.w	r9, [r0]
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	e7e4      	b.n	800bcda <__pow5mult+0x6a>
 800bd10:	4638      	mov	r0, r7
 800bd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd16:	bf00      	nop
 800bd18:	0800ccd0 	.word	0x0800ccd0
 800bd1c:	0800caa1 	.word	0x0800caa1
 800bd20:	0800cb84 	.word	0x0800cb84

0800bd24 <__lshift>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	460c      	mov	r4, r1
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	4691      	mov	r9, r2
 800bd2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd32:	6923      	ldr	r3, [r4, #16]
 800bd34:	6849      	ldr	r1, [r1, #4]
 800bd36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd3a:	68a3      	ldr	r3, [r4, #8]
 800bd3c:	f108 0601 	add.w	r6, r8, #1
 800bd40:	42b3      	cmp	r3, r6
 800bd42:	db0b      	blt.n	800bd5c <__lshift+0x38>
 800bd44:	4638      	mov	r0, r7
 800bd46:	f7ff fddb 	bl	800b900 <_Balloc>
 800bd4a:	4605      	mov	r5, r0
 800bd4c:	b948      	cbnz	r0, 800bd62 <__lshift+0x3e>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	4b2a      	ldr	r3, [pc, #168]	; (800bdfc <__lshift+0xd8>)
 800bd52:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bd56:	482a      	ldr	r0, [pc, #168]	; (800be00 <__lshift+0xdc>)
 800bd58:	f000 fc5a 	bl	800c610 <__assert_func>
 800bd5c:	3101      	adds	r1, #1
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	e7ee      	b.n	800bd40 <__lshift+0x1c>
 800bd62:	2300      	movs	r3, #0
 800bd64:	f100 0114 	add.w	r1, r0, #20
 800bd68:	f100 0210 	add.w	r2, r0, #16
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	4553      	cmp	r3, sl
 800bd70:	db37      	blt.n	800bde2 <__lshift+0xbe>
 800bd72:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd76:	f104 0314 	add.w	r3, r4, #20
 800bd7a:	6920      	ldr	r0, [r4, #16]
 800bd7c:	f019 091f 	ands.w	r9, r9, #31
 800bd80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd88:	d02f      	beq.n	800bdea <__lshift+0xc6>
 800bd8a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd8e:	468a      	mov	sl, r1
 800bd90:	f04f 0c00 	mov.w	ip, #0
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	fa02 f209 	lsl.w	r2, r2, r9
 800bd9a:	ea42 020c 	orr.w	r2, r2, ip
 800bd9e:	f84a 2b04 	str.w	r2, [sl], #4
 800bda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda6:	4298      	cmp	r0, r3
 800bda8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bdac:	d8f2      	bhi.n	800bd94 <__lshift+0x70>
 800bdae:	1b03      	subs	r3, r0, r4
 800bdb0:	f104 0215 	add.w	r2, r4, #21
 800bdb4:	3b15      	subs	r3, #21
 800bdb6:	f023 0303 	bic.w	r3, r3, #3
 800bdba:	3304      	adds	r3, #4
 800bdbc:	4290      	cmp	r0, r2
 800bdbe:	bf38      	it	cc
 800bdc0:	2304      	movcc	r3, #4
 800bdc2:	f841 c003 	str.w	ip, [r1, r3]
 800bdc6:	f1bc 0f00 	cmp.w	ip, #0
 800bdca:	d001      	beq.n	800bdd0 <__lshift+0xac>
 800bdcc:	f108 0602 	add.w	r6, r8, #2
 800bdd0:	3e01      	subs	r6, #1
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	612e      	str	r6, [r5, #16]
 800bdd8:	f7ff fdd2 	bl	800b980 <_Bfree>
 800bddc:	4628      	mov	r0, r5
 800bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde2:	3301      	adds	r3, #1
 800bde4:	f842 0f04 	str.w	r0, [r2, #4]!
 800bde8:	e7c1      	b.n	800bd6e <__lshift+0x4a>
 800bdea:	3904      	subs	r1, #4
 800bdec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf0:	4298      	cmp	r0, r3
 800bdf2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdf6:	d8f9      	bhi.n	800bdec <__lshift+0xc8>
 800bdf8:	e7ea      	b.n	800bdd0 <__lshift+0xac>
 800bdfa:	bf00      	nop
 800bdfc:	0800cb13 	.word	0x0800cb13
 800be00:	0800cb84 	.word	0x0800cb84

0800be04 <__mcmp>:
 800be04:	6902      	ldr	r2, [r0, #16]
 800be06:	b530      	push	{r4, r5, lr}
 800be08:	690c      	ldr	r4, [r1, #16]
 800be0a:	1b12      	subs	r2, r2, r4
 800be0c:	d10e      	bne.n	800be2c <__mcmp+0x28>
 800be0e:	f100 0314 	add.w	r3, r0, #20
 800be12:	3114      	adds	r1, #20
 800be14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be24:	42a5      	cmp	r5, r4
 800be26:	d003      	beq.n	800be30 <__mcmp+0x2c>
 800be28:	d305      	bcc.n	800be36 <__mcmp+0x32>
 800be2a:	2201      	movs	r2, #1
 800be2c:	4610      	mov	r0, r2
 800be2e:	bd30      	pop	{r4, r5, pc}
 800be30:	4283      	cmp	r3, r0
 800be32:	d3f3      	bcc.n	800be1c <__mcmp+0x18>
 800be34:	e7fa      	b.n	800be2c <__mcmp+0x28>
 800be36:	f04f 32ff 	mov.w	r2, #4294967295
 800be3a:	e7f7      	b.n	800be2c <__mcmp+0x28>

0800be3c <__mdiff>:
 800be3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	460c      	mov	r4, r1
 800be42:	4606      	mov	r6, r0
 800be44:	4611      	mov	r1, r2
 800be46:	4692      	mov	sl, r2
 800be48:	4620      	mov	r0, r4
 800be4a:	f7ff ffdb 	bl	800be04 <__mcmp>
 800be4e:	1e05      	subs	r5, r0, #0
 800be50:	d110      	bne.n	800be74 <__mdiff+0x38>
 800be52:	4629      	mov	r1, r5
 800be54:	4630      	mov	r0, r6
 800be56:	f7ff fd53 	bl	800b900 <_Balloc>
 800be5a:	b930      	cbnz	r0, 800be6a <__mdiff+0x2e>
 800be5c:	4b3d      	ldr	r3, [pc, #244]	; (800bf54 <__mdiff+0x118>)
 800be5e:	4602      	mov	r2, r0
 800be60:	f240 2132 	movw	r1, #562	; 0x232
 800be64:	483c      	ldr	r0, [pc, #240]	; (800bf58 <__mdiff+0x11c>)
 800be66:	f000 fbd3 	bl	800c610 <__assert_func>
 800be6a:	2301      	movs	r3, #1
 800be6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be74:	bfa4      	itt	ge
 800be76:	4653      	movge	r3, sl
 800be78:	46a2      	movge	sl, r4
 800be7a:	4630      	mov	r0, r6
 800be7c:	bfa8      	it	ge
 800be7e:	2500      	movge	r5, #0
 800be80:	f8da 1004 	ldr.w	r1, [sl, #4]
 800be84:	bfac      	ite	ge
 800be86:	461c      	movge	r4, r3
 800be88:	2501      	movlt	r5, #1
 800be8a:	f7ff fd39 	bl	800b900 <_Balloc>
 800be8e:	b920      	cbnz	r0, 800be9a <__mdiff+0x5e>
 800be90:	4b30      	ldr	r3, [pc, #192]	; (800bf54 <__mdiff+0x118>)
 800be92:	4602      	mov	r2, r0
 800be94:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be98:	e7e4      	b.n	800be64 <__mdiff+0x28>
 800be9a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800be9e:	f104 0914 	add.w	r9, r4, #20
 800bea2:	6926      	ldr	r6, [r4, #16]
 800bea4:	f100 0814 	add.w	r8, r0, #20
 800bea8:	60c5      	str	r5, [r0, #12]
 800beaa:	f10a 0514 	add.w	r5, sl, #20
 800beae:	f10a 0210 	add.w	r2, sl, #16
 800beb2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800beb6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800beba:	46c2      	mov	sl, r8
 800bebc:	f04f 0c00 	mov.w	ip, #0
 800bec0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bec4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bec8:	fa1f f18b 	uxth.w	r1, fp
 800becc:	454e      	cmp	r6, r9
 800bece:	448c      	add	ip, r1
 800bed0:	b299      	uxth	r1, r3
 800bed2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800bed6:	ebac 0101 	sub.w	r1, ip, r1
 800beda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bede:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bee2:	b289      	uxth	r1, r1
 800bee4:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bee8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800beec:	f84a 3b04 	str.w	r3, [sl], #4
 800bef0:	d8e6      	bhi.n	800bec0 <__mdiff+0x84>
 800bef2:	1b33      	subs	r3, r6, r4
 800bef4:	3415      	adds	r4, #21
 800bef6:	3b15      	subs	r3, #21
 800bef8:	f023 0303 	bic.w	r3, r3, #3
 800befc:	3304      	adds	r3, #4
 800befe:	42a6      	cmp	r6, r4
 800bf00:	bf38      	it	cc
 800bf02:	2304      	movcc	r3, #4
 800bf04:	441d      	add	r5, r3
 800bf06:	4443      	add	r3, r8
 800bf08:	462c      	mov	r4, r5
 800bf0a:	461e      	mov	r6, r3
 800bf0c:	4574      	cmp	r4, lr
 800bf0e:	d30e      	bcc.n	800bf2e <__mdiff+0xf2>
 800bf10:	f10e 0203 	add.w	r2, lr, #3
 800bf14:	1b52      	subs	r2, r2, r5
 800bf16:	3d03      	subs	r5, #3
 800bf18:	f022 0203 	bic.w	r2, r2, #3
 800bf1c:	45ae      	cmp	lr, r5
 800bf1e:	bf38      	it	cc
 800bf20:	2200      	movcc	r2, #0
 800bf22:	441a      	add	r2, r3
 800bf24:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf28:	b18b      	cbz	r3, 800bf4e <__mdiff+0x112>
 800bf2a:	6107      	str	r7, [r0, #16]
 800bf2c:	e7a0      	b.n	800be70 <__mdiff+0x34>
 800bf2e:	f854 8b04 	ldr.w	r8, [r4], #4
 800bf32:	fa1f f288 	uxth.w	r2, r8
 800bf36:	4462      	add	r2, ip
 800bf38:	1411      	asrs	r1, r2, #16
 800bf3a:	b292      	uxth	r2, r2
 800bf3c:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800bf40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bf44:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800bf48:	f846 2b04 	str.w	r2, [r6], #4
 800bf4c:	e7de      	b.n	800bf0c <__mdiff+0xd0>
 800bf4e:	3f01      	subs	r7, #1
 800bf50:	e7e8      	b.n	800bf24 <__mdiff+0xe8>
 800bf52:	bf00      	nop
 800bf54:	0800cb13 	.word	0x0800cb13
 800bf58:	0800cb84 	.word	0x0800cb84

0800bf5c <__d2b>:
 800bf5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf60:	4689      	mov	r9, r1
 800bf62:	2101      	movs	r1, #1
 800bf64:	4690      	mov	r8, r2
 800bf66:	ec57 6b10 	vmov	r6, r7, d0
 800bf6a:	f7ff fcc9 	bl	800b900 <_Balloc>
 800bf6e:	4604      	mov	r4, r0
 800bf70:	b930      	cbnz	r0, 800bf80 <__d2b+0x24>
 800bf72:	4602      	mov	r2, r0
 800bf74:	4b25      	ldr	r3, [pc, #148]	; (800c00c <__d2b+0xb0>)
 800bf76:	f240 310a 	movw	r1, #778	; 0x30a
 800bf7a:	4825      	ldr	r0, [pc, #148]	; (800c010 <__d2b+0xb4>)
 800bf7c:	f000 fb48 	bl	800c610 <__assert_func>
 800bf80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf88:	bb35      	cbnz	r5, 800bfd8 <__d2b+0x7c>
 800bf8a:	2e00      	cmp	r6, #0
 800bf8c:	9301      	str	r3, [sp, #4]
 800bf8e:	d028      	beq.n	800bfe2 <__d2b+0x86>
 800bf90:	4668      	mov	r0, sp
 800bf92:	9600      	str	r6, [sp, #0]
 800bf94:	f7ff fd7e 	bl	800ba94 <__lo0bits>
 800bf98:	9900      	ldr	r1, [sp, #0]
 800bf9a:	b300      	cbz	r0, 800bfde <__d2b+0x82>
 800bf9c:	9a01      	ldr	r2, [sp, #4]
 800bf9e:	f1c0 0320 	rsb	r3, r0, #32
 800bfa2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa6:	40c2      	lsrs	r2, r0
 800bfa8:	430b      	orrs	r3, r1
 800bfaa:	9201      	str	r2, [sp, #4]
 800bfac:	6163      	str	r3, [r4, #20]
 800bfae:	9b01      	ldr	r3, [sp, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	61a3      	str	r3, [r4, #24]
 800bfb4:	bf14      	ite	ne
 800bfb6:	2202      	movne	r2, #2
 800bfb8:	2201      	moveq	r2, #1
 800bfba:	6122      	str	r2, [r4, #16]
 800bfbc:	b1d5      	cbz	r5, 800bff4 <__d2b+0x98>
 800bfbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bfc2:	4405      	add	r5, r0
 800bfc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bfc8:	f8c9 5000 	str.w	r5, [r9]
 800bfcc:	f8c8 0000 	str.w	r0, [r8]
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	b003      	add	sp, #12
 800bfd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfdc:	e7d5      	b.n	800bf8a <__d2b+0x2e>
 800bfde:	6161      	str	r1, [r4, #20]
 800bfe0:	e7e5      	b.n	800bfae <__d2b+0x52>
 800bfe2:	a801      	add	r0, sp, #4
 800bfe4:	f7ff fd56 	bl	800ba94 <__lo0bits>
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	3020      	adds	r0, #32
 800bfee:	6163      	str	r3, [r4, #20]
 800bff0:	6122      	str	r2, [r4, #16]
 800bff2:	e7e3      	b.n	800bfbc <__d2b+0x60>
 800bff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bff8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bffc:	f8c9 0000 	str.w	r0, [r9]
 800c000:	6918      	ldr	r0, [r3, #16]
 800c002:	f7ff fd27 	bl	800ba54 <__hi0bits>
 800c006:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c00a:	e7df      	b.n	800bfcc <__d2b+0x70>
 800c00c:	0800cb13 	.word	0x0800cb13
 800c010:	0800cb84 	.word	0x0800cb84

0800c014 <_calloc_r>:
 800c014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c016:	fba1 2402 	umull	r2, r4, r1, r2
 800c01a:	b94c      	cbnz	r4, 800c030 <_calloc_r+0x1c>
 800c01c:	4611      	mov	r1, r2
 800c01e:	9201      	str	r2, [sp, #4]
 800c020:	f000 f87a 	bl	800c118 <_malloc_r>
 800c024:	9a01      	ldr	r2, [sp, #4]
 800c026:	4605      	mov	r5, r0
 800c028:	b930      	cbnz	r0, 800c038 <_calloc_r+0x24>
 800c02a:	4628      	mov	r0, r5
 800c02c:	b003      	add	sp, #12
 800c02e:	bd30      	pop	{r4, r5, pc}
 800c030:	220c      	movs	r2, #12
 800c032:	2500      	movs	r5, #0
 800c034:	6002      	str	r2, [r0, #0]
 800c036:	e7f8      	b.n	800c02a <_calloc_r+0x16>
 800c038:	4621      	mov	r1, r4
 800c03a:	f7fd fdd2 	bl	8009be2 <memset>
 800c03e:	e7f4      	b.n	800c02a <_calloc_r+0x16>

0800c040 <_free_r>:
 800c040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c042:	2900      	cmp	r1, #0
 800c044:	d043      	beq.n	800c0ce <_free_r+0x8e>
 800c046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c04a:	1f0c      	subs	r4, r1, #4
 800c04c:	9001      	str	r0, [sp, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	bfb8      	it	lt
 800c052:	18e4      	addlt	r4, r4, r3
 800c054:	f000 fb62 	bl	800c71c <__malloc_lock>
 800c058:	4a1e      	ldr	r2, [pc, #120]	; (800c0d4 <_free_r+0x94>)
 800c05a:	9801      	ldr	r0, [sp, #4]
 800c05c:	6813      	ldr	r3, [r2, #0]
 800c05e:	b933      	cbnz	r3, 800c06e <_free_r+0x2e>
 800c060:	6063      	str	r3, [r4, #4]
 800c062:	6014      	str	r4, [r2, #0]
 800c064:	b003      	add	sp, #12
 800c066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c06a:	f000 bb5d 	b.w	800c728 <__malloc_unlock>
 800c06e:	42a3      	cmp	r3, r4
 800c070:	d908      	bls.n	800c084 <_free_r+0x44>
 800c072:	6825      	ldr	r5, [r4, #0]
 800c074:	1961      	adds	r1, r4, r5
 800c076:	428b      	cmp	r3, r1
 800c078:	bf01      	itttt	eq
 800c07a:	6819      	ldreq	r1, [r3, #0]
 800c07c:	685b      	ldreq	r3, [r3, #4]
 800c07e:	1949      	addeq	r1, r1, r5
 800c080:	6021      	streq	r1, [r4, #0]
 800c082:	e7ed      	b.n	800c060 <_free_r+0x20>
 800c084:	461a      	mov	r2, r3
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	b10b      	cbz	r3, 800c08e <_free_r+0x4e>
 800c08a:	42a3      	cmp	r3, r4
 800c08c:	d9fa      	bls.n	800c084 <_free_r+0x44>
 800c08e:	6811      	ldr	r1, [r2, #0]
 800c090:	1855      	adds	r5, r2, r1
 800c092:	42a5      	cmp	r5, r4
 800c094:	d10b      	bne.n	800c0ae <_free_r+0x6e>
 800c096:	6824      	ldr	r4, [r4, #0]
 800c098:	4421      	add	r1, r4
 800c09a:	1854      	adds	r4, r2, r1
 800c09c:	6011      	str	r1, [r2, #0]
 800c09e:	42a3      	cmp	r3, r4
 800c0a0:	d1e0      	bne.n	800c064 <_free_r+0x24>
 800c0a2:	681c      	ldr	r4, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	4421      	add	r1, r4
 800c0a8:	6053      	str	r3, [r2, #4]
 800c0aa:	6011      	str	r1, [r2, #0]
 800c0ac:	e7da      	b.n	800c064 <_free_r+0x24>
 800c0ae:	d902      	bls.n	800c0b6 <_free_r+0x76>
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	6003      	str	r3, [r0, #0]
 800c0b4:	e7d6      	b.n	800c064 <_free_r+0x24>
 800c0b6:	6825      	ldr	r5, [r4, #0]
 800c0b8:	1961      	adds	r1, r4, r5
 800c0ba:	428b      	cmp	r3, r1
 800c0bc:	bf02      	ittt	eq
 800c0be:	6819      	ldreq	r1, [r3, #0]
 800c0c0:	685b      	ldreq	r3, [r3, #4]
 800c0c2:	1949      	addeq	r1, r1, r5
 800c0c4:	6063      	str	r3, [r4, #4]
 800c0c6:	bf08      	it	eq
 800c0c8:	6021      	streq	r1, [r4, #0]
 800c0ca:	6054      	str	r4, [r2, #4]
 800c0cc:	e7ca      	b.n	800c064 <_free_r+0x24>
 800c0ce:	b003      	add	sp, #12
 800c0d0:	bd30      	pop	{r4, r5, pc}
 800c0d2:	bf00      	nop
 800c0d4:	2001fab8 	.word	0x2001fab8

0800c0d8 <sbrk_aligned>:
 800c0d8:	b570      	push	{r4, r5, r6, lr}
 800c0da:	4e0e      	ldr	r6, [pc, #56]	; (800c114 <sbrk_aligned+0x3c>)
 800c0dc:	460c      	mov	r4, r1
 800c0de:	4605      	mov	r5, r0
 800c0e0:	6831      	ldr	r1, [r6, #0]
 800c0e2:	b911      	cbnz	r1, 800c0ea <sbrk_aligned+0x12>
 800c0e4:	f000 fa2e 	bl	800c544 <_sbrk_r>
 800c0e8:	6030      	str	r0, [r6, #0]
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	f000 fa29 	bl	800c544 <_sbrk_r>
 800c0f2:	1c43      	adds	r3, r0, #1
 800c0f4:	d00a      	beq.n	800c10c <sbrk_aligned+0x34>
 800c0f6:	1cc4      	adds	r4, r0, #3
 800c0f8:	f024 0403 	bic.w	r4, r4, #3
 800c0fc:	42a0      	cmp	r0, r4
 800c0fe:	d007      	beq.n	800c110 <sbrk_aligned+0x38>
 800c100:	1a21      	subs	r1, r4, r0
 800c102:	4628      	mov	r0, r5
 800c104:	f000 fa1e 	bl	800c544 <_sbrk_r>
 800c108:	3001      	adds	r0, #1
 800c10a:	d101      	bne.n	800c110 <sbrk_aligned+0x38>
 800c10c:	f04f 34ff 	mov.w	r4, #4294967295
 800c110:	4620      	mov	r0, r4
 800c112:	bd70      	pop	{r4, r5, r6, pc}
 800c114:	2001fabc 	.word	0x2001fabc

0800c118 <_malloc_r>:
 800c118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c11c:	1ccd      	adds	r5, r1, #3
 800c11e:	4607      	mov	r7, r0
 800c120:	f025 0503 	bic.w	r5, r5, #3
 800c124:	3508      	adds	r5, #8
 800c126:	2d0c      	cmp	r5, #12
 800c128:	bf38      	it	cc
 800c12a:	250c      	movcc	r5, #12
 800c12c:	2d00      	cmp	r5, #0
 800c12e:	db01      	blt.n	800c134 <_malloc_r+0x1c>
 800c130:	42a9      	cmp	r1, r5
 800c132:	d905      	bls.n	800c140 <_malloc_r+0x28>
 800c134:	230c      	movs	r3, #12
 800c136:	2600      	movs	r6, #0
 800c138:	603b      	str	r3, [r7, #0]
 800c13a:	4630      	mov	r0, r6
 800c13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c140:	4e2e      	ldr	r6, [pc, #184]	; (800c1fc <_malloc_r+0xe4>)
 800c142:	f000 faeb 	bl	800c71c <__malloc_lock>
 800c146:	6833      	ldr	r3, [r6, #0]
 800c148:	461c      	mov	r4, r3
 800c14a:	bb34      	cbnz	r4, 800c19a <_malloc_r+0x82>
 800c14c:	4629      	mov	r1, r5
 800c14e:	4638      	mov	r0, r7
 800c150:	f7ff ffc2 	bl	800c0d8 <sbrk_aligned>
 800c154:	1c43      	adds	r3, r0, #1
 800c156:	4604      	mov	r4, r0
 800c158:	d14d      	bne.n	800c1f6 <_malloc_r+0xde>
 800c15a:	6834      	ldr	r4, [r6, #0]
 800c15c:	4626      	mov	r6, r4
 800c15e:	2e00      	cmp	r6, #0
 800c160:	d140      	bne.n	800c1e4 <_malloc_r+0xcc>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	4631      	mov	r1, r6
 800c166:	4638      	mov	r0, r7
 800c168:	eb04 0803 	add.w	r8, r4, r3
 800c16c:	f000 f9ea 	bl	800c544 <_sbrk_r>
 800c170:	4580      	cmp	r8, r0
 800c172:	d13a      	bne.n	800c1ea <_malloc_r+0xd2>
 800c174:	6821      	ldr	r1, [r4, #0]
 800c176:	3503      	adds	r5, #3
 800c178:	4638      	mov	r0, r7
 800c17a:	1a6d      	subs	r5, r5, r1
 800c17c:	f025 0503 	bic.w	r5, r5, #3
 800c180:	3508      	adds	r5, #8
 800c182:	2d0c      	cmp	r5, #12
 800c184:	bf38      	it	cc
 800c186:	250c      	movcc	r5, #12
 800c188:	4629      	mov	r1, r5
 800c18a:	f7ff ffa5 	bl	800c0d8 <sbrk_aligned>
 800c18e:	3001      	adds	r0, #1
 800c190:	d02b      	beq.n	800c1ea <_malloc_r+0xd2>
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	442b      	add	r3, r5
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	e00e      	b.n	800c1b8 <_malloc_r+0xa0>
 800c19a:	6822      	ldr	r2, [r4, #0]
 800c19c:	1b52      	subs	r2, r2, r5
 800c19e:	d41e      	bmi.n	800c1de <_malloc_r+0xc6>
 800c1a0:	2a0b      	cmp	r2, #11
 800c1a2:	d916      	bls.n	800c1d2 <_malloc_r+0xba>
 800c1a4:	1961      	adds	r1, r4, r5
 800c1a6:	42a3      	cmp	r3, r4
 800c1a8:	6025      	str	r5, [r4, #0]
 800c1aa:	bf18      	it	ne
 800c1ac:	6059      	strne	r1, [r3, #4]
 800c1ae:	6863      	ldr	r3, [r4, #4]
 800c1b0:	bf08      	it	eq
 800c1b2:	6031      	streq	r1, [r6, #0]
 800c1b4:	5162      	str	r2, [r4, r5]
 800c1b6:	604b      	str	r3, [r1, #4]
 800c1b8:	f104 060b 	add.w	r6, r4, #11
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f000 fab3 	bl	800c728 <__malloc_unlock>
 800c1c2:	1d23      	adds	r3, r4, #4
 800c1c4:	f026 0607 	bic.w	r6, r6, #7
 800c1c8:	1af2      	subs	r2, r6, r3
 800c1ca:	d0b6      	beq.n	800c13a <_malloc_r+0x22>
 800c1cc:	1b9b      	subs	r3, r3, r6
 800c1ce:	50a3      	str	r3, [r4, r2]
 800c1d0:	e7b3      	b.n	800c13a <_malloc_r+0x22>
 800c1d2:	6862      	ldr	r2, [r4, #4]
 800c1d4:	42a3      	cmp	r3, r4
 800c1d6:	bf0c      	ite	eq
 800c1d8:	6032      	streq	r2, [r6, #0]
 800c1da:	605a      	strne	r2, [r3, #4]
 800c1dc:	e7ec      	b.n	800c1b8 <_malloc_r+0xa0>
 800c1de:	4623      	mov	r3, r4
 800c1e0:	6864      	ldr	r4, [r4, #4]
 800c1e2:	e7b2      	b.n	800c14a <_malloc_r+0x32>
 800c1e4:	4634      	mov	r4, r6
 800c1e6:	6876      	ldr	r6, [r6, #4]
 800c1e8:	e7b9      	b.n	800c15e <_malloc_r+0x46>
 800c1ea:	230c      	movs	r3, #12
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	603b      	str	r3, [r7, #0]
 800c1f0:	f000 fa9a 	bl	800c728 <__malloc_unlock>
 800c1f4:	e7a1      	b.n	800c13a <_malloc_r+0x22>
 800c1f6:	6025      	str	r5, [r4, #0]
 800c1f8:	e7de      	b.n	800c1b8 <_malloc_r+0xa0>
 800c1fa:	bf00      	nop
 800c1fc:	2001fab8 	.word	0x2001fab8

0800c200 <__sfputc_r>:
 800c200:	6893      	ldr	r3, [r2, #8]
 800c202:	3b01      	subs	r3, #1
 800c204:	2b00      	cmp	r3, #0
 800c206:	6093      	str	r3, [r2, #8]
 800c208:	b410      	push	{r4}
 800c20a:	da08      	bge.n	800c21e <__sfputc_r+0x1e>
 800c20c:	6994      	ldr	r4, [r2, #24]
 800c20e:	42a3      	cmp	r3, r4
 800c210:	db01      	blt.n	800c216 <__sfputc_r+0x16>
 800c212:	290a      	cmp	r1, #10
 800c214:	d103      	bne.n	800c21e <__sfputc_r+0x1e>
 800c216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c21a:	f7fe b9fb 	b.w	800a614 <__swbuf_r>
 800c21e:	6813      	ldr	r3, [r2, #0]
 800c220:	1c58      	adds	r0, r3, #1
 800c222:	6010      	str	r0, [r2, #0]
 800c224:	4608      	mov	r0, r1
 800c226:	7019      	strb	r1, [r3, #0]
 800c228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <__sfputs_r>:
 800c22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c230:	4606      	mov	r6, r0
 800c232:	460f      	mov	r7, r1
 800c234:	4614      	mov	r4, r2
 800c236:	18d5      	adds	r5, r2, r3
 800c238:	42ac      	cmp	r4, r5
 800c23a:	d101      	bne.n	800c240 <__sfputs_r+0x12>
 800c23c:	2000      	movs	r0, #0
 800c23e:	e007      	b.n	800c250 <__sfputs_r+0x22>
 800c240:	463a      	mov	r2, r7
 800c242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c246:	4630      	mov	r0, r6
 800c248:	f7ff ffda 	bl	800c200 <__sfputc_r>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d1f3      	bne.n	800c238 <__sfputs_r+0xa>
 800c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c254 <_vfiprintf_r>:
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	460d      	mov	r5, r1
 800c25a:	b09d      	sub	sp, #116	; 0x74
 800c25c:	4614      	mov	r4, r2
 800c25e:	4698      	mov	r8, r3
 800c260:	4606      	mov	r6, r0
 800c262:	b118      	cbz	r0, 800c26c <_vfiprintf_r+0x18>
 800c264:	6983      	ldr	r3, [r0, #24]
 800c266:	b90b      	cbnz	r3, 800c26c <_vfiprintf_r+0x18>
 800c268:	f7ff fa2a 	bl	800b6c0 <__sinit>
 800c26c:	4b89      	ldr	r3, [pc, #548]	; (800c494 <_vfiprintf_r+0x240>)
 800c26e:	429d      	cmp	r5, r3
 800c270:	d11b      	bne.n	800c2aa <_vfiprintf_r+0x56>
 800c272:	6875      	ldr	r5, [r6, #4]
 800c274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c276:	07d9      	lsls	r1, r3, #31
 800c278:	d405      	bmi.n	800c286 <_vfiprintf_r+0x32>
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	059a      	lsls	r2, r3, #22
 800c27e:	d402      	bmi.n	800c286 <_vfiprintf_r+0x32>
 800c280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c282:	f7ff fac0 	bl	800b806 <__retarget_lock_acquire_recursive>
 800c286:	89ab      	ldrh	r3, [r5, #12]
 800c288:	071b      	lsls	r3, r3, #28
 800c28a:	d501      	bpl.n	800c290 <_vfiprintf_r+0x3c>
 800c28c:	692b      	ldr	r3, [r5, #16]
 800c28e:	b9eb      	cbnz	r3, 800c2cc <_vfiprintf_r+0x78>
 800c290:	4629      	mov	r1, r5
 800c292:	4630      	mov	r0, r6
 800c294:	f7fe fa10 	bl	800a6b8 <__swsetup_r>
 800c298:	b1c0      	cbz	r0, 800c2cc <_vfiprintf_r+0x78>
 800c29a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c29c:	07dc      	lsls	r4, r3, #31
 800c29e:	d50e      	bpl.n	800c2be <_vfiprintf_r+0x6a>
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a4:	b01d      	add	sp, #116	; 0x74
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	4b7b      	ldr	r3, [pc, #492]	; (800c498 <_vfiprintf_r+0x244>)
 800c2ac:	429d      	cmp	r5, r3
 800c2ae:	d101      	bne.n	800c2b4 <_vfiprintf_r+0x60>
 800c2b0:	68b5      	ldr	r5, [r6, #8]
 800c2b2:	e7df      	b.n	800c274 <_vfiprintf_r+0x20>
 800c2b4:	4b79      	ldr	r3, [pc, #484]	; (800c49c <_vfiprintf_r+0x248>)
 800c2b6:	429d      	cmp	r5, r3
 800c2b8:	bf08      	it	eq
 800c2ba:	68f5      	ldreq	r5, [r6, #12]
 800c2bc:	e7da      	b.n	800c274 <_vfiprintf_r+0x20>
 800c2be:	89ab      	ldrh	r3, [r5, #12]
 800c2c0:	0598      	lsls	r0, r3, #22
 800c2c2:	d4ed      	bmi.n	800c2a0 <_vfiprintf_r+0x4c>
 800c2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2c6:	f7ff fa9f 	bl	800b808 <__retarget_lock_release_recursive>
 800c2ca:	e7e9      	b.n	800c2a0 <_vfiprintf_r+0x4c>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2d2:	f04f 0901 	mov.w	r9, #1
 800c2d6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800c4a0 <_vfiprintf_r+0x24c>
 800c2da:	9309      	str	r3, [sp, #36]	; 0x24
 800c2dc:	2320      	movs	r3, #32
 800c2de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2e2:	2330      	movs	r3, #48	; 0x30
 800c2e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	469a      	mov	sl, r3
 800c2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f0:	b10a      	cbz	r2, 800c2f6 <_vfiprintf_r+0xa2>
 800c2f2:	2a25      	cmp	r2, #37	; 0x25
 800c2f4:	d1f9      	bne.n	800c2ea <_vfiprintf_r+0x96>
 800c2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2fa:	d00b      	beq.n	800c314 <_vfiprintf_r+0xc0>
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	4622      	mov	r2, r4
 800c300:	4629      	mov	r1, r5
 800c302:	4630      	mov	r0, r6
 800c304:	f7ff ff93 	bl	800c22e <__sfputs_r>
 800c308:	3001      	adds	r0, #1
 800c30a:	f000 80aa 	beq.w	800c462 <_vfiprintf_r+0x20e>
 800c30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c310:	445a      	add	r2, fp
 800c312:	9209      	str	r2, [sp, #36]	; 0x24
 800c314:	f89a 3000 	ldrb.w	r3, [sl]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80a2 	beq.w	800c462 <_vfiprintf_r+0x20e>
 800c31e:	2300      	movs	r3, #0
 800c320:	f04f 32ff 	mov.w	r2, #4294967295
 800c324:	f10a 0a01 	add.w	sl, sl, #1
 800c328:	9304      	str	r3, [sp, #16]
 800c32a:	9307      	str	r3, [sp, #28]
 800c32c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c330:	931a      	str	r3, [sp, #104]	; 0x68
 800c332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c336:	4654      	mov	r4, sl
 800c338:	2205      	movs	r2, #5
 800c33a:	4859      	ldr	r0, [pc, #356]	; (800c4a0 <_vfiprintf_r+0x24c>)
 800c33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c340:	f7ff fad0 	bl	800b8e4 <memchr>
 800c344:	9a04      	ldr	r2, [sp, #16]
 800c346:	b9d8      	cbnz	r0, 800c380 <_vfiprintf_r+0x12c>
 800c348:	06d1      	lsls	r1, r2, #27
 800c34a:	bf44      	itt	mi
 800c34c:	2320      	movmi	r3, #32
 800c34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c352:	0713      	lsls	r3, r2, #28
 800c354:	bf44      	itt	mi
 800c356:	232b      	movmi	r3, #43	; 0x2b
 800c358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c35c:	f89a 3000 	ldrb.w	r3, [sl]
 800c360:	2b2a      	cmp	r3, #42	; 0x2a
 800c362:	d015      	beq.n	800c390 <_vfiprintf_r+0x13c>
 800c364:	9a07      	ldr	r2, [sp, #28]
 800c366:	4654      	mov	r4, sl
 800c368:	2000      	movs	r0, #0
 800c36a:	f04f 0c0a 	mov.w	ip, #10
 800c36e:	4621      	mov	r1, r4
 800c370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c374:	3b30      	subs	r3, #48	; 0x30
 800c376:	2b09      	cmp	r3, #9
 800c378:	d94e      	bls.n	800c418 <_vfiprintf_r+0x1c4>
 800c37a:	b1b0      	cbz	r0, 800c3aa <_vfiprintf_r+0x156>
 800c37c:	9207      	str	r2, [sp, #28]
 800c37e:	e014      	b.n	800c3aa <_vfiprintf_r+0x156>
 800c380:	eba0 0308 	sub.w	r3, r0, r8
 800c384:	46a2      	mov	sl, r4
 800c386:	fa09 f303 	lsl.w	r3, r9, r3
 800c38a:	4313      	orrs	r3, r2
 800c38c:	9304      	str	r3, [sp, #16]
 800c38e:	e7d2      	b.n	800c336 <_vfiprintf_r+0xe2>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	1d19      	adds	r1, r3, #4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	9103      	str	r1, [sp, #12]
 800c39a:	bfbb      	ittet	lt
 800c39c:	425b      	neglt	r3, r3
 800c39e:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a2:	9307      	strge	r3, [sp, #28]
 800c3a4:	9307      	strlt	r3, [sp, #28]
 800c3a6:	bfb8      	it	lt
 800c3a8:	9204      	strlt	r2, [sp, #16]
 800c3aa:	7823      	ldrb	r3, [r4, #0]
 800c3ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ae:	d10c      	bne.n	800c3ca <_vfiprintf_r+0x176>
 800c3b0:	7863      	ldrb	r3, [r4, #1]
 800c3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b4:	d135      	bne.n	800c422 <_vfiprintf_r+0x1ce>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	3402      	adds	r4, #2
 800c3ba:	1d1a      	adds	r2, r3, #4
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	9203      	str	r2, [sp, #12]
 800c3c2:	bfb8      	it	lt
 800c3c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3c8:	9305      	str	r3, [sp, #20]
 800c3ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4b0 <_vfiprintf_r+0x25c>
 800c3ce:	2203      	movs	r2, #3
 800c3d0:	7821      	ldrb	r1, [r4, #0]
 800c3d2:	4650      	mov	r0, sl
 800c3d4:	f7ff fa86 	bl	800b8e4 <memchr>
 800c3d8:	b140      	cbz	r0, 800c3ec <_vfiprintf_r+0x198>
 800c3da:	2340      	movs	r3, #64	; 0x40
 800c3dc:	eba0 000a 	sub.w	r0, r0, sl
 800c3e0:	3401      	adds	r4, #1
 800c3e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c3e6:	9b04      	ldr	r3, [sp, #16]
 800c3e8:	4303      	orrs	r3, r0
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f0:	2206      	movs	r2, #6
 800c3f2:	482c      	ldr	r0, [pc, #176]	; (800c4a4 <_vfiprintf_r+0x250>)
 800c3f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3f8:	f7ff fa74 	bl	800b8e4 <memchr>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d03f      	beq.n	800c480 <_vfiprintf_r+0x22c>
 800c400:	4b29      	ldr	r3, [pc, #164]	; (800c4a8 <_vfiprintf_r+0x254>)
 800c402:	bb1b      	cbnz	r3, 800c44c <_vfiprintf_r+0x1f8>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	3307      	adds	r3, #7
 800c408:	f023 0307 	bic.w	r3, r3, #7
 800c40c:	3308      	adds	r3, #8
 800c40e:	9303      	str	r3, [sp, #12]
 800c410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c412:	443b      	add	r3, r7
 800c414:	9309      	str	r3, [sp, #36]	; 0x24
 800c416:	e767      	b.n	800c2e8 <_vfiprintf_r+0x94>
 800c418:	fb0c 3202 	mla	r2, ip, r2, r3
 800c41c:	460c      	mov	r4, r1
 800c41e:	2001      	movs	r0, #1
 800c420:	e7a5      	b.n	800c36e <_vfiprintf_r+0x11a>
 800c422:	2300      	movs	r3, #0
 800c424:	3401      	adds	r4, #1
 800c426:	f04f 0c0a 	mov.w	ip, #10
 800c42a:	4619      	mov	r1, r3
 800c42c:	9305      	str	r3, [sp, #20]
 800c42e:	4620      	mov	r0, r4
 800c430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c434:	3a30      	subs	r2, #48	; 0x30
 800c436:	2a09      	cmp	r2, #9
 800c438:	d903      	bls.n	800c442 <_vfiprintf_r+0x1ee>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0c5      	beq.n	800c3ca <_vfiprintf_r+0x176>
 800c43e:	9105      	str	r1, [sp, #20]
 800c440:	e7c3      	b.n	800c3ca <_vfiprintf_r+0x176>
 800c442:	fb0c 2101 	mla	r1, ip, r1, r2
 800c446:	4604      	mov	r4, r0
 800c448:	2301      	movs	r3, #1
 800c44a:	e7f0      	b.n	800c42e <_vfiprintf_r+0x1da>
 800c44c:	ab03      	add	r3, sp, #12
 800c44e:	462a      	mov	r2, r5
 800c450:	a904      	add	r1, sp, #16
 800c452:	4630      	mov	r0, r6
 800c454:	9300      	str	r3, [sp, #0]
 800c456:	4b15      	ldr	r3, [pc, #84]	; (800c4ac <_vfiprintf_r+0x258>)
 800c458:	f7fd fc6c 	bl	8009d34 <_printf_float>
 800c45c:	4607      	mov	r7, r0
 800c45e:	1c78      	adds	r0, r7, #1
 800c460:	d1d6      	bne.n	800c410 <_vfiprintf_r+0x1bc>
 800c462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c464:	07d9      	lsls	r1, r3, #31
 800c466:	d405      	bmi.n	800c474 <_vfiprintf_r+0x220>
 800c468:	89ab      	ldrh	r3, [r5, #12]
 800c46a:	059a      	lsls	r2, r3, #22
 800c46c:	d402      	bmi.n	800c474 <_vfiprintf_r+0x220>
 800c46e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c470:	f7ff f9ca 	bl	800b808 <__retarget_lock_release_recursive>
 800c474:	89ab      	ldrh	r3, [r5, #12]
 800c476:	065b      	lsls	r3, r3, #25
 800c478:	f53f af12 	bmi.w	800c2a0 <_vfiprintf_r+0x4c>
 800c47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c47e:	e711      	b.n	800c2a4 <_vfiprintf_r+0x50>
 800c480:	ab03      	add	r3, sp, #12
 800c482:	462a      	mov	r2, r5
 800c484:	a904      	add	r1, sp, #16
 800c486:	4630      	mov	r0, r6
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	4b08      	ldr	r3, [pc, #32]	; (800c4ac <_vfiprintf_r+0x258>)
 800c48c:	f7fd fef8 	bl	800a280 <_printf_i>
 800c490:	e7e4      	b.n	800c45c <_vfiprintf_r+0x208>
 800c492:	bf00      	nop
 800c494:	0800cb44 	.word	0x0800cb44
 800c498:	0800cb64 	.word	0x0800cb64
 800c49c:	0800cb24 	.word	0x0800cb24
 800c4a0:	0800ccdc 	.word	0x0800ccdc
 800c4a4:	0800cce6 	.word	0x0800cce6
 800c4a8:	08009d35 	.word	0x08009d35
 800c4ac:	0800c22f 	.word	0x0800c22f
 800c4b0:	0800cce2 	.word	0x0800cce2

0800c4b4 <_putc_r>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	4614      	mov	r4, r2
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	b118      	cbz	r0, 800c4c6 <_putc_r+0x12>
 800c4be:	6983      	ldr	r3, [r0, #24]
 800c4c0:	b90b      	cbnz	r3, 800c4c6 <_putc_r+0x12>
 800c4c2:	f7ff f8fd 	bl	800b6c0 <__sinit>
 800c4c6:	4b1c      	ldr	r3, [pc, #112]	; (800c538 <_putc_r+0x84>)
 800c4c8:	429c      	cmp	r4, r3
 800c4ca:	d124      	bne.n	800c516 <_putc_r+0x62>
 800c4cc:	6874      	ldr	r4, [r6, #4]
 800c4ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4d0:	07d8      	lsls	r0, r3, #31
 800c4d2:	d405      	bmi.n	800c4e0 <_putc_r+0x2c>
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	0599      	lsls	r1, r3, #22
 800c4d8:	d402      	bmi.n	800c4e0 <_putc_r+0x2c>
 800c4da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4dc:	f7ff f993 	bl	800b806 <__retarget_lock_acquire_recursive>
 800c4e0:	68a3      	ldr	r3, [r4, #8]
 800c4e2:	3b01      	subs	r3, #1
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	60a3      	str	r3, [r4, #8]
 800c4e8:	da05      	bge.n	800c4f6 <_putc_r+0x42>
 800c4ea:	69a2      	ldr	r2, [r4, #24]
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	db1c      	blt.n	800c52a <_putc_r+0x76>
 800c4f0:	b2eb      	uxtb	r3, r5
 800c4f2:	2b0a      	cmp	r3, #10
 800c4f4:	d019      	beq.n	800c52a <_putc_r+0x76>
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	6022      	str	r2, [r4, #0]
 800c4fc:	701d      	strb	r5, [r3, #0]
 800c4fe:	b2ed      	uxtb	r5, r5
 800c500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c502:	07da      	lsls	r2, r3, #31
 800c504:	d405      	bmi.n	800c512 <_putc_r+0x5e>
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	059b      	lsls	r3, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_putc_r+0x5e>
 800c50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c50e:	f7ff f97b 	bl	800b808 <__retarget_lock_release_recursive>
 800c512:	4628      	mov	r0, r5
 800c514:	bd70      	pop	{r4, r5, r6, pc}
 800c516:	4b09      	ldr	r3, [pc, #36]	; (800c53c <_putc_r+0x88>)
 800c518:	429c      	cmp	r4, r3
 800c51a:	d101      	bne.n	800c520 <_putc_r+0x6c>
 800c51c:	68b4      	ldr	r4, [r6, #8]
 800c51e:	e7d6      	b.n	800c4ce <_putc_r+0x1a>
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <_putc_r+0x8c>)
 800c522:	429c      	cmp	r4, r3
 800c524:	bf08      	it	eq
 800c526:	68f4      	ldreq	r4, [r6, #12]
 800c528:	e7d1      	b.n	800c4ce <_putc_r+0x1a>
 800c52a:	4629      	mov	r1, r5
 800c52c:	4622      	mov	r2, r4
 800c52e:	4630      	mov	r0, r6
 800c530:	f7fe f870 	bl	800a614 <__swbuf_r>
 800c534:	4605      	mov	r5, r0
 800c536:	e7e3      	b.n	800c500 <_putc_r+0x4c>
 800c538:	0800cb44 	.word	0x0800cb44
 800c53c:	0800cb64 	.word	0x0800cb64
 800c540:	0800cb24 	.word	0x0800cb24

0800c544 <_sbrk_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	2300      	movs	r3, #0
 800c548:	4d05      	ldr	r5, [pc, #20]	; (800c560 <_sbrk_r+0x1c>)
 800c54a:	4604      	mov	r4, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	602b      	str	r3, [r5, #0]
 800c550:	f7f5 fa1e 	bl	8001990 <_sbrk>
 800c554:	1c43      	adds	r3, r0, #1
 800c556:	d102      	bne.n	800c55e <_sbrk_r+0x1a>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	b103      	cbz	r3, 800c55e <_sbrk_r+0x1a>
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	2001fac0 	.word	0x2001fac0

0800c564 <__sread>:
 800c564:	b510      	push	{r4, lr}
 800c566:	460c      	mov	r4, r1
 800c568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c56c:	f000 f8e2 	bl	800c734 <_read_r>
 800c570:	2800      	cmp	r0, #0
 800c572:	bfab      	itete	ge
 800c574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c576:	89a3      	ldrhlt	r3, [r4, #12]
 800c578:	181b      	addge	r3, r3, r0
 800c57a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c57e:	bfac      	ite	ge
 800c580:	6563      	strge	r3, [r4, #84]	; 0x54
 800c582:	81a3      	strhlt	r3, [r4, #12]
 800c584:	bd10      	pop	{r4, pc}

0800c586 <__swrite>:
 800c586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c58a:	461f      	mov	r7, r3
 800c58c:	898b      	ldrh	r3, [r1, #12]
 800c58e:	4605      	mov	r5, r0
 800c590:	460c      	mov	r4, r1
 800c592:	05db      	lsls	r3, r3, #23
 800c594:	4616      	mov	r6, r2
 800c596:	d505      	bpl.n	800c5a4 <__swrite+0x1e>
 800c598:	2302      	movs	r3, #2
 800c59a:	2200      	movs	r2, #0
 800c59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a0:	f000 f898 	bl	800c6d4 <_lseek_r>
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	4632      	mov	r2, r6
 800c5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5b2:	81a3      	strh	r3, [r4, #12]
 800c5b4:	463b      	mov	r3, r7
 800c5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ba:	f000 b817 	b.w	800c5ec <_write_r>

0800c5be <__sseek>:
 800c5be:	b510      	push	{r4, lr}
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c6:	f000 f885 	bl	800c6d4 <_lseek_r>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	89a3      	ldrh	r3, [r4, #12]
 800c5ce:	bf15      	itete	ne
 800c5d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5da:	81a3      	strheq	r3, [r4, #12]
 800c5dc:	bf18      	it	ne
 800c5de:	81a3      	strhne	r3, [r4, #12]
 800c5e0:	bd10      	pop	{r4, pc}

0800c5e2 <__sclose>:
 800c5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5e6:	f000 b831 	b.w	800c64c <_close_r>
	...

0800c5ec <_write_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4d06      	ldr	r5, [pc, #24]	; (800c60c <_write_r+0x20>)
 800c5f2:	4608      	mov	r0, r1
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	602a      	str	r2, [r5, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f7f4 fce4 	bl	8000fc8 <_write>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d102      	bne.n	800c60a <_write_r+0x1e>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	b103      	cbz	r3, 800c60a <_write_r+0x1e>
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	2001fac0 	.word	0x2001fac0

0800c610 <__assert_func>:
 800c610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c612:	4614      	mov	r4, r2
 800c614:	461a      	mov	r2, r3
 800c616:	4b09      	ldr	r3, [pc, #36]	; (800c63c <__assert_func+0x2c>)
 800c618:	4605      	mov	r5, r0
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68d8      	ldr	r0, [r3, #12]
 800c61e:	b14c      	cbz	r4, 800c634 <__assert_func+0x24>
 800c620:	4b07      	ldr	r3, [pc, #28]	; (800c640 <__assert_func+0x30>)
 800c622:	9100      	str	r1, [sp, #0]
 800c624:	4907      	ldr	r1, [pc, #28]	; (800c644 <__assert_func+0x34>)
 800c626:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c62a:	462b      	mov	r3, r5
 800c62c:	f000 f81e 	bl	800c66c <fiprintf>
 800c630:	f000 f89f 	bl	800c772 <abort>
 800c634:	4b04      	ldr	r3, [pc, #16]	; (800c648 <__assert_func+0x38>)
 800c636:	461c      	mov	r4, r3
 800c638:	e7f3      	b.n	800c622 <__assert_func+0x12>
 800c63a:	bf00      	nop
 800c63c:	200002ac 	.word	0x200002ac
 800c640:	0800cced 	.word	0x0800cced
 800c644:	0800ccfa 	.word	0x0800ccfa
 800c648:	0800cd28 	.word	0x0800cd28

0800c64c <_close_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	2300      	movs	r3, #0
 800c650:	4d05      	ldr	r5, [pc, #20]	; (800c668 <_close_r+0x1c>)
 800c652:	4604      	mov	r4, r0
 800c654:	4608      	mov	r0, r1
 800c656:	602b      	str	r3, [r5, #0]
 800c658:	f7f5 f965 	bl	8001926 <_close>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d102      	bne.n	800c666 <_close_r+0x1a>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	b103      	cbz	r3, 800c666 <_close_r+0x1a>
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	2001fac0 	.word	0x2001fac0

0800c66c <fiprintf>:
 800c66c:	b40e      	push	{r1, r2, r3}
 800c66e:	b503      	push	{r0, r1, lr}
 800c670:	ab03      	add	r3, sp, #12
 800c672:	4601      	mov	r1, r0
 800c674:	4805      	ldr	r0, [pc, #20]	; (800c68c <fiprintf+0x20>)
 800c676:	f853 2b04 	ldr.w	r2, [r3], #4
 800c67a:	6800      	ldr	r0, [r0, #0]
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	f7ff fde9 	bl	800c254 <_vfiprintf_r>
 800c682:	b002      	add	sp, #8
 800c684:	f85d eb04 	ldr.w	lr, [sp], #4
 800c688:	b003      	add	sp, #12
 800c68a:	4770      	bx	lr
 800c68c:	200002ac 	.word	0x200002ac

0800c690 <_fstat_r>:
 800c690:	b538      	push	{r3, r4, r5, lr}
 800c692:	2300      	movs	r3, #0
 800c694:	4d06      	ldr	r5, [pc, #24]	; (800c6b0 <_fstat_r+0x20>)
 800c696:	4604      	mov	r4, r0
 800c698:	4608      	mov	r0, r1
 800c69a:	4611      	mov	r1, r2
 800c69c:	602b      	str	r3, [r5, #0]
 800c69e:	f7f5 f94e 	bl	800193e <_fstat>
 800c6a2:	1c43      	adds	r3, r0, #1
 800c6a4:	d102      	bne.n	800c6ac <_fstat_r+0x1c>
 800c6a6:	682b      	ldr	r3, [r5, #0]
 800c6a8:	b103      	cbz	r3, 800c6ac <_fstat_r+0x1c>
 800c6aa:	6023      	str	r3, [r4, #0]
 800c6ac:	bd38      	pop	{r3, r4, r5, pc}
 800c6ae:	bf00      	nop
 800c6b0:	2001fac0 	.word	0x2001fac0

0800c6b4 <_isatty_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	4d05      	ldr	r5, [pc, #20]	; (800c6d0 <_isatty_r+0x1c>)
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	4608      	mov	r0, r1
 800c6be:	602b      	str	r3, [r5, #0]
 800c6c0:	f7f5 f94d 	bl	800195e <_isatty>
 800c6c4:	1c43      	adds	r3, r0, #1
 800c6c6:	d102      	bne.n	800c6ce <_isatty_r+0x1a>
 800c6c8:	682b      	ldr	r3, [r5, #0]
 800c6ca:	b103      	cbz	r3, 800c6ce <_isatty_r+0x1a>
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	bd38      	pop	{r3, r4, r5, pc}
 800c6d0:	2001fac0 	.word	0x2001fac0

0800c6d4 <_lseek_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	4d06      	ldr	r5, [pc, #24]	; (800c6f4 <_lseek_r+0x20>)
 800c6da:	4608      	mov	r0, r1
 800c6dc:	4611      	mov	r1, r2
 800c6de:	2200      	movs	r2, #0
 800c6e0:	602a      	str	r2, [r5, #0]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	f7f5 f946 	bl	8001974 <_lseek>
 800c6e8:	1c43      	adds	r3, r0, #1
 800c6ea:	d102      	bne.n	800c6f2 <_lseek_r+0x1e>
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	b103      	cbz	r3, 800c6f2 <_lseek_r+0x1e>
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	bd38      	pop	{r3, r4, r5, pc}
 800c6f4:	2001fac0 	.word	0x2001fac0

0800c6f8 <__ascii_mbtowc>:
 800c6f8:	b082      	sub	sp, #8
 800c6fa:	b901      	cbnz	r1, 800c6fe <__ascii_mbtowc+0x6>
 800c6fc:	a901      	add	r1, sp, #4
 800c6fe:	b142      	cbz	r2, 800c712 <__ascii_mbtowc+0x1a>
 800c700:	b14b      	cbz	r3, 800c716 <__ascii_mbtowc+0x1e>
 800c702:	7813      	ldrb	r3, [r2, #0]
 800c704:	600b      	str	r3, [r1, #0]
 800c706:	7812      	ldrb	r2, [r2, #0]
 800c708:	1e10      	subs	r0, r2, #0
 800c70a:	bf18      	it	ne
 800c70c:	2001      	movne	r0, #1
 800c70e:	b002      	add	sp, #8
 800c710:	4770      	bx	lr
 800c712:	4610      	mov	r0, r2
 800c714:	e7fb      	b.n	800c70e <__ascii_mbtowc+0x16>
 800c716:	f06f 0001 	mvn.w	r0, #1
 800c71a:	e7f8      	b.n	800c70e <__ascii_mbtowc+0x16>

0800c71c <__malloc_lock>:
 800c71c:	4801      	ldr	r0, [pc, #4]	; (800c724 <__malloc_lock+0x8>)
 800c71e:	f7ff b872 	b.w	800b806 <__retarget_lock_acquire_recursive>
 800c722:	bf00      	nop
 800c724:	2001fab4 	.word	0x2001fab4

0800c728 <__malloc_unlock>:
 800c728:	4801      	ldr	r0, [pc, #4]	; (800c730 <__malloc_unlock+0x8>)
 800c72a:	f7ff b86d 	b.w	800b808 <__retarget_lock_release_recursive>
 800c72e:	bf00      	nop
 800c730:	2001fab4 	.word	0x2001fab4

0800c734 <_read_r>:
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	4604      	mov	r4, r0
 800c738:	4d06      	ldr	r5, [pc, #24]	; (800c754 <_read_r+0x20>)
 800c73a:	4608      	mov	r0, r1
 800c73c:	4611      	mov	r1, r2
 800c73e:	2200      	movs	r2, #0
 800c740:	602a      	str	r2, [r5, #0]
 800c742:	461a      	mov	r2, r3
 800c744:	f7f5 f8d2 	bl	80018ec <_read>
 800c748:	1c43      	adds	r3, r0, #1
 800c74a:	d102      	bne.n	800c752 <_read_r+0x1e>
 800c74c:	682b      	ldr	r3, [r5, #0]
 800c74e:	b103      	cbz	r3, 800c752 <_read_r+0x1e>
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	bd38      	pop	{r3, r4, r5, pc}
 800c754:	2001fac0 	.word	0x2001fac0

0800c758 <__ascii_wctomb>:
 800c758:	b149      	cbz	r1, 800c76e <__ascii_wctomb+0x16>
 800c75a:	2aff      	cmp	r2, #255	; 0xff
 800c75c:	bf8d      	iteet	hi
 800c75e:	238a      	movhi	r3, #138	; 0x8a
 800c760:	2001      	movls	r0, #1
 800c762:	700a      	strbls	r2, [r1, #0]
 800c764:	6003      	strhi	r3, [r0, #0]
 800c766:	bf88      	it	hi
 800c768:	f04f 30ff 	movhi.w	r0, #4294967295
 800c76c:	4770      	bx	lr
 800c76e:	4608      	mov	r0, r1
 800c770:	4770      	bx	lr

0800c772 <abort>:
 800c772:	2006      	movs	r0, #6
 800c774:	b508      	push	{r3, lr}
 800c776:	f000 f82b 	bl	800c7d0 <raise>
 800c77a:	2001      	movs	r0, #1
 800c77c:	f7f5 f8ac 	bl	80018d8 <_exit>

0800c780 <_raise_r>:
 800c780:	291f      	cmp	r1, #31
 800c782:	b538      	push	{r3, r4, r5, lr}
 800c784:	4604      	mov	r4, r0
 800c786:	460d      	mov	r5, r1
 800c788:	d904      	bls.n	800c794 <_raise_r+0x14>
 800c78a:	2316      	movs	r3, #22
 800c78c:	6003      	str	r3, [r0, #0]
 800c78e:	f04f 30ff 	mov.w	r0, #4294967295
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c796:	b112      	cbz	r2, 800c79e <_raise_r+0x1e>
 800c798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c79c:	b94b      	cbnz	r3, 800c7b2 <_raise_r+0x32>
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 f830 	bl	800c804 <_getpid_r>
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	4601      	mov	r1, r0
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7ae:	f000 b817 	b.w	800c7e0 <_kill_r>
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d00a      	beq.n	800c7cc <_raise_r+0x4c>
 800c7b6:	1c59      	adds	r1, r3, #1
 800c7b8:	d103      	bne.n	800c7c2 <_raise_r+0x42>
 800c7ba:	2316      	movs	r3, #22
 800c7bc:	6003      	str	r3, [r0, #0]
 800c7be:	2001      	movs	r0, #1
 800c7c0:	e7e7      	b.n	800c792 <_raise_r+0x12>
 800c7c2:	2400      	movs	r4, #0
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7ca:	4798      	blx	r3
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	e7e0      	b.n	800c792 <_raise_r+0x12>

0800c7d0 <raise>:
 800c7d0:	4b02      	ldr	r3, [pc, #8]	; (800c7dc <raise+0xc>)
 800c7d2:	4601      	mov	r1, r0
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	f7ff bfd3 	b.w	800c780 <_raise_r>
 800c7da:	bf00      	nop
 800c7dc:	200002ac 	.word	0x200002ac

0800c7e0 <_kill_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	4d06      	ldr	r5, [pc, #24]	; (800c800 <_kill_r+0x20>)
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	4611      	mov	r1, r2
 800c7ec:	602b      	str	r3, [r5, #0]
 800c7ee:	f7f5 f863 	bl	80018b8 <_kill>
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	d102      	bne.n	800c7fc <_kill_r+0x1c>
 800c7f6:	682b      	ldr	r3, [r5, #0]
 800c7f8:	b103      	cbz	r3, 800c7fc <_kill_r+0x1c>
 800c7fa:	6023      	str	r3, [r4, #0]
 800c7fc:	bd38      	pop	{r3, r4, r5, pc}
 800c7fe:	bf00      	nop
 800c800:	2001fac0 	.word	0x2001fac0

0800c804 <_getpid_r>:
 800c804:	f7f5 b850 	b.w	80018a8 <_getpid>

0800c808 <_init>:
 800c808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80a:	bf00      	nop
 800c80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c80e:	bc08      	pop	{r3}
 800c810:	469e      	mov	lr, r3
 800c812:	4770      	bx	lr

0800c814 <_fini>:
 800c814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c816:	bf00      	nop
 800c818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81a:	bc08      	pop	{r3}
 800c81c:	469e      	mov	lr, r3
 800c81e:	4770      	bx	lr
